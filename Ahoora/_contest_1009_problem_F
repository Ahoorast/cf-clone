#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 1000 + 10;
int n, sz[N], mx[N], ans[N], lazy[N];
vector<int> adj[N];
unordered_map<int, int> cnt;
 
int dfs_sz(int v, int par = 0) {
	for (auto u: adj[v])
		if (u ^ par)
			sz[v] += dfs_sz(u, v);
	return ++sz[v];
}
 
void add(int root, int v, int par = 0, int bg = 0, int h = 0) {
	cnt[h]++;
	if (cnt[h] == mx[root])
		ans[root] = min(ans[root], h);
	if (cnt[h] > mx[root]) {
		mx[root] = cnt[h];
		ans[root] = h;
	}
	for (auto u: adj[v])
		if (u ^ bg && u ^ par)
			add(root, u, v, bg, h + 1);
}
 
void dfs(int v, int par = 0, bool kp = false) {
	int bg = 0;
	for (auto u: adj[v])
		if (u ^ par && sz[bg] < sz[u])
			bg = u;
	for (auto u: adj[v])
		if (u ^ par && u ^ bg)
			dfs(u, v);
	if (bg) {
		dfs(bg, v, 1);
		mx[v] = mx[bg], ans[v] = ans[bg];
		lazy[v] = 1 + lazy[bg];
	}
	add(v, v, par, bg, -lazy[v]);
	if (!kp) 
		cnt.clear();
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs_sz(1);
	dfs(1);
	for (int i = 1; i <= n; i++)
		cout << ans[i] + lazy[i] << '\n';
	return 0;
}
