#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int cnt[N], n, m, q;
bool vis[N];
vector<int> vec[N];
 
struct DSU {
	vector<int> par, size;
	int comp;
	DSU(const int &n) {
		comp = n;
		par.push_back(-1), size.push_back(-1);
		for (int i = 1; i <= n; i++)
			par.push_back(i), size.push_back(1);
	}
	int findRoot(int v) {
		return par[v] == par[par[v]]? par[v]: par[v] = findRoot(par[v]);
	}
	bool Union(int v, int u) {
		int pv = findRoot(v), pu = findRoot(u);
		if (pv == pu)
			return true;
		if (size[pv] > size[pu])
			swap(pv, pu);
		par[pv] = par[pu], size[pu] += size[pv], comp--;
		return false;
	}
	int sz(int v) {
		return size[findRoot(v)];
	}
	bool check(int v, int u) {
		return findRoot(v) == findRoot(u);
	}
};
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> q;
	int ted = 0;
	for (int i = 1, r, c; i <= q; i++) {
		cin >> r >> c;
		vec[c].push_back(r);
		cnt[r]++;
		if (!vis[c])
			ted++, vis[c] = true;
	}
	DSU G(n);
	for (int i = 1; i <= m; i++) {
		int sz = vec[i].size();
		for (int j = 1; j < sz; j++)
			G.Union(vec[i][j - 1], vec[i][j]);
	}
	cout << G.comp - 1 + m - ted << '\n';
	return 0;
}
