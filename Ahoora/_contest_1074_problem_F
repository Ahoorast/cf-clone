#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, LG = 20;
int n, par[N][LG], st[N], en[N], h[N], TM;
vector<int> adj[N];
 
struct Node {
	int s, mn, lazy;
	Node() {
		s = mn = lazy = 0;
	}
	void merge(Node L, Node R) {
		mn = min(L.mn, R.mn);
		s = 0;
		if (mn == L.mn)
			s += L.s;
		if (mn == R.mn)
			s += R.s;
	}
	void add(int x) {
		lazy += x;
		mn += x;
	}
} seg[N << 2];
 
void build(int l = 0, int r = n, int id = 1) {
	seg[id].s = r - l;
	if (l + 1 == r)
		return;
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1); 
}
 
void shift(int id) {
	seg[id << 1].add(seg[id].lazy), seg[id << 1 | 1].add(seg[id].lazy);
	seg[id].lazy = 0;
}
 
void upd(int s, int e, int x, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r) {
		seg[id].add(x);
		return;
	}
	if (s >= r || e <= l)
		return;
	shift(id);
	int mid = l + r >> 1;
	upd(s, e, x, l, mid, id << 1), upd(s, e, x, mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
void dfs(int v) {
	st[v] = TM++;
	for (int i = 1; i < LG; i++)
		par[v][i] = par[par[v][i - 1]][i - 1];
	for (auto u: adj[v])
		if (u != par[v][0]) {
			h[u] = h[v] + 1;
			par[u][0] = v;
			dfs(u);
		}
	en[v] = TM;
}
 
int k_par(int v, int k) {
	for (int i = 0; i < LG; i++)
		if (k >> i & 1)
			v = par[v][i];
	return v;
}
 
int lca(int v, int u) {
	if (h[v] < h[u])
		swap(v, u);
	v = k_par(v, h[v] - h[u]);
	if (v == u)
		return v;
	for (int i = LG - 1; i >= 0; i--)
		if (par[v][i] != par[u][i])
			v = par[v][i], u = par[u][i];
	return par[v][0];
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		--v, --u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(0);
	set<pair<int, int>> E;
	build();
	while (Q--) {
		int v, u;
		cin >> v >> u;
		--v, --u;
		if (h[v] < h[u])
			swap(v, u);
		if (h[v] == h[u] && v > u)
			swap(v, u);
		int w =  (E.count({v, u})? -1: +1);
		if (w == -1)
			E.erase({v, u});
		else
			E.insert({v, u});
		int x = lca(v, u);
		if (u == x) {
			int y = k_par(v, h[v] - h[u] - 1);
			upd(st[y], en[y], +w);
			upd(st[v], en[v], -w);
		} else {
			upd(st[0], en[0], +w);
			upd(st[v], en[v], -w);
			upd(st[u], en[u], -w);
		}
		cout << seg[1].s * (seg[1].mn == 0) << '\n';
	}
	return 0;
}
