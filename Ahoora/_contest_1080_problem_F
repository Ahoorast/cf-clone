#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, m, k, val[N];
vector<pair<int, int>> seg[N << 2];
unordered_map<int, int> mn[N];
 
void build(int l = 0, int r = n, int id = 1) {
	if (l + 1 == r) {
		for (auto x: mn[l])
			seg[id].push_back({x.first, x.second});
		sort(seg[id].begin(), seg[id].end());
		int sz = (int)(seg[id].size());
		for (int i = sz - 2; i >= 0; i--)
			seg[id][i].second = min(seg[id][i].second, seg[id][i + 1].second);
		return;
	}
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
	vector<pair<pair<int, int>, bool>> vec;
	for (auto x: seg[id << 1])
		vec.push_back({x, 0}); 
	for (auto x: seg[id << 1 | 1])
		vec.push_back({x, 1});
	sort(vec.begin(), vec.end());
	int sz = (int)(vec.size()), mn[2] = {1 << 30, 1 << 30};
	for (int i = sz - 1; i >= 0; i--) {
		mn[vec[i].second] = min(mn[vec[i].second], vec[i].first.second);
		seg[id].push_back({vec[i].first.first, max(mn[0], mn[1])});
	}
	reverse(seg[id].begin(), seg[id].end());
}
 
bool get(int s, int e, int x, int y, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r) {
		auto it = lower_bound(seg[id].begin(), seg[id].end(), make_pair(x, -1));
		if (it == seg[id].end())
			return false;
		return (*it).second <= y;
	}
	if (s >= r || e <= l)
		return true;
	int mid = l + r >> 1;
	return get(s, e, x, y, l, mid, id << 1) && get(s, e, x, y, mid, r, id << 1 | 1);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> k;
	for (int i = 0, l, r, p; i < k; i++) {
		cin >> l >> r >> p;
		--p;
		if (!mn[p].count(l))
			mn[p][l] = r;
		else
			mn[p][l] = min(mn[p][l], r);
	}
	build();
	while (m--) {
		int a, b, x, y;
		cin >> a >> b >> x >> y;
		--a;
		cout << (get(a, b, x, y)? "yes": "no") << endl;
	}
	return 0;
}
