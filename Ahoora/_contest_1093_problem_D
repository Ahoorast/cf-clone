#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 10, mod = 998244353;
int n, m, cnt[2];
vector<int> adj[N];
bool vis[N], col[N];
 
long long Pow(long long a,long long b) {
	return b? (b & 1? a: 1) % mod * Pow(a * a % mod, b >> 1) % mod: 1;
}
 
void dfsCol(int root, bool h = 0) {
	h = !h;
	vis[root] = true;
	col[root] = h;
	for (auto u: adj[root])
		if (!vis[u]) 
			dfsCol(u, h);
}
 
void dfs(int root) {
	cnt[col[root]]++;
	vis[root] = true;
	for (auto u: adj[root])
		if (!vis[u])
			dfs(u);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n >> m;
		for (int i = 0, v, u; i < m; i++) {
			cin >> v >> u;
			adj[v].push_back(u);
			adj[u].push_back(v);
		}
		for (int i = 1; i <= n; i++)
			if (!vis[i])
				dfsCol(i);
		long long res = -1;
		for (int i = 1; i <= n; i++)
			for (auto u: adj[i])
				if (col[i] == col[u]) 
					res = 0;
		if (!res)
			cout << res << endl;
		else {
			res = 1;
			for (int i = 1; i <= n; i++)
				vis[i] = false;
			for (int i = 1; i <= n; i++)
				if (!vis[i]) {
					cnt[0] = cnt[1] = 0;
					dfs(i);
					(res *= Pow(2LL, 1LL * cnt[0]) + Pow(2LL, 1LL * cnt[1]) % mod) %= mod;
				}
			cout << res << endl;
		}
		for (int i = 1; i <= n; i++)
			adj[i].clear(), vis[i] = col[i] = false;
	}
	return 0;
}
