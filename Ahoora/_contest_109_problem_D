#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
pair<int, int> t[N];
int a[N], n, cnt[N];
bool lck[N];
 
bool lucky(int x) {
	while (x) {
		if (x % 10 != 7 && x % 10 != 4)
			return false;
		x /= 10;
	}
	return true;
}
 
void read() {
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> t[i].first, t[i].second = i, a[i] = t[i].first;
	sort(t + 1, t + n + 1);
	for (int i = 1; i <= n; i++) {
		pair<int, int> tmp = {a[i], 0};
		int x = lower_bound(t + 1, t + n + 1, tmp) - t;
		cnt[x]++;
		lck[i] = lucky(a[i]);
		a[i] = cnt[x] - 1 + x;
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	read();
	int cnt = 0, last = 0;
	for (int i = 1; i <= n; i++)
		if (lck[i])
			cnt++, last = i;
	if (is_sorted(a + 1, a + n + 1))
		return cout << 0 << endl, 0;
	if (!cnt)
		return cout << -1 << endl, 0;
	vector<pair<int, int>> ans;
	set<int> s;
	for (int i = 1; i <= n; i++)
		if (!lck[i] && a[i] != i)
			s.insert(i);
	while (s.size()) {
		auto i = *s.begin();
		int x = i, y = a[i];
		if (lck[y]) {
			s.erase(x);
			ans.push_back({x, y});
			swap(a[x], a[y]), swap(lck[x], lck[y]);
			if (y == last)
				swap(last, x);
		}
		else {
			s.erase(x), s.erase(y);
			ans.push_back({y, last});
			swap(a[last], a[y]), swap(lck[last], lck[y]), swap(y, last);
			ans.push_back({x, last});
			swap(a[last], a[x]), swap(lck[last], lck[x]), swap(last, x);
			if (a[y] != y)
				s.insert(y);
		}
	}
	for (int i = 1; i <= n; i++)
		if (a[i] != i)
			s.insert(i);
	while (s.size()) {
		int x = *s.begin(), y = a[x];
		s.erase(x);
		if (x != y) {
			ans.push_back({x, y});
			swap(a[x], a[y]), swap(x, y);
			if (a[y] != y)
				s.insert(y);
		}
	}
	cout << ans.size() << endl;
	for (auto it: ans)
		cout << it.first << ' ' << it.second << endl;
	return 0;
}
