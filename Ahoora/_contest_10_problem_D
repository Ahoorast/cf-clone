#include <bits/stdc++.h>
using namespace std;
 
const int N = 502;
short dp[N][N][N];
int a[3][N], n, m, ans;
vector<int> v;
 
inline void pp(int i, int j, int k) {
	if (i >= 1 && j >= 1 && k >= 1) {
		if (dp[i][j][k] == dp[i - 1][j - 1][k - 1])
			pp(i - 1, j - 1, k - 1);
		else if (dp[i][j][k] == dp[i - 1][j][k])
			pp(i - 1, j, k);
		else if (dp[i][j][k] == dp[i][j - 1][k])
			pp(i, j - 1, k);
		else if (dp[i][j][k] == dp[i][j][k - 1])
			pp(i, j, k - 1);
		else {
			pp(i - 1, j - 1, k - 1);
			cout << a[0][i] << ' ';
		}
	}
}
 
int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[0][i], a[2][i] = a[0][i];
	cin >> m;
	for (int i = 1; i <= m; i++)
		cin >> a[1][i];
	sort(a[2] + 1, a[2] + 1 + n);
	unique(a[2] + 1,a[2] + 1 + n);
	int sz = n;
	for (int i = 1; i <= n; i++)
		if (a[2][i] > a[2][i + 1])
			sz = min(sz, i);
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			for (int k = 1; k <= sz; k++) {
				dp[i][j][k] = dp[i - 1][j][k];
				if (dp[i][j - 1][k] > dp[i][j][k])
					dp[i][j][k] = dp[i][j - 1][k];
				if (dp[i][j][k - 1] > dp[i][j][k])
					dp[i][j][k] = dp[i][j][k - 1];
				if (dp[i - 1][j - 1][k - 1] > dp[i][j][k])
					dp[i][j][k] = dp[i - 1][j - 1][k - 1];
				if (a[0][i] == a[1][j] && a[0][i] == a[2][k] && dp[i - 1][j - 1][k - 1] + 1 > dp[i][j][k])
					dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;
			}
	cout << dp[n][m][sz] << endl;
	pp(n, m, sz);
	return 0;
}
