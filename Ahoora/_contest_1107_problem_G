#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 100;
long long n, a, x[N], c[N], d[N];
int L[N], R[N];
 
int getLeft(int i, int x) {
	return d[i] > x? i: getLeft(L[i], x);
}
 
int getRight(int i, int x) {
	return d[i] > x? i: getRight(R[i], x);
}
 
struct Node {
	long long ans = 0, suf = 0, pre = 0, sum = 0;
	void merge(Node L, Node R) {
		ans = max({L.ans, R.ans, L.suf + R.pre});
		suf = max(R.suf, L.suf + R.sum);
		pre = max(L.pre, L.sum + R.pre);
		sum = L.sum + R.sum;
	}
} seg[N << 2];
 
void build(int l = 1, int r = n, int root = 1) {
	if (l == r) {
		seg[root].ans = seg[root].suf = seg[root].pre = seg[root].sum = a - c[l];
		return;
	}
	int mid = l + r >> 1;
	build(l, mid, root << 1), build(mid + 1, r, root << 1 | 1);
	seg[root].merge(seg[root << 1], seg[root << 1 | 1]);
}
 
Node get(int l, int r, int lx = 1, int rx = n, int root = 1) {
	Node res;
	if (l <= lx && r >= rx) 
		return seg[root];
	int mid = lx + rx >> 1;
	if (l <= mid && r > mid) {
		res.merge(get(l, r, lx, mid, root << 1), get(l, r, mid + 1, rx, root << 1 | 1));
		return res;
	}
	else if (l <= mid)
		return get(l, r, lx, mid, root << 1);
	else
		return get(l, r, mid + 1, rx, root << 1 | 1);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> a;
	for (int i = 1; i <= n; i++)
		cin >> x[i] >> c[i];
	for (int i = 2; i <= n; i++)
		d[i - 1] = x[i] - x[i - 1];
	d[0] = d[n] = 1 << 30;
	for (int i = 1; i < n; i++)
		L[i] = getLeft(i - 1, d[i]);
	for (int i = n - 1; i >= 1; i--)
		R[i] = getRight(i + 1, d[i]);
	build();
	long long ans = 0;
	for (int i = 1; i < n; i++) {
		int l = L[i] + 1, r = R[i];
		ans = max(ans, get(l, r).ans - d[i] * d[i]);
	}
	for (int i = 1; i <= n; i++)
		ans = max(ans, a - c[i]);
	cout << ans << '\n';
	return 0;
}
