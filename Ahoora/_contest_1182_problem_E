#include<bits/stdc++.h>
using namespace std;
 
const int mod = 1e9 + 7;
 
long long Pow(long long a, long long b) {
	return b? (b & 1? a: 1) % mod * Pow(a * a % mod, b >> 1) % mod: 1;
}
 
int add(int a, int b, int mod) {
	a += b;
	a += (a < 0) * mod;
	a -= (a >= mod) * mod;
	return a;
}
 
int mul(int a, int b, int mod) {
	return 1LL * a * b % mod;
}
 
int inv(int x) {
	return Pow(x, mod - 2);
}
 
struct bad_struct {
	int cnt[3];
	bad_struct(int x = 0) {
		cnt[0] = cnt[1] = cnt[2] = x;
	}
	bad_struct operator + (const bad_struct &x) {
		bad_struct res;
		for (int i = 0; i < 3; i++)
			res.cnt[i] = add(cnt[i], x.cnt[i], mod - 1);
		return res;
	}
	bad_struct operator * (const bad_struct &x) {
		bad_struct res;
		for (int i = 0; i < 3; i++)
			res.cnt[i] = mul(cnt[i], x.cnt[i], mod - 1);
		return res;
	}
	void operator += (const bad_struct &x) {
		*this = *this + x;
	}
	void operator *= (const bad_struct &x) {
		*this = *this * x;
	}
};
 
struct mat {
	int n, m;
	vector<vector<bad_struct>> a;
	mat(int x = 0, int y = 0) {
		n = x, m = y;
		a.resize(n, vector<bad_struct>(m));
	}
	void identity() {
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = (i == j? bad_struct(1): bad_struct(0));
	}
	mat operator * (const mat &x) {
		assert(m == x.n);
		mat res(n, x.m);
		for (int i = 0; i < n; i++)
			for (int j = 0; j < x.m; j++)
				for (int k = 0; k < m; k++)
					res.a[i][j] += a[i][k] * x.a[k][j];
		return res;
	}
	void operator *= (const mat &x) {
		*this = *this * x;
	}
	mat operator ^ (long long b) {
		mat res(n, m), add = *this;
		res.identity();
		for (; b; b >>= 1, add *= add)
			if (b & 1)
				res *= add;
		return res;
	}
	void print() {
		for (int i = 0; i < 3; i++)
			cout << a[0][0].cnt[i] << ' ';
		cout << '\n';
	}
} res(1, 3), A(3, 3);
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	for (int i = 0; i < 2; i++)
		A.a[i + 1][i] = bad_struct(1);
	for (int i = 0; i < 3; i++)
		A.a[i][2] = bad_struct(1);
	for (int i = 0; i < 3; i++) 
		res.a[0][i].cnt[i] = 1;
	long long n, f[3], c;
	cin >> n;
	for (int i = 0; i < 3; i++)
		cin >> f[i];
	cin >> c;
	res *= A ^ (n - 1);
	int ans = 1;
	for (int i = 0; i < 3; i++) {
		f[i] = mul(f[i], Pow(c, i + 1), mod);
		ans = mul(ans, Pow(f[i], res.a[0][0].cnt[i]), mod);
	}
	ans = mul(ans, inv(Pow(c, n)), mod);
	cout << ans << '\n';
	return 0;
}
