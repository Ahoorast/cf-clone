#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 100 * 1000 + 10;
int n;
long long score[N], up[N], sub[N], ans;
vector<int> adj[N];
 
void dfs1(int root, int par = -1) {
	for (auto u: adj[root])
		if (u ^ par) {
			dfs1(u, root);
			score[root] += score[u] + sub[u];
			sub[root] += sub[u];
		}
	sub[root]++;
}
 
void dfs2(int root, int par = -1) {
	long long sum = 0;
	for (auto u: adj[root])
		if (u ^ par)
			sum += score[u] + sub[u];
	for (auto u: adj[root])
		if (u ^ par) {
			up[u] = (n - sub[u]) + (sum - score[u] - sub[u]) + up[root];
			ans = max(ans, up[u] + score[u]);
		}
	for (auto u: adj[root])
		if (u ^ par)
			dfs2(u, root);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs1(1), ans = score[1], dfs2(1);
	cout << ans + n << '\n';
	return 0;
}
