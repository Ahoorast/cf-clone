#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, K = 410 * 2;
int n, m, k;
long long d[K][K];
 
struct edge {
	int v, u;
	long long w;
	edge(int a = 0, int b = 0, long long c = 0) {
		v = a, u = b, w = c;
	}
	bool operator < (edge b) const {
		return w < b.w;
	}
};
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> k;
	vector<edge> E;
	for (int i = 1, v, u, w; i <= m; i++) {
		cin >> v >> u >> w;
		E.push_back(edge(v, u, w));
	}
	sort(E.begin(), E.end());
	E.resize(min(m, k));
	vector<int> V;
	for (auto e: E) {
		V.push_back(e.v);
		V.push_back(e.u);
	}
	sort(V.begin(), V.end());
	V.resize(unique(V.begin(), V.end()) - V.begin());
	int sz = (int)(V.size());
	for (int i = 0; i < sz; i++)
		for (int j = 0; j < sz; j++)
			d[i][j] = (i != j) * (1LL << 60);
	for (int i = 0; i < sz; i++)
		d[i][i] = 0;
	for (auto e: E) {
		int v = lower_bound(V.begin(), V.end(), e.v) - V.begin();
		int u = lower_bound(V.begin(), V.end(), e.u) - V.begin();
		d[v][u] = d[u][v] = min(d[v][u], e.w);
	}
	for (int k = 0; k < sz; k++)
		for (int i = 0; i < sz; i++)
			for (int j = 0; j < sz; j++)
				d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
	vector<long long> all;
	for (int i = 0; i < sz; i++)
		for (int j = i + 1; j < sz; j++)
			all.push_back(d[i][j]);
	sort(all.begin(), all.end());
	cout << all[--k] << '\n';
	return 0;
}
