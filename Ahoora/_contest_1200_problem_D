#include <bits/stdc++.h>
using namespace std;
 
const int maxn = 2100;
long long n, k, dp[2][maxn][2], arr[2][maxn][maxn];
string s[maxn];
 
void read() {
	cin >> n >> k;
	for (int i = 0; i < n; i++) cin >> s[i];
}
 
void build() {
	for (int i = 0; i < n; i++) {
		int r = -1;
		for (int j = 0; j < n; j++) {
			if (s[i][j] == 'B' && dp[0][i][0] == 0) dp[0][i][0] = j + 1;
			else if (s[i][j] == 'B') r = j + 1;
		}
		if (dp[0][i][0] != 0) (r == -1 ? dp[0][i][1] = dp[0][i][0] : dp[0][i][1] = r);
		else dp[0][i][0] = 0, dp[0][i][1] = n + 10;
	}
	for (int i = 0; i < n; i++) {
		int r = -1;
		for (int j = 0; j < n; j++) {
			if (s[j][i] == 'B' && dp[1][i][0] == 0) dp[1][i][0] = j + 1;
			else if (s[j][i] == 'B') r = j + 1;
		}
		if (dp[1][i][0] != 0) (r == -1 ? dp[1][i][1] = dp[1][i][0] : dp[1][i][1] = r);
		else dp[1][i][0] = 0, dp[1][i][1] = n + 10;
	}
}
 
int cal (int l, int r, int l1, int r1) {
	if (l <= l1 && r >= r1) return true;
	else return false;
}
 
void countSetStartPoint() {
	for (int i = 0; i <= n - k; i++)
		for (int j = 0; j < k; j++)
			arr[0][i][0] += cal(i + 1, i + k, dp[1][j][0], dp[1][j][1]);
	for (int i = 0; i <= n - k; i++) 
		for (int j = 0; j < k; j++)
			arr[1][0][i] += cal(i + 1, i + k, dp[0][j][0], dp[0][j][1]);
}
 
void countForEach() {
	for (int i = 1; i <= n - k; i++) {
		for (int j = 0; j <= n - k; j++) {
			arr[0][j][i] = arr[0][j][i - 1] + cal(j + 1, j + k, dp[1][i + k - 1][0], dp[1][i + k - 1][1]) - cal(j + 1, j + k, dp[1][i - 1][0], dp[1][i - 1][1]);
			arr[1][i][j] = arr[1][i - 1][j] + cal(j + 1, j + k, dp[0][i + k - 1][0], dp[0][i + k - 1][1]) - cal(j + 1, j + k, dp[0][i - 1][0], dp[0][i - 1][1]);
		}
	}
}
 
long long res = 0;
 
void setResult() {
	for (int i = 0; i <= n - k; i++)
		for (int j = 0; j <= n - k; j++)
			res = max(res, arr[0][i][j] + arr[1][i][j]);
}
long long ans = 0;
 
void calLines() {
	for (int i = 0; i < n; i++) {
		int cnt = 0;
		for (int j = 0; j < n; j++)
			if (s[i][j] == 'B') cnt++;
		if (cnt == 0) ans++;
	}
	for (int i = 0; i < n; i++) {
		int cnt = 0;
		for (int j = 0; j < n; j++)
			if (s[j][i] == 'B') cnt++;
		if (cnt == 0) ans++;
	}
}
 
void solve() {
	build();
	countSetStartPoint();
	countForEach();
	setResult();
	calLines();
	cout << ans + res << endl;
}
int main() {
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	read();
	solve();
	return 0;
}
