#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int n, k, c[N], cnt_comp;
bool vis[N];
vector<int> adj[N], jda[N], L;
 
void dfs(int v) {
	vis[v] = true;
	for (auto u: adj[v])
		if (!vis[u])
			dfs(u);
	L.push_back(v);
}
 
void dfs_c(int v) {
	c[v] = cnt_comp;
	for (auto u: jda[v])
		if (!c[u])
			dfs_c(u);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> k;
	for (int t = 0; t < 2; t++) {
		int last;
		cin >> last;
		last--;
		for (int i = 1, x; i < n; i++) {
			cin >> x;
			--x;
			adj[last].push_back(x);
			jda[x].push_back(last);
			last = x;
		}
	}
	for (int i = 0; i < n; i++)
		if (!vis[i])
			dfs(i);
	reverse(L.begin(), L.end());
	for (auto v: L)
		if (!c[v]) {
			cnt_comp++;
			dfs_c(v);
		}
	if (cnt_comp < k)
		return cout << "NO\n", 0;
	cout << "YES\n";
	for (int i = 0; i < n; i++)
		cout << (char)(min(k - 1, --c[i]) + 'a');
	cout << '\n';
	return 0;
}
