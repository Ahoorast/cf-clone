#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, a[N], sz;
vector<int> lucky;
 
struct Node {
	int mn = 1 << 30, s = 0, lazy = 0;
	void init(int x) {
		mn = *lower_bound(lucky.begin(), lucky.end(), x) - x;
		s = 1;
	}
	void merge(Node L, Node R) {
		mn = min(L.mn, R.mn);
		s = 0;
		if (L.mn == mn)
			s += L.s;
		if (R.mn == mn)
			s += R.s;
	}
	void add(int x) {
		mn -= x;
		lazy += x;
	}
} seg[N << 2];
 
bool is_lucky(int x) {
	while (x) {
		if (x % 10 != 4 && x % 10 != 7)
			return false;
		 x /= 10;
	}
	return true;
}
 
void build(int l = 0, int r = n, int id = 1) {
	if (l + 1 == r) {
		seg[id].init(a[l]);
		return;
	}
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
void shift(int id) {
	seg[id << 1].add(seg[id].lazy), seg[id << 1 | 1].add(seg[id].lazy);
	seg[id].lazy = 0;
}
 
void upd(int s, int e, int d, int l = 0, int r = n, int id = 1) {
	if (s >= r || e <= l)
		return;
	if (s <= l && e >= r && seg[id].mn >= d) {
		seg[id].add(d);
		return;
	}
	if (l + 1 == r) {
		a[l] += seg[id].lazy + d, seg[id].lazy = 0;
		seg[id].init(a[l]);
		return;
	}
	shift(id);
	int mid = l + r >> 1;
	upd(s, e, d, l, mid, id << 1), upd(s, e, d, mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
Node get(int s, int e, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r)
		return seg[id];
	if (s >= r || e <= l)
		return seg[0];
	shift(id);
	int mid = l + r >> 1;
	Node res;
	res.merge(get(s, e, l, mid, id << 1), get(s, e, mid, r, id << 1 | 1));
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	for (int i = 1; i <= 10000; i++)
		if (is_lucky(i))
			lucky.push_back(i);
	lucky.push_back(10001);
	int Q;
	cin >> n >> Q;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	build();
	while (Q--) {
		string s;
		int l, r, d;
		cin >> s >> l >> r;
		--l;
		if (s == "add") {
			cin >> d;
			upd(l, r, d);
		} else {
			Node res = get(l, r);
			cout << (res.mn == 0? res.s: 0) << '\n';
		}
	}
	return 0;
}
