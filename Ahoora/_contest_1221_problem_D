#include <bits/stdc++.h>
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
 
const int N = 3 * 1000 * 100 + 1000;
ull dp[3][N], a[N], b[N], n;
vector<ull> result;
 
void read() {
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i] >> b[i];
}
 
void solve() {
	dp[0][1] = 0;
	dp[1][1] = b[1];
	dp[2][1] = b[1] * 2;
	for (ull i = 2; i <= n; i++) 
		for (ull j = 0; j < 3; j++) {
			dp[j][i] = -1;
			for (ull k = 0; k < 3; k++)
				if (a[i - 1] + k != a[i] + j) 
					dp[j][i] = min(dp[j][i], dp[k][i - 1] + b[i] * j);
		}
	result.push_back(min(dp[0][n], min(dp[1][n], dp[2][n])));
}
 
int main() {
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		read();
		solve();
		for (int i = 0; i < n; i++)
			a[i] = b[i] = dp[0][i] = dp[1][i] = dp[2][i] = 0;
	}
	for (int i = 0; i < result.size(); i++)
		cout << result[i] << endl;
	return 0;
}
