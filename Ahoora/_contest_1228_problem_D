#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
set<int> s, adj[N];
int n, m, comp[N], cnt, ted[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1, v, u; i <= m; i++) {
		cin >> v >> u;
		adj[v].insert(u);
		adj[u].insert(v);
	}
	for (int i = 1; i <= n; i++)
		s.insert(i);
	while (!s.empty()) {
		int v = *s.begin();
		s.erase(s.begin());
		queue<int> q;
		cnt++;
		q.push(v);
		comp[v] = cnt;
		ted[cnt]++;
		while (q.size()) {
			int v = q.front();
			q.pop();
			vector<int> vert;
			for (auto it: s)
				if (adj[v].find(it) == adj[v].end())
					vert.push_back(it), q.push(it), comp[it] = cnt, ted[cnt]++;
			for (auto it: vert)
				s.erase(it);
		}
	}
	if (cnt != 3)
		return cout << "-1\n", 0;
	for (int i = 1; i <= n; i++)
		for (auto u: adj[i])
			if (comp[u] == comp[i])
				return cout << "-1\n", 0;
	if (m != ted[1] * ted[2] + ted[2] * ted[3] + ted[1] * ted[3])
		return cout << "-1\n", 0;
	for (int i = 1; i <= n; i++)
		cout << comp[i] << ' ';
	cout << "\n";
	return 0;
}
