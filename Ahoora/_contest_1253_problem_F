#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, LG = 20;
int n, m, k, who[N], par[N], p[N][LG],  h[N];
vector<int> vec[N];
vector<pair<int, int>> adj[N];
long long d[N], mx[N][LG];
vector<pair<int, long long>> T[N];
 
void dij() {
	fill(d, d + n + 1, 1LL << 60);
	iota(who, who + k + 1, 0);
	set<pair<long long, int>> q;
	for (int i = 1; i <= k; i++)
		q.insert({0, i}), d[i] = 0;
	while (q.size()) {
		auto it = *q.begin();
		q.erase(q.begin());
		int v = it.second;
		for (auto u: adj[v])
			if (d[u.first] > u.second + d[v]) {
				q.erase({d[u.first], u.first});
				vec[u.first].clear();
				who[u.first] = who[v];
				vec[u.first].push_back(who[v]);
				q.insert({d[u.first] = u.second + d[v], u.first});
			} 
	}
}
 
int get_par(int v) {
	return par[v] == v? v: par[v] = get_par(par[v]);
}
 
bool Union(int v, int u) {
	v = get_par(v), u = get_par(u);
	if (v == u)
		return false;
	par[u] = v;
	return true;
}
 
struct edge {
	int v, u;
	long long w;
	edge(int x, int y, long long z) {
		v = x, u = y, w = z;
	}
	bool operator < (edge b) const {
		return w < b.w;
	}
};
 
void dfs(int v, int par = 0) {
	for (int i = 1; i < LG; i++) {
		p[v][i] = p[p[v][i - 1]][i - 1];
		mx[v][i] = max(mx[v][i - 1], mx[p[v][i - 1]][i - 1]);
	}
	for (auto u: T[v])
		if (u.first != par) {
			p[u.first][0] = v, mx[u.first][0] = u.second;
			h[u.first] = h[v] + 1;
			dfs(u.first, v);
		}
}
 
long long k_par(int &v, int l) {
	long long res = 0;
	for (int i = 0; i < LG; i++)
		if ((1 << i) & l) {
			res = max(res, mx[v][i]);
			v = p[v][i];
		}
	return res;
}
 
long long get(int v, int u) {
	if (h[u] > h[v])
		swap(v, u);
	long long res = 0;
	res = max(res, k_par(v, h[v] - h[u]));
	if (v == u)
		return res;
	for (int i = LG - 1; i >= 0; i--)
		if (p[v][i] != p[u][i]) {
			res = max({res, mx[v][i], mx[u][i]});
			v = p[v][i], u = p[u][i];
		}
	res = max({res, mx[v][0], mx[u][0]});
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> m >> k >> Q;
	for (int i = 0, v, u, w; i < m; i++) {
		cin >> v >> u >> w;
		adj[v].push_back({u, w});
		adj[u].push_back({v, w});
	}
	dij();
	vector<edge> E;
	for (int i = 1; i <= n; i++)
		for (auto u: adj[i])
			E.push_back(edge(who[i], who[u.first], u.second + d[i] + d[u.first]));
	sort(E.begin(), E.end());
	iota(par, par + n + 1, 0);
	for (auto e: E) 
		if (Union(e.v, e.u)) {
			T[e.v].push_back({e.u, e.w});
			T[e.u].push_back({e.v, e.w});
		}
	dfs(1);
	while (Q--) {
		int v, u;
		cin >> v >> u;
		cout << get(v, u) << '\n';
	}
	return 0;
}
