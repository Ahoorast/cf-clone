#include <bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100;
int k[3], dp[5][N];
bool D[3][N];
 
void read() {
	cin >> k[0] >> k[1] >> k[2];
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < k[i]; j++) {
			int a;
			cin >> a, D[i][a] = true;
		}
}
 
void solve() {
	for (int i = 1; i < N; i++) {
		for (int j = 0; j < 3; j++) {
			dp[j][i] = dp[j][i - 1];
			for (int K = 0; K < 3; K++)
				if (K != j)
					dp[j][i] += D[K][i];
		}
		dp[3][i] = min(dp[3][i - 1] + D[0][i] + D[2][i], dp[0][i - 1] + D[0][i] + D[2][i]);
		dp[4][i] = min(dp[4][i - 1] + D[0][i] + D[1][i], min(dp[3][i - 1] + D[0][i] + D[1][i], dp[0][i - 1] + D[1][i] + D[2][i]));
	}
}
 
int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	read();
	solve();
	int ans = dp[0][N - 1];
	for (int i = 1; i < 5; i++)
		ans = min(ans, dp[i][N - 1]);
	cout << ans << endl;
	return 0;
}
