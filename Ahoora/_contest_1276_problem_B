#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int n, m, a, b, sz[N], par[N], TM;
bool vis[2][N];
long long ans;
vector<int> adj[N];
 
int get_par(int v) {
	return par[v] == v? v: par[v] = get_par(par[v]);
}
 
void Union(int v, int u) {
	v = get_par(v), u = get_par(u);
	if (v == u)
		return;
	if (sz[v] < sz[u])
		swap(v, u);
	par[u] = v;
	sz[v] += sz[u];
}
 
void upd(int v) {
	int s = 0;
	for (auto u: adj[v])
		if (u != a && u != b && !vis[TM][get_par(u)]) {
			vis[TM][get_par(u)] = true;
			int x = sz[get_par(u)];
			ans -= 1LL * s * x;
			s += x;
		}
	TM++;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n >> m >> a >> b;
		for (int i = 1, v, u; i <= m; i++) {
			cin >> v >> u;
			adj[v].push_back(u);
			adj[u].push_back(v);
		}
		for (int i = 1; i <= n; i++)
			sz[i] = 1, par[i] = i;
		for (int i = 1; i <= n; i++)
			for (auto u: adj[i])
				if (u != a && u != b && i != a && i != b)
					Union(i, u);
		ans = 1LL * (n - 2) * (n - 3) / 2;
		for (int i = 1; i <= n; i++)
			if (i != a && i != b && get_par(i) == i) {
				int x = sz[get_par(i)];
				ans -= 1LL * x * (x - 1) / 2;
			}
		TM = 0;
		upd(a), upd(b);
		int s = 0;
		for (int i = 1; i <= n; i++) 
			if (vis[0][i] && vis[1][i]) {
				int x = sz[i];
				ans += s * x;
				s += x;
			}
		for (int i = 1; i <= n; i++) 
			adj[i].clear(), vis[0][i] = vis[1][i] = false;
		cout << ans << '\n';
	}
	return 0;
}
