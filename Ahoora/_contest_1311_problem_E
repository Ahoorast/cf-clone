#include<bits/stdc++.h>
using namespace std;
Â 
const int N = 5 * 1000 + 100;
int n, d, par[N], deg[N], h[N];
unordered_set<int> s[N][3];
Â 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n >> d;
		int low = 0, high = n * (n - 1) / 2;
		h[1] = 0, deg[1] = 0, par[1] = -1;
		for (int i = 2; i <= n; i++)
			par[i] = i / 2, deg[i / 2]++, h[i] = h[i / 2] + 1;
		int H = 0;
		for (int i = 1; i <= n; i++)
			low += h[i], s[h[i]][deg[i]].insert(i), H = max(H, h[i]);
		if (d < low || d > high) 
			cout << "NO\n";
		else {
			cout << "YES\n";
			while (low < d) {
				for (int i = 1; i < n && low < d; i++) {
					int sz[3] = {(int)(s[i][0].size()), (int)(s[i][1].size()), (int)(s[i][2].size())}, v = -1, u = -1;
					if (sz[0] >= 1) 
						v = *s[i][0].begin();
					if (sz[0] >= 2)
						u = *++s[i][0].begin();
					else if (sz[1] >= 1)
						u = *s[i][1].begin();
					if (u != -1 && v != -1) {
						s[i - 1][deg[par[v]]].erase(par[v]);
						deg[par[v]]--;
						s[i - 1][deg[par[v]]].insert(par[v]);
						s[i][0].erase(v);
						par[v] = u, h[v]++;
						s[i][deg[u]].erase(u);
						deg[u]++;
						s[i][deg[u]].insert(u);
						s[i][0].erase(v);
						s[i + 1][0].insert(v);
						low++;
					}
				}
			}
			for (int i = 2; i <= n; i++)
				cout << par[i] << ' ';
			cout << '\n';
		}
		for (int i = 0; i <= n; i++)
			deg[i] = par[i] = h[i] = 0, s[i][0].clear(), s[i][1].clear(), s[i][2].clear();
	}
	return 0;
}
