#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100;
int n, cnt[N << 2];
pair<int, int> d[N];
long long seg[N << 2];
 
void read() {
	int sz = 0;
	map<int, int> mp;
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> d[i].first;
	int t[N];
	for (int i = 1; i <= n; i++) {
		cin >> t[i];
		d[i].second = t[i];
	}
	sort(t + 1, t + n + 1);
	mp[t[1]] = ++sz;
	for (int i = 2; i <= n; i++)
		if (t[i] != t[i - 1])
			mp[t[i]] = ++sz;
	for (int i = 1; i <= n; i++)
		d[i].second = mp[d[i].second];
}
 
void add(int x, int y, int l = 1, int r = n, int root = 1) {
	seg[root] += y;
	cnt[root]++;
	if (l == r)
		return;
	int mid = (l + r) >> 1;
	if (x <= mid)
		add(x, y, l, mid, root * 2);
	if (x > mid)
		add(x, y, mid + 1, r, root * 2 + 1);
}
 
pair<long long, int> query(int l, int r = n, int root = 1, int lv = 1, int rv = n) {
	if (lv == l && rv == r)
		return {seg[root], cnt[root]};
	int mid = (lv + rv) >> 1;
	pair<long long, int> res, t1, t2;
	res = t1 = t2 = {0LL, 0};
	if (l <= mid)
		t1 = query(l, min(r, mid), root * 2, lv, mid);
	if (r > mid)
		t2 = query(max(l, mid + 1), r, root * 2 + 1, mid + 1, rv);
	res.first = t1.first + t2.first;
	res.second = t1.second + t2.second;
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	read();
	sort(d + 1, d + n + 1);
	long long ans = 0;
	for (long long i = n; i >= 1; i--) {
		add(d[i].second, d[i].first);
		pair<long long, int> t = query(d[i].second);
		ans += t.first - 1LL * t.second * d[i].first;
	}
	cout << ans << endl;
	return 0;
}
