#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int n, m, K, p[N], d[N];
bool vis[N];
vector<int> adj[N], adj1[N];
 
void read() {
	cin >> n >> m;
	for (int i = 0, v, u; i < m; i++) {
		cin >> v >> u;
		adj[u].push_back(v);
		adj1[v].push_back(u);
	}
	cin >> K;
	for (int i = 1; i <= K; i++)
		cin >> p[i];
}
 
void bfs(int root) {
	queue<int> q;
	q.push(root), vis[root] = true;
	while (q.size()) {
		int x = q.front();
		q.pop();
		for (auto u: adj[x])
			if (!vis[u]) 
				q.push(u), d[u] = d[x] + 1, vis[u] = true;
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	read();
	bfs(p[K]);
	int ans1 = 0, ans2 = 0;
	for (int i = 1; i <= K - 1; i++) {
		int mn = 1 << 30, t = 0;
		for (auto u: adj1[p[i]])
			mn = min(mn, d[u]);
		for (auto u: adj1[p[i]])
			t += (d[u] == mn);
		ans1 += (t > 1 || d[p[i]] - 1 != d[p[i + 1]]);
		ans2 += (d[p[i]] - 1 != d[p[i + 1]]);
	}
	cout << ans2 << ' ' << ans1 << endl;
	return 0;
}
