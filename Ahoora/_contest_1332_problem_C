#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100;
int n, K, cnt[30];
char c[N];
bool vis[N];
vector<int> adj[N], vert;
 
void dfs(int root) {
	vert.push_back(root);
	vis[root] = true;
	for (auto u: adj[root])
		if (!vis[u])
			dfs(u);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n >> K;
		for (int i = 0; i < n; i++)
			cin >> c[i];
		for (int i = 0; i < n; i++)
			if ((n - i - 1) % K != i % K) 
				adj[i % K].push_back((n - i - 1) % K);
		int ans = 0;
		for (int i = 0; i < K; i++) 
			if (!vis[i]) {
				vert.clear();
				dfs(i);
				for (int j = 0; j < 26; j++)
					cnt[j] = 0;
				int sz = 0, mx = 0;
				for (auto x: vert)
					for (int j = x; j < n; j += K) {
						cnt[c[j] - 'a']++, sz++;
						mx = max(mx, cnt[c[j] - 'a']);
					}
				ans += sz - mx;
			}
		cout << ans << '\n';
		for (int i = 0; i < K; i++)
			vis[i] = false, adj[i].clear();
	}
	return 0;
}
