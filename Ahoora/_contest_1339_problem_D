#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, cnt[N][2], counter, deg[N];
vector<int> adj[N];
 
void dfs(int root, int par = -1) {
	int tedad = 0;
	for (auto u: adj[root])
		tedad += deg[u] == 1;
	counter += max(tedad - 1, 0);
	for (auto u: adj[root]) 
		if (u ^ par) {
			dfs(u, root);
			cnt[root][0] += cnt[u][1], cnt[root][1] += cnt[u][0];
		}
	cnt[root][0] += deg[root] == 1;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
		deg[v]++, deg[u]++;
	}
	int root = 0;
	for (int i = 1; i <= n; i++)
		if (deg[i] > deg[root])
			root = i;
	dfs(root);
	cout << (cnt[root][0] && cnt[root][1]? 3: 1) << ' ' << n - counter - 1 << '\n';
	return 0;
}
