#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 1000 + 10, M = 10000 + 10, G = 1000 + 10;
int n, m, d[N], g, r, dist[M][G];
bool vis[M][G];
 
void bfs() {
	deque<pair<int, int>> q;
	q.push_back({1, 0}), vis[1][0] = true, dist[1][0] = 0;
	while (q.size()) {
		pair<int, int> x = q.front();
		q.pop_front();
		for (int i = -1; i <= 1; i += 2)
			if (x.first + i >= 1 && x.first + i <= m) {
				int nxt = x.first + i, D = abs(d[x.first] - d[nxt]);
				if (x.second + D <= g && dist[nxt][x.second + D] > dist[x.first][x.second] + D) 
					vis[nxt][x.second + D] = true, dist[nxt][x.second + D] = dist[x.first][x.second] + D, q.push_front({nxt, D + x.second});
				if (D <= g && dist[x.first][x.second] + r + D < dist[nxt][D] && x.second == g)  
					vis[nxt][D] = true, dist[nxt][D] = dist[x.first][x.second] + r + D, q.push_back({nxt, D});
			}
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= m; i++)
		cin >> d[i];
	sort(d + 1, d + m + 1);
	cin >> g >> r;
	for (int i = 0; i < M; i++)
		for (int j = 0; j < G; j++)
			dist[i][j] = 1 << 30;
	bfs();
	bool res = false;
	for (int i = 0; i <= g; i++)
		res |= vis[m][i];
	if (!res)
		return cout << -1 << '\n', 0;
	cout << *min_element(dist[m], dist[m] + g + 1) << '\n';
	return 0;
}
