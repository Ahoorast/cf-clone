#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int mn[N], a[N], n, cnt[N], good[N], chand[N];
 
long long Pow(long long a, long long b) {
	return b? (b & 1? a: 1) * Pow(a * a, b >> 1): 1;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1; i < N; i++)
		good[i] = cnt[i] = 1 << 30;
	for (int i = 1; i <= n; i++) {
		int k = a[i];
		for (int j = 2; 1LL * j * j <= k; j++)
			if (k % j == 0) {
				chand[j]++;
				int t = 0;
				while (k % j == 0)
					k /= j, t++;
				if (cnt[j] > t)
					cnt[j] = t, mn[j] = i;
			}
		if (k > 1) 
			cnt[k] = 1, mn[k] = i, chand[k]++;
	}
	for (int i = 1; i <= n; i++) {
		int k = a[i];
		for (int j = 2; 1LL * j * j <= k; j++) 
			if (k % j == 0) {
				int t = 0;
				while (k % j == 0)
					k /= j, t++;
				if (mn[j] != i && good[j] > t)
					good[j] = t;
			}
		if (k > 1 && mn[k] != i)
			good[k] = 1;
	}
	long long res = 1;
	for (int i = 2; i < N; i++) 
		if (chand[i] >= n - 1) {
			if (chand[i] == n - 1 && cnt[i] != 1 << 30)
				res *= Pow(1LL * i, 1LL * cnt[i]);
			else if (chand[i] == n && good[i] != 1 << 30)
				res *= Pow(1LL * i, 1LL * good[i]);
		}
	cout << res << endl;
	return 0;
}
