#include<bits/stdc++.h>
using namespace std;
 
const int N = 5010;
int n, m, n1, n2, n3, cnt, ted[N][2], col[N], dp[N][N], comp, path[N][N], ans[N];
bool vis[N], tmp[N];
vector<int> adj[N];
queue<pair<int, int>> q;
vector<int> vec[N][2], nxt;
 
void bfs(int c) {
	vector<int> t;
	while (q.size()) {
		pair<int, int> x = q.front();
		q.pop();
		t.push_back(x.first);
		if (x.second)
			vec[c][cnt].push_back(x.first), ted[c][cnt]++, tmp[x.first] = true;
		for (auto u: adj[x.first])
			if (!vis[u]) {
				col[u] = c, vis[u] = true;
				q.push({u, !x.second});
			}
	}
	for (auto it: t)
		for (auto u: adj[it])
			if (tmp[u] == tmp[it]) 
				ted[c][cnt] = -1;
	for (auto it: t)
		vis[it] = false, tmp[it] = false;
}
 
void pp(int i, int j) {
	if (i <= 0)
		return;
	for (auto it: vec[nxt[i - 1]][path[i][j]])
		ans[it] = 2;
	pp(i - 1, j - ted[nxt[i - 1]][path[i][j]]);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> n1 >> n2 >> n3;
	for (int i = 0, v, u; i < m; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	for (int i = 1; i <= n; i++) 
		if (!col[i]) {
			nxt.push_back(i);
			comp++;
			cnt = 0;
			q.push({i, 1}), col[i] = i, vis[i] = true;
			bfs(i);
			cnt = 1;
			for (auto u: adj[i])
				q.push({u, 1}), vis[u] = true;
			bfs(i);
		}
	dp[0][0] = true;
	for (int i = 1; i <= comp; i++) {
		int x = nxt[i - 1];
		for (int j = 0; j <= n2; j++)
			for (int k = 0; k < 2; k++)
				if (ted[x][k] != -1 && j - ted[x][k] >= 0) {
					dp[i][j] |= dp[i - 1][j - ted[x][k]];
					if (dp[i - 1][j - ted[x][k]])
						path[i][j] = k;
				}
	}
	if (!dp[comp][n2])
		return cout << "NO\n", 0;
	cout << "YES\n";
	pp(comp, n2);
	for (int i = 1; i <= n; i++) {
		if (ans[i] == 0) 
			if (n1 > 0)
				ans[i] = 1, n1--;
			else
				ans[i] = 3;
		cout << ans[i];
	}
	cout << '\n';
	return 0;
}
