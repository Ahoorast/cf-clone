#include<bits/stdc++.h>
using namespace std;
 
const int N = 100;
char c[N][N];
int n, dx[2] = {0, -1}, dy[2] = {-1, 0};
bool vis[N][N];
 
bool vld(int x, int y) {
	return x >= 1 && x <= n && y >= 1 && y <= n && !vis[x][y] && (c[x][y] == '1');
}
 
void dfs(int x, int y) {
	vis[x][y] = true;
	for (int i = 0; i < 2; i++)
		if (vld(x + dx[i], y + dy[i]))
			dfs(x + dx[i], y + dy[i]);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n;
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= n; j++)
				cin >> c[i][j], vis[i][j] = false;
		for (int i = 1; i <= n; i++) {
			if (vld(i, n))
				dfs(i, n);
			if (vld(n, i))
				dfs(n, i);
		}
		bool res = true;
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= n; j++) 
				res &= c[i][j] == '0' || vis[i][j];
		cout << (res? "YES": "NO") << '\n';
	}
	return 0;
}
