#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int a[N], n, cnt[2][N];
bool b[N], c[N];
vector<int> adj[N];
long long ans;
 
void dfs(int root, int par = -1, int mn = 1 << 30) {
	mn = min(mn, a[root]);
	cnt[b[root] & 1][root] = (c[root] != b[root]);
	for (auto u: adj[root])
		if (u ^ par) {
			dfs(u, root, mn);
			for (int i = 0; i < 2; i++)
				cnt[i][root] += cnt[i][u];
		}
	int t = min(cnt[0][root], cnt[1][root]);
	ans += 2LL * t * mn;
	cnt[0][root] -= t, cnt[1][root] -= t;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i] >> b[i] >> c[i];
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(1);
	cout << (cnt[0][1] == cnt[1][1] && cnt[0][1] == 0? ans: -1) << '\n';
	return 0;
}
