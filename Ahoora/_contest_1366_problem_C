#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100, mod = 998244353;
int a[N], b[N], last[N], R[N], L[N], n, m;
 
int find(int x, int l = 1, int r = m) {
	int mid = l + r >> 1;
	if (b[mid] == x)
		return mid;
	if (l >= r)
		return 0;
	if (b[mid] > x)
		return find(x, l, mid - 1);
	else
		return find(x, mid + 1, r);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1; i <= m; i++)
		cin >> b[i];
	for (int i = 1; i <= n; i++) {
		int ind = find(a[i]);
		if (b[ind] == a[i])
			last[ind] = i;
	}
	if (!is_sorted(last + 1, last + m + 1))
		return cout << "0\n", 0;
	for (int i = 1; i <= m; i++)
		R[i] = last[i], L[i] = R[i - 1] + 1;
	R[m] = n;
	for (int i = 2; i <= m; i++) {
		multiset<int> s;
		for (int j = L[i]; j <= R[i]; j++)
			s.insert(a[j]);
		while (L[i] < R[i]) {
			auto it = s.begin();
			if (*s.begin() != b[i]) {
				L[i]++;
				R[i - 1]++;
				s.erase(s.find(a[L[i] - 1]));
			}
			else
				break;
		}
		if (*s.begin() != b[i])
			return cout << "0\n", 0;
	}
	for (int i = 1; i <= m; i++) {
		int mn = 1 << 30;
		for (int j = L[i]; j <= R[i]; j++)
			mn = min(mn, a[j]);
		if (mn != b[i])
			return cout << "0\n", 0;
	}
	int ans = 1;
	for (int i = 1; i < m; i++)
		ans = 1LL * ans * (last[i + 1] - R[i]) % mod;
	cout << ans << '\n';
	return 0;
}
