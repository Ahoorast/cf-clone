#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, C = 15;
int n, m, K, ans, deg[N], c[C];
vector<pair<int, int>> adj[N], adj1[N];
vector<int> vec[C], pos[C];
set<pair<int, int>> bad[C][C];
bool vis[N];
 
void bt(int i) {
	if (i > K) {
		ans++;
		return;
	}
	for (auto d: pos[i]) {
		bool go = true;
		for (auto it: bad[i][d])
			if (c[it.first] == it.second)
				go = false;
		if (go) {
			c[i] = d;
			bt(i + 1);
		}
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> K;
	for (int i = 0, v, u, w; i < m; i++) {
		cin >> v >> u >> w;
		adj[v].push_back({w, u});
		deg[v]++;
	}
	for (int i = 1; i <= n; i++)
		sort(adj[i].begin(), adj[i].end());
	for (int i = 1; i <= n; i++)
		for (int j = 0; j < deg[i]; j++)
			adj[i][j].first = j + 1;	
	for (int i = 1; i <= n; i++)
		for (int j = 0; j < deg[i]; j++)
			adj1[adj[i][j].second].push_back({deg[i], adj[i][j].first});
	for (int i = 1; i <= n; i++)
		vec[deg[i]].push_back(i);
	for (int d = 1; d <= K; d++) 
		for (int x = 1; x <= d; x++) {
			set<int> s;
			for (auto v: vec[d])
				s.insert(adj[v][x - 1].second);
			if ((int)(s.size()) == (int)(vec[d].size())) {
				pos[d].push_back(x);
				for (auto v: s) 
					for (auto u: adj1[v]) 
						if (u.first < d) 
							bad[d][x].insert({u.first, u.second}); // (c[u.first] != u.second)
			}
		}
	bt(1);
	cout << ans << '\n';
	return 0;
}
