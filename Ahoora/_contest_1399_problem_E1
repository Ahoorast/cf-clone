#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100;
vector<pair<long long, long long>> adj[N];
long long n, w[N], a[N], b[N], h[N], sz[N];
long long S, sum;
 
void dfs(int root, int par = 0) {
	h[root] = h[par] + 1;
	bool cld = false;
	for (auto u: adj[root]) 
		if (u.first ^ par) {
			cld = true;
			dfs(u.first, root);
			sz[root] += sz[u.first];
			sum += 1LL * sz[u.first] * u.second; 
		}
	sz[root] += (!cld);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n >> S;
		for (int i = 1; i <= n; i++)
			adj[i].clear(), h[i] = sz[i] = 0;
		for (int i = 1; i < n; i++) {
			cin >> a[i] >> b[i] >> w[i];
			adj[a[i]].push_back({b[i], w[i]});
			adj[b[i]].push_back({a[i], w[i]});
		}
		sum = 0;
		dfs(1);
		set<pair<long long, int>> s;
		for (int i = 1; i < n; i++) {
			int v = a[i], u = b[i];
			if (h[v] > h[u])
				swap(v, u);
			long long x = sz[u];
			long long d = (w[i] - w[i] / 2);
			d *= x;
			s.insert({d, i});
		}
		int ans = 0;
		while (sum > S) {
			pair<long long, int> d = *--s.end();
			s.erase(--s.end());
			sum -= d.first;
			ans++;
			w[d.second] /= 2;
			int i = d.second;
			int v = a[i], u = b[i];
			if (h[v] > h[u])
				swap(v, u);
			long long x = sz[u];
			long long D = (w[i] - w[i] / 2);
			D *= x;
			s.insert({D, d.second});
		}
		cout << ans << '\n';
	}
	return 0;
}
 
