#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 100;
string s;
int x, mark[N];
 
void solve() {
	int n = (int)(s.size());
	for (int i = 0; i < n + 10; i++)
		mark[i] = -1;
	for (int i = 0; i < n; i++) {
		if (s[i] == '1' && i - x < 0 && i + x >= n) {
			cout << "-1\n";
			return;
		}
		if (s[i] == '1') {
			if (i - x < 0)
				mark[i + x] = 1;
			if (i + x >= n)
				mark[i - x] = 1;
		}
	}
	for (int i = 0; i < n; i++)
		if (s[i] == '0') {
			if (i - x >= 0 && mark[i - x] == 1) {
				cout << "-1\n";
				return;
			}
			if (i + x < n && mark[i + x] == 1) {
				cout << "-1\n";
				return;
			}
			if (i + x < n)
				mark[i + x] = 0;
			if (i - x >= 0)
				mark[i - x] = 0;
		}
	for (int i = 0; i < n; i++)
		if (mark[i] == -1)
			mark[i] = 1;
	for (int i = 0; i < n; i++) {
		bool c1 = (i - x >= 0 && mark[i - x] == 1);
		bool c2 = (i + x < n && mark[i + x] == 1);
		if ((c1 | c2) != s[i] - '0') {
			cout << "-1\n";
			return;
		}
	}
	for (int i = 0; i < n; i++)
		cout << (mark[i] == -1? 1: mark[i]);
	cout << '\n';
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> s >> x;
		solve();
	}
	return 0;
}
