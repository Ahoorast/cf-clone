#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, mx[N], sz[N];
vector<int> adj[N];
 
void dfs(int root, int par = 0) {
	mx[root] = sz[root] = 0;
	for (auto u: adj[root])
		if (u ^ par) {
			dfs(u, root);
			sz[root] += sz[u];
			if (sz[mx[root]] < sz[u])
				mx[root] = u;
		}
	sz[root]++;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n;
		int x, y;
		for (int i = 1, v, u; i < n; i++) {
			cin >> v >> u;
			adj[v].push_back(u);
			adj[u].push_back(v);
			x = v, y = u;
		}
		dfs(1);
		int v = 1;
		while (sz[mx[v]] * 2 > n)
			v = mx[v];
		if (sz[mx[v]] == n / 2 && n % 2 == 0) {
			int u = v;
			int par = 0;
			while (true) {
				int nxt = -1;
				for (auto x: adj[u])
					if (x != mx[v] && x ^ par)
						nxt = x;
				if (nxt == -1)
					break;
				par = u;
				u = nxt;
			}
			cout << par << ' ' << u << '\n';
			cout << mx[v] << ' ' <<  u << '\n';
		}
		else 
			cout << x << ' ' << y << '\n' << x << ' ' << y << '\n';
		for (int i = 1; i <= n; i++)
			adj[i].clear();
	}
	return 0;
}
