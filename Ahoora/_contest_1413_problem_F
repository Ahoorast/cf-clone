#include<bits/stdc++.h>
using namespace std;
 
const int N = 5000 * 100 + 10;
const int INF = 1 << 29;
int n, h[N], m2[N], st[N], en[N], TM, from[N], to[N], we[N];
vector<pair<int, int>> adj[N];
vector<int> L;
 
void path(int v, int par = -1) {
	st[v] = TM++;
	L.push_back(v);
	for (auto u: adj[v])
		if (u.first != par) {
			h[u.first] = h[v] + 1;
			m2[u.first] = m2[v] + u.second;
			path(u.first, v);
			L.push_back(v);
		}
	en[v] = TM++;
}
 
struct Node {
	int dp[4][4][2], lazy;
	Node() {
		lazy = 0;
		for (int k = 0; k < 2; k++)
			for (int i = 0; i < 4; i++)
				for (int j = 0; j < 4; j++) {
					dp[i][j][k] = -INF;
					if (j <= i)
						dp[i][j][k] = 0;
				}
	}
	void init(int x, int pos) {
		for (int i = 0; i < 4; i++)
			for (int j = i + 1; j < 4; j++) {
				dp[i][j][pos] = x * (j - i);
				if (i <= 1 && j > 1)
					dp[i][j][pos] -= 3 * x;
				if (i == 1 && j == 2)
					dp[i][j][0] = dp[i][j][1] = -2 * x;
			}
	}
	Node operator + (Node R) {
		Node res;
		for (int t = 0; t < 2; t++)
			for (int i = 0; i < 4; i++)
				for (int j = i + 1; j < 4; j++)
					for (int k = i; k <= j; k++)
						res.dp[i][j][t] = max(res.dp[i][j][t], dp[i][k][t] + R.dp[k][j][t]);
		return res;
	}
	void add(int x) {
		lazy += x;
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++) 
				if (x & 1)
					swap(dp[i][j][0], dp[i][j][1]);
	}
} seg[2097160];
 
void shift(int id) {
	seg[id << 1].add(seg[id].lazy), seg[id << 1 | 1].add(seg[id].lazy);
	seg[id].lazy = 0;
}
 
void build(int l = 0, int r = 2 * n - 1, int id = 1) {
	if (l + 1 == r) {
		int v = L[l];
		seg[id].init(h[v], m2[v] & 1);
		return;
	}
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
	seg[id] = seg[id << 1] + seg[id << 1 | 1];
}
 
void upd(int s, int e, int l = 0, int r = 2 * n - 1, int id = 1) {
	if (s <= l && e >= r) {
		seg[id].add(1);
		return;
	}
	if (s >= r || e <= l)
		return;
	shift(id);
	int mid = l + r >> 1;
	upd(s, e, l, mid, id << 1), upd(s, e, mid, r, id << 1 | 1);
	seg[id] = seg[id << 1] + seg[id << 1 | 1];
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n;
	for (int i = 0, v, u, w; i + 1 < n; i++) {
		cin >> v >> u >> w;
		--v, --u;
		from[i] = v, to[i] = u, we[i] = w;
		adj[v].push_back({u, w});
		adj[u].push_back({v, w});
	}
	path(0);
	build();
	cin >> Q;
	while (Q--) {
		int id;
		cin >> id;
		--id;
		int v = from[id], u = to[id];
		if (st[v] < st[u])
			swap(v, u);
		upd(st[v], en[v]);
		cout << max(seg[1].dp[0][3][0], seg[1].dp[0][3][1]) << '\n';
	}
	return 0;
}
