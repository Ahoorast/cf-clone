#include<bits/stdc++.h>
using namespace std;
 
const int N = 5 * 1000 * 100 + 10;
int n, a[N], sz[N];
vector<int> vec[N];
 
struct Node {
	int mn, s, lazy;
	Node() {
		mn = s = lazy = 0;
	}
	void merge(Node L, Node R) {
		mn = min(L.mn, R.mn);
		s = 0;
		if (mn == L.mn)
			s += L.s;
		if (mn == R.mn)
			s += R.s;
	}
	void add(int x) {
		lazy += x;
		mn += x;
	}
} seg[N << 2];
 
void shift(int id) {
	seg[id << 1].add(seg[id].lazy), seg[id << 1 | 1].add(seg[id].lazy);
	seg[id].lazy = 0;
}
 
void build(int l = 0, int r = n, int id = 1) {
	seg[id].s = r - l;
	if (l + 1 == r)
		return;
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
}
 
void upd(int s, int e, int w, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r)  {
		seg[id].add(w);
		return;
	}
	if (s >= r || e <= l)
		return;
	shift(id);
	int mid = l + r >> 1;
	upd(s, e, w, l, mid, id << 1), upd(s, e, w, mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
void DO(int x, int w) {
	if (sz[x] == 0)
		return;
	if (sz[x] >= 4)
		upd(0, vec[x][sz[x] - 4] + 1, w);
	int l = 0;
	if (sz[x] >= 3)
		l = vec[x][sz[x] - 3] + 1;
	upd(l, vec[x].back() + 1, w);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	build();
	for (int i = 0; i < n; i++)
		cin >> a[i], a[i]--;
	long long ans = 0;
	for (int i = 0; i < n; i++) {
		DO(a[i], -1);
		vec[a[i]].push_back(i);
		sz[a[i]]++;
		DO(a[i], +1);
		if (seg[1].mn == 0)
			ans += seg[1].s - (n - i - 1);
	}
	cout << ans << '\n';
	return 0;
}
