#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
long long d[N];
int n, fx, fy, m, sx, sy;
vector<pair<int, int>> adj[N];
 
struct point {
	int x = 0, y = 0, id = 0;
} p[N];
 
void add_edge(int i, int j) {
	int w = min(abs(p[i].x - p[j].x), abs(p[i].y - p[j].y));
	int v = p[i].id, u = p[j].id;
	adj[v].push_back({u, w});
	adj[u].push_back({v, w});
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> sx >> sy >> fx >> fy;
	for (int i = 0; i < m; i++)
		cin >> p[i].x >> p[i].y, p[i].id = i;
	sort(p, p + m, [](point a, point b) {
			return a.x < b.x;
			});
	for (int i = 1; i < m; i++)
		add_edge(i, i - 1);
	sort(p, p + m, [](point a, point b) {
			return a.y < b.y;
			});
	for (int i = 1; i < m; i++) 
		add_edge(i, i - 1);
	set<pair<long long, int>> q;
	for (int i = 0; i < m; i++) {
		d[p[i].id] = min(abs(sx - p[i].x), abs(sy - p[i].y));
		q.insert({d[p[i].id], p[i].id});
	}
	while (q.size()) {
		auto x = *q.begin();
		q.erase(q.begin());
		for (auto u: adj[x.second])
			if (d[u.first] > u.second + d[x.second]) {
				q.erase({d[u.first], u.first});
				d[u.first] = u.second + d[x.second];
				q.insert({d[u.first], u.first});
			}
	}
	long long ans = abs(sx - fx) + abs(sy - fy);
	for (int i = 0; i < m; i++)
		ans = min(ans, d[p[i].id] + abs(fx - p[i].x) + abs(fy - p[i].y));
	cout << ans << '\n';
	return 0;
}
