#include<bits/stdc++.h>
using namespace std;
 
const int N = 510;
int n, x, a[N], dp[N][N][N];
 
void solve() {
	cin >> n >> x;
	vector<int> all;
	for (int i = 0; i < n; i++)
		cin >> a[i], all.push_back(a[i]);
	all.push_back(x);
	sort(all.begin(), all.end());
	for (int i = 0; i < n; i++)
		a[i] = lower_bound(all.begin(), all.end(), a[i]) - all.begin() + 1;
	x = lower_bound(all.begin(), all.end(), x) - all.begin() + 1;
	int sz = max((int)(all.size()), n);
	for (int i = 0; i <= sz + 2; i++)
		for (int j = 0; j <= sz + 2; j++)
			for (int k = 0; k <= sz + 2; k++)
				dp[i][j][k] = 1 << 29;
	for (int j = 0; j <= sz + 2; j++)
		for (int k = 0; k <= sz + 2; k++)
			dp[n][j][k] = 0;
	for (int i = n - 1; i >= 0; i--)
		for (int j = sz; j >= 0; j--)
			for (int k = 0; k <= sz; k++) {
				dp[i][j][k] = dp[i][j + 1][k];
				if (a[i] >= j)
					dp[i][j][k] = min(dp[i][j][k], dp[i + 1][a[i]][k]);
				if (a[i] > k && k >= j)
					dp[i][j][k] = min(dp[i][j][k], dp[i + 1][k][a[i]] + 1);
			}
	cout << (dp[0][0][x] < 1 << 29? dp[0][0][x]: -1) << '\n';
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) 
		solve();
	return 0;
}
