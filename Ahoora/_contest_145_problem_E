#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 1000 + 10;
int n;
bool lazy[N << 2];
char s[N];
 
struct node {
	int four, seven, des, inc;
	friend node operator + (node a, node b) {
		node res;
		res.four = a.four + b.four;
		res.seven = a.seven + b.seven;
		res.des = max(a.seven + b.des, a.des + b.four);
		res.inc = max(a.four + b.inc, a.inc + b.seven);
		return res;
	}
	void work() {
		swap(four, seven);
		swap(des, inc);
	}
} seg[N << 2];
 
void shift(int root) {
	lazy[root << 1] ^= lazy[root], lazy[root << 1 | 1] ^= lazy[root];
	if (lazy[root])
		seg[root << 1].work(), seg[root << 1 | 1].work();
	lazy[root] = false;
}
 
void upd(int l, int r, int lv = 1, int rv = n, int root = 1) {
	if (l <= lv && r >= rv) {
		lazy[root] ^= 1;
		seg[root].work();
		return;
	}
	if (l > rv || r < lv)
		return;
	int mid = (lv + rv) >> 1;
	shift(root);
	upd(l, r, lv, mid, root << 1);
	upd(l, r, mid + 1, rv, root << 1 | 1);
	seg[root] = seg[root << 1] + seg[root << 1 | 1];
}
 
void build(int l = 1, int r = n, int root = 1) {
	if (l == r) {
		if (s[l] == '4')
			seg[root].four = seg[root].inc = seg[root].des = 1;
		else
			seg[root].seven = seg[root].inc = seg[root].des = 1;
		return;
	}
	int mid = (l + r) >> 1;
	build(l, mid, root << 1);
	build(mid + 1, r, root << 1 | 1);
	seg[root] = seg[root << 1] + seg[root << 1 | 1];
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q;
	for (int i = 1; i <= n; i++)
		cin >> s[i];
	build();
	while (Q--) {
		string t; 
		cin >> t;
		if (t == "switch") {
			int l, r;
			cin >> l >> r;
			upd(l, r);
		}
		else
			cout << seg[1].inc << endl;
	}
	return 0;
}
