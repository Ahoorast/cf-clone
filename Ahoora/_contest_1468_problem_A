#include<bits/stdc++.h>
using namespace std;
 
// kar haye zesht
 
const int N = 5 * 1000 * 100 + 10;
int n, a[N], lft[N], seg[N << 5], size_of_seg, L[N << 5], R[N << 5], root[N];
 
int get_l(int i, int x) {
	return a[i] > x? i: get_l(lft[i], x);
}
 
int build(int l = 0, int r = n) {
	int id = size_of_seg++;
	seg[id] = 0;
	if (l + 1 == r)
		return id;
	int mid = l + r >> 1;
	L[id] = build(l, mid);
	R[id] = build(mid, r);
	return id;
}
 
int upd(int root, int p, int x, int l = 0, int r = n) {
	int id = size_of_seg++;
	if (l + 1 == r) {
		seg[id] = max(seg[root], x);
		return id;
	}
	L[id] = L[root], R[id] = R[root];
	int mid = l + r >> 1;
	if (p < mid)
		L[id] = upd(L[id], p, x, l, mid);
	else
		R[id] = upd(R[id], p, x, mid, r);
	seg[id] = max(seg[L[id]], seg[R[id]]);
	return id;
}
 
int get(int root, int s, int e, int l = 0, int r = n) {
	if (s <= l && e >= r)
		return seg[root];
	if (s >= r || e <= l)
		return 0;
	int mid = l + r >> 1;
	return max(get(L[root], s, e, l, mid), get(R[root], s, e, mid, r));
}
 
void solve() {
	cin >> n;
	for (int i = 1; i <= n; i++) {
		cin >> a[i];
		a[i]--;
	}
	a[0] = 1 << 30;
	for (int i = 1; i <= n; i++)
		lft[i] = get_l(i - 1, a[i]);
	root[0] = build(0, n);
	vector<int> dp(n + 1);
	for (int i = 1; i <= n; i++) {
		dp[i] = get(root[i - 1], 0, a[i] + 1) + 1;
		if (lft[i])
			dp[i] = max(dp[i], get(root[lft[i]], 0, a[i] + 1) + 2);
		root[i] = upd(root[i - 1], a[i], dp[i]);
	}
	cout << *max_element(dp.begin(), dp.end()) << '\n';
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) 
		solve();
	return 0;
}
