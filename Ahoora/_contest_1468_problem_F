#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
 
const int MAXN = 1e5 + 20, MAXM = 1e6 + 20, MOD = 1000 * 1000 * 1000 + 7;
const long long INF = 1e9 + 10;
map <pair <pair <int, int>, int>, int> cnt;
 
void solve() {
	int n;
	cin >> n;
	
	for (int i = 0; i < n; i++) {
		int x, y, u, v;
		cin >> x >> y >> u >> v;
		int dx = x - u;
		int dy = y - v;
 
		int g = __gcd(dx, dy);
		int bala = 0;
		int pain = 0;
		if (dy == 0) {
			bala = INF;
			pain = 0;
		}
		else {
			bala = dx / g;
			pain = dy / g;
		}
		
		pair <int, int> m = make_pair(bala, pain);
		if (x <= u && y <= v) 
			cnt[make_pair(m, 1)]++;
		else if (x >= u && y >= v) 
			cnt[make_pair(m, 2)]++;
		else if (x >= u && y <= v) 
			cnt[make_pair(m, 3)]++;		
		else 
			cnt[make_pair(m, 4)]++;
	}
	
	long long ans = 0;
	for (auto i: cnt) {
		pair <pair <int, int>, int> val = i.first;
		long long ted = i.second; 
		
		pair <int, int> m = make_pair(val.first.first, val.first.second);
		
		if (val.second == 1) 
			ans += ted * cnt[make_pair(m, 2)];
		else if (val.second == 2) 
			ans += ted * cnt[make_pair(m, 1)];
		else if (val.second == 3) 
			ans += ted * cnt[make_pair(m, 4)];
		else if (val.second == 4) 
			ans += ted * cnt[make_pair(m, 3)];
		
	}
	cnt.clear();
	cout << ans / 2 << endl;
}
 
int main() {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	int q = 1;
	cin >> q;
	
	while (q--) {
		solve();
	}
}
