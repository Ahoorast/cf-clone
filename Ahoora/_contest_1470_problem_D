#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 10;
int n, m;
bool vis[N], mark[N];
vector<int> adj[N];
 
void dfs(int v) {
	vis[v] = true;
	mark[v] = true;
	for (auto u: adj[v])
		mark[v] &= !mark[u];
	for (auto u: adj[v])
		if (!vis[u])
			dfs(u);
}
 
void wtf(int v) {
	vis[v] = true;
	for (auto u: adj[v])
		if (!vis[u])
			wtf(u);
}
 
void solve() {
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		vis[i] = mark[i] = false, adj[i].clear();
	for (int i = 0, v, u; i < m; i++) {
		cin >> v >> u;
		--v, --u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	wtf(0);
	for (int i = 0; i < n; i++)
		if (!vis[i]) {
			cout << "NO\n";
			return;
		}
	fill(vis, vis + n, false);
	dfs(0);
	vector<int> o;
	for (int i = 0; i < n; i++)
		if (mark[i])
			o.push_back(i + 1);
	cout << "YES\n";
	cout << (int)(o.size()) << '\n';
	for (auto v: o)
		cout << v << ' ';
	cout << '\n';
	for (int i = 0; i < n; i++)
		adj[i].clear(), vis[i] = mark[i] = false;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--)
		solve();
	return 0;
}
