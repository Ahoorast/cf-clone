#include<bits/stdc++.h>
using namespace std;
 
const int N = 10;
int n, m;
pair<int, int> dp[N][N];
char c[N][N];
 
int dis(int i, int j, int x, int y) {
	return abs(i - x) + abs(j - y);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> c[i][j];
	for (int i = n - 1; i >= 0; i--)
		for (int j = m - 1; j >= 0; j--) {
			dp[i][j] = {N, N};
			if (i != n - 1)
				dp[i][j] = dp[i + 1][j];
			if (j != m - 1 && dis(i, j, dp[i][j].first, dp[i][j].second) >= dis(i, j, dp[i][j + 1].first, dp[i][j + 1].second))
				dp[i][j] = dp[i][j + 1];
			if (i != n - 1 && c[i + 1][j] == '*')
				dp[i][j] = {i + 1, j};
			if (j != m - 1 && c[i][j + 1] == '*')
				dp[i][j] = {i, j + 1};
			if (i == n - 1 && j == m - 1)
				dp[i][j] = {i, j};
		}
	int ans = 0;
	int x = 0, y = 0;
	while (x != n - 1 || y != m - 1) {
		ans += (c[x][y] == '*');
		pair<int, int> tmp = dp[x][y];
		x = tmp.first, y = tmp.second;
	}
	ans += c[x][y] == '*';
	cout << ans << '\n';
	return 0;
}
