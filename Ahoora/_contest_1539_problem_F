#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
const int inf = 1 << 29;
int n, a[N], ans[N], L[N], R[N];
vector<int> p[N];
 
struct Node {
	int mx, lazy;
	Node() {
		mx = lazy = 0;
	}
	void merge(Node L, Node R) {
		mx = max(L.mx, R.mx);
	}
	void add(int x) {
		lazy += x, mx += x;
	}
} seg[N << 2];
 
void shift(int id) {
	seg[id << 1].add(seg[id].lazy), seg[id << 1 | 1].add(seg[id].lazy);
	seg[id].lazy = 0;
}
 
void upd(int s, int e, int w, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r) {
		seg[id].add(w);
		return;
	}
	if (s >= r || e <= l)
		return;
	shift(id);
	int mid = l + r >> 1;
	upd(s, e, w, l, mid, id << 1), upd(s, e, w, mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
int get(int s, int e, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r)
		return seg[id].mx;
	if (s >= r || e <= l)
		return -inf;
	shift(id);
	int mid = l + r >> 1;
	return max(get(s, e, l, mid, id << 1), get(s, e, mid, r, id << 1 | 1));
}
 
void clear() {
	for (int i = 0; i < N << 2; i++)
		seg[i] = Node();
}
 
void work(int f, int d, char dir) {
	clear();
	for (int i = 0; i < n; i++)
		for (auto x: p[i])
			upd(0, x + 1, f);
	for (int i = 0; i < n; i++) {
		if (dir == 'R')
			for (auto x: p[i])
				upd(0, x + 1, d);
		for (auto x: p[i]) {
			int mx = get(0, x);
			mx -= get(x, x + 1);
			L[x] = max(mx, 0);
		}
		if (dir == 'L')
			for (auto x: p[i])
				upd(0, x + 1, d);
	}
	clear();
	for (int i = 0; i < n; i++)
		for (auto x: p[i])
			upd(x, n, f);
	for (int i = 0; i < n; i++) {
		if (dir == 'R')
			for (auto x: p[i])
				upd(x, n, d);
		for (auto x: p[i]) {
			int mx = get(x + 1, n);
			mx -= get(x, x + 1);
			R[x] = max(mx, 0);
		}
		if (dir == 'L')
			for (auto x: p[i])
				upd(x, n, d);
	}
	//cout << '\n';
	for (int i = 0; i < n; i++) {
	//	cout << L[i] << ' ' << R[i] << '\n';
		int tot = L[i] + R[i];
		int mid = (tot + 2 + ((tot + 1) % 2 == 0)) / 2;
		if (dir == 'R') 
			ans[i] = max(ans[i], tot + 1 - mid);
		else
			ans[i] = max(ans[i], mid - 1);
	}
	//cout << '\n';
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		a[i]--;
		p[a[i]].push_back(i);
	}
	work(+1, -2, 'L');
	work(-1, +2, 'R');
	for (int i = 0; i < n; i++)
		cout << ans[i] << ' ';
	cout << '\n';
	return 0;
}
