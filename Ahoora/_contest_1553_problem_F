#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 10;
int n, a[N];
long long p[N];
 
struct BIT {
	long long fen[N];
	BIT() {
		fill(fen, fen + N, 0);
	}
	void upd(int x, long long w) {
		for (++x; x < N; x += x & -x)
			fen[x] += w;
	}
	long long get(int x) {
		long long res = 0;
		for (; x; x -= x & -x)
			res += fen[x];
		return res;
	}
	long long get(int l, int r) {
		return get(r) - get(l);
	}
} cnt, sum, b1, b2;
 
void upd(int l, int r, long long x) { 
	b1.upd(l, x);
	b1.upd(r, -x);
	b2.upd(l, +x * (l - 1));
	b2.upd(r, -x * (r - 1));
}
 
long long get(int i) {
	return b1.get(i + 1) * i - b2.get(i + 1);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%d", &a[i]);
	for (int i = 0; i < n; i++) {
		p[i] += get(a[i]);
		for (int l = 0; l < N; l += a[i]) {
			int r = min(l + a[i], N - 3);
			if (l < r)
				p[i] += sum.get(l, r) - cnt.get(l, r) * l;
			if (l + 1 < r) 
				upd(l + 1, r, +1);
			if (l)
				upd(l, l + 1, -a[i] + 1);
		}
		p[i] += p[i - 1];
		cnt.upd(a[i], +1);
		sum.upd(a[i], a[i]);
	}
	for (int i = 0; i < n; i++)
		printf("%lld ", p[i]);
	printf("\n");
	return 0;
}
