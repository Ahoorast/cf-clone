#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 10;
const int mod = 998244353;
int n, m, d[N], fact[N];
long long p[N];
 
int sum(int a, int b) {
	a += b;
	if (a < 0)
		a += mod;
	a %= mod;
	return a;
}
 
int mul(int a, int b) {
	return 1LL * a * b % mod;
}
 
int pow(int a, int b) {
	if (b == 0)
		return 1;
	if (a == 0)
		return 0;
	int res = pow(a, b >> 1);
	res = mul(res, res);
	if (b & 1)
		res = mul(res, a);
	return res;
}
 
int di(int a, int b) {
	return mul(a, pow(b, mod - 2));
}
 
int c(int r, int n) {
	if (r > n)
		return 0;
	return di(fact[n], mul(fact[r], fact[n - r]));
}
 
int main() {
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	fact[0] = 1;
	for (int i = 1; i < N; i++)
		fact[i] = mul(fact[i - 1], i);
	cin >> n >> m;
	long long s = 0;
	for (int i = 0; i < n; i++)
		cin >> d[i], s += d[i];
	set<long long> lol;
	lol.insert(0);
	for (int i = 1; i <= n; i++) {
		p[i] = p[i - 1] + d[i - 1];
		lol.insert(p[i]);
	}
	int pairs = 0;
	for (int i = 0; i <= n; i++) 
		if (s % 2 == 0 && (lol.count(s / 2 + p[i]) || lol.count(p[i] - s / 2)))
				pairs++;
	pairs /= 2;
	int ans = 0;
	for (int i = 0; i <= min(pairs, m); i++) {
		int res = c(i, pairs);
		res = mul(res, c(i, m));
		res = mul(res, fact[i]);
		int c = m - i;
		int x = n - pairs * 2;
		int y = (pairs - i);
		res = mul(res, pow(c, x));
		if (y > 0 && c < 2)
			continue;
		if (y > 0) {
			res = mul(res, mul(pow(c, y), pow(c - 1, y)));
		}
		ans = sum(ans, res);
	}
	cout << ans << '\n';
	return 0;
}
