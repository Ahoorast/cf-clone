use std::io::{BufWriter, stdin, stdout, Write};
 
#[derive(Default)]
struct Scanner {
    buffer: Vec<String>,
}
 
impl Scanner {
    fn next<T: std::str::FromStr>(&mut self) -> T {
        loop {
            if let Some(token) = self.buffer.pop() {
                return token.parse().ok().expect("Failed parse");
            }
            let mut input = String::new();
            stdin().read_line(&mut input).expect("Failed read");
            self.buffer = input.split_whitespace().rev().map(String::from).collect();
        }
    }
}
 
fn main() {
	let mut scan = Scanner::default();
	let out = &mut BufWriter::new(stdout());
	let tc = scan.next::<i32>();
	for _test in 0..tc {
		let n = scan.next::<i32>();
		for _i in 0..n {
			scan.next::<i32>();
		}
		writeln!(out, "{} {}", 1, n).ok();
	}
}
