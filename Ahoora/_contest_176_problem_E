#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, LG = 20;
int n, st[N], en[N], ver[N << 1], TM, h[N], par[N][LG];
long long ans, d[N];
set<int> s;
vector<pair<int, int>> adj[N];
 
void dfs(int v) {
	st[v] = ++TM;
	ver[st[v]] = v;
	for (int i = 1; i < LG; i++)
		par[v][i] = par[par[v][i - 1]][i - 1];
	for (auto u: adj[v])
		if (u.first != par[v][0]) {
			h[u.first] = h[v] + 1;
			d[u.first] = d[v] + u.second;
			par[u.first][0] = v;
			dfs(u.first);
		}
}
 
int lca(int v, int u) {
	if (h[v] < h[u])
		swap(v, u);
	for (int i = 0; i < LG; i++)
		if ((1 << i) & (h[v] - h[u]))
			v = par[v][i];
	if (v == u)
		return v;
	for (int i = LG - 1; i >= 0; i--)
		if (par[v][i] != par[u][i])
			v = par[v][i], u = par[u][i];
	return par[v][0];
}
 
long long get(int v, int u) {
	int w = lca(v, u);
	return d[v] + d[u] - 2LL * d[w];
}
 
long long upd(int v) {
	long long res = 0;
	if (s.empty())
		return res;
	auto it = s.upper_bound(st[v]);
	int l, r;
	if (it == s.end() || it == s.begin()) 
		l = *s.begin(), r = *--s.end();
	else
		r = *it, l = *--it;
	l = ver[l], r = ver[r];
	res -= get(l, r); 
	res += get(l, v) + get(r, v);
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1, v, u, w; i < n; i++) {
		cin >> v >> u >> w;
		adj[v].push_back({u, w});
		adj[u].push_back({v, w});
	}
	dfs(1);
	int Q;
	cin >> Q;
	while (Q--) {
		char c;
		int v;
		cin >> c;
		if (c == '+') {
			cin >> v;
			ans += upd(v);
			s.insert(st[v]);
		}
		else if (c == '-') {
			cin >> v;
			s.erase(st[v]);
			ans -= upd(v);
		}
		else if (c == '?')
			cout << ans / 2 << '\n';
	}
	return 0;
}
