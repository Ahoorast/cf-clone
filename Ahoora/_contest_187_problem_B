#include<bits/stdc++.h>
using namespace std;
 
const int N = 62;
int n, m, r;
long long d[N][N][N], dp[N][N][N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> r;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			for (int k = 0; k < N; k++)
				d[i][j][k] = dp[i][j][k] = 1LL << 60;
	for (int i = 1; i <= m; i++)
		for (int j = 1; j <= n; j++)
			for (int k = 1; k <= n; k++)
				cin >> d[i][j][k];
	for (int i = 1; i <= m; i++)
		for (int m = 1; m <= n; m++)
			for (int j = 1; j <= n; j++)
				for (int k = 1; k <= n; k++) 
					d[i][j][k] = min(d[i][j][k], d[i][j][m] + d[i][m][k]);
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++) {
			dp[i][j][1] = 1LL << 60;
			for (int who = 1; who <= m; who++)
				dp[i][j][1] = min(dp[i][j][1], d[who][i][j]);
		}
	for (int len = 2; len <= 60; len++)
		for (int m = 1; m <= n; m++)
			for (int i = 1; i <= n; i++)
				for (int j = 1; j <= n; j++)
					dp[i][j][len] = min({dp[i][j][len], dp[i][m][len - 1] + dp[m][j][1], dp[i][m][1] + dp[m][j][len - 1], dp[i][j][len - 1]});
	while (r--) {
		int s, t, k;
		cin >> s >> t >> k;
		k++;
		cout << dp[s][t][min(60, k)] << '\n';
	}
	return 0;
}
