#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, LG = 20;
int n, Par[N][LG], h[N], dp[N], K, cnt[N], c[N], ans[N];
vector<pair<int, int>> adj[N];
 
void dfs(int root, int par = 0) {
	Par[root][0] = par, h[root] = h[par] + 1;
	for (int j = 1; j < LG; j++) {
		if (Par[root][j - 1] > 0)
			Par[root][j] = Par[Par[root][j - 1]][j - 1];
		else
			Par[root][j] = 0;
	}
	for (auto u: adj[root])
		if (u.first ^ par)
			dfs(u.first, root);
}
 
int get(int v, int l) {
	for (int j = LG - 1; j >= 0; j--)
		if (l & (1 << j)) {
			cnt[v]++;
			v = Par[v][j];
			c[v]++;
		}
	return v;
}
 
int lca(int v, int u) {
	if (h[v] < h[u])
		swap(v, u);
	v = get(v, h[v] - h[u]);
	if (v == u)
		return v;
	for (int j = LG - 1; j >= 0; j--)
		if (Par[v][j] != Par[u][j]) {
			cnt[v]++, cnt[u]++;
			v = Par[v][j];
			u = Par[u][j];
			c[v]++, c[u]++;
		}
	cnt[v]++, cnt[u]++;
	v = Par[v][0], u = Par[u][0];
	c[v]++, c[u]++;
	return v;
}
 
void dfsAns(int root, int par = 0) {
	for (auto u: adj[root])
		if (u.first ^ par) {
			dfsAns(u.first, root);
			dp[root] += dp[u.first];
			ans[u.second] = dp[u.first];
		}
	dp[root] += cnt[root] - c[root];
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back({u, i});
		adj[u].push_back({v, i});
	}
	dfs(1);
	cin >> K;
	while (K--) {
		int a, b;
		cin >> a >> b;
		lca(a, b);
	}
	dfsAns(1);
	for (int i = 1; i < n; i++)
		cout << ans[i] << ' ';
	cout << '\n';
	return 0;
}
