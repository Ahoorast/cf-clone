#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, m, par[N], who[N];
long long d[N];
vector<pair<int, int>> adj[N];
 
void dij(vector<int> source) {
	fill(d, d + n + 1, 1LL << 60);
	set<pair<long long, int>> q;
	for (auto v: source)
		q.insert({0, v}), d[v] = 0, who[v] = v;
	while (q.size()) {
		auto it = *q.begin();
		q.erase(q.begin());
		int v = it.second;
		for (auto u: adj[v])
			if (d[u.first] > u.second + d[v]) {
				q.erase({d[u.first], u.first});
				who[u.first] = who[v];
				q.insert({d[u.first] = u.second + d[v], u.first});
			}
	}
}
 
struct edge {
	int v, u;
	long long w;
	edge(int x, int y, long long z) {
		v = x, u = y, w = z;
	}
	bool operator < (edge b) const {
		return w < b.w;
	}
};
 
int get_par(int v) {
	return par[v] == v? v: par[v] = get_par(par[v]);
}
 
bool Union(int v, int u) {
	v = get_par(v), u = get_par(u);
	if (v == u)
		return false;
	par[u] = v;
	return true;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1, v, u, w; i <= m; i++) {
		cin >> v >> u >> w;
		adj[v].push_back({u, w});
		adj[u].push_back({v, w});
	}
	vector<int> src;
	int k;
	cin >> k;
	for (int i = 0, v; i < k; i++) {
		cin >> v;
		src.push_back(v);
	}
	dij(src);
	vector<edge> E;
	for (int i = 1; i <= n; i++)
		for (auto u: adj[i])
			E.push_back(edge(who[i], who[u.first], u.second + d[i] + d[u.first]));
	sort(E.begin(), E.end());
	iota(par, par + n + 1, 0);
	long long ans = 0;
	for (auto e: E) 
		if (Union(e.v, e.u)) 
			ans += e.w;
	vector<int> vvv;
	vvv.push_back(1);
	dij(vvv);
	long long mn = 1LL << 60;
	for (auto v: src)
		mn = min(mn, d[v]);
	ans += mn;
	cout << ans << '\n';
	return 0;
}
