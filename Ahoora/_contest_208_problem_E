#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, LG = 20;
int n, r[N], p[N][LG], st[N], en[N], h[N], cnt;
vector<int> adj[N], vec[N];
 
void dfs(int root, int par = 0) {
	p[root][0] = par, h[root] = h[par] + 1;
	for (int j = 1; j < LG; j++) 
		p[root][j] = p[p[root][j - 1]][j - 1];
	st[root] = ++cnt, vec[h[root]].push_back(st[root] - 1);
	for (auto u: adj[root])
		if (u ^ par) 
			dfs(u, root);
	en[root] = cnt;
}
 
int get(int v, int l) {
	for (int j = 0; j < LG; j++)
		if (l & (1 << j)) 
			v = p[v][j];
	return v;
}
 
int ans(int v, int k) {
	int H = h[v] + k;
	int L = lower_bound(vec[H].begin(), vec[H].end(), st[v]) - vec[H].begin(), R = lower_bound(vec[H].begin(), vec[H].end(), en[v]) - vec[H].begin();
	return R - L;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++) {
		cin >> r[i];
		if (r[i])
			adj[r[i]].push_back(i), adj[i].push_back(r[i]);
	}
	for (int i = 1; i <= n; i++)
		if (!r[i])
			dfs(i);
	for (int i = 1; i <= n; i++)
		vec[i].push_back(1 << 30);
	int Q;
	cin >> Q;
	while (Q--) {
		int v, k;
		cin >> v >> k;
		v = get(v, k);
		cout << (v > 0? ans(v, k) - 1: 0) << ' ';
	}
	cout << '\n';
	return 0;
}
