#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, Z = 26;
int n;
string s;
 
struct SegmentTree {
	struct Node {
		int lazy = 0, sum = 0, l, r;
		void merge(Node L, Node R) {
			sum = L.sum + R.sum;
		}
		void init(char c, int x) {
			sum += s[x] == c;
			l = x, r = x + 1;
		}
		void add(int x) {
			if (x == -1) {
				sum = 0;
				lazy = -1;
			}
			if (x == 1) {
				sum = r - l;
				lazy = 1;
			}
		}
	} seg[N << 2];
	void build(char c, int l = 0, int r = n, int root = 1) {
		seg[root].l = l, seg[root].r = r;
		if (l + 1 == r) {
			seg[root].sum = (s[l] == c);
			return;
		}
		int mid = l + r >> 1;
		build(c, l, mid, root << 1), build(c, mid, r, root << 1 | 1);
		seg[root].merge(seg[root << 1], seg[root << 1 | 1]);
	}
	void push(int root) {
		seg[root << 1].add(seg[root].lazy), seg[root << 1 | 1].add(seg[root].lazy);
		seg[root].lazy = 0;
	}
	void clear(int s, int e, int l = 0, int r = n, int root = 1) {
		if (s <= l && e >= r) {
			seg[root].add(-1);
			return;
		}
		if (s >= r || e <= l)
			return;
		int mid = l + r >> 1;
		push(root);
		clear(s, e, l, mid, root << 1), clear(s, e, mid, r, root << 1 | 1);
		seg[root].merge(seg[root << 1], seg[root << 1 | 1]);
	}
	void upd(int s, int e, int l = 0, int r = n, int root = 1) {
		if (s <= l && e >= r) {
			seg[root].add(1);
			return;
		}
		if (s >= r || e <= l)
			return;
		push(root);
		int mid = l + r >> 1;
		upd(s, e, l, mid, root << 1), upd(s, e, mid, r, root << 1 | 1);
		seg[root].merge(seg[root << 1], seg[root << 1 | 1]);
	}
	void print(char c, int l = 0, int r = n, int root = 1) {
		if (l + 1 == r) {
			if (seg[root].sum)
				s[l] = c;
			return;
		}
		push(root);
		int mid = l + r >> 1;
		print(c, l, mid, root << 1), print(c, mid, r, root << 1 | 1);
	}
	int get(int s, int e, int l = 0, int r = n, int root = 1) {
		if (s <= l && e >= r) 
			return seg[root].sum;
		if (s >= r || e <= l)
			return 0;
		push(root);
		int mid = l + r >> 1;
		return get(s, e, l, mid, root << 1) + get(s, e, mid, r, root << 1 | 1);
	}
} T[Z];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int Q;
	cin >> n >> Q >> s;
	for (int i = 0; i < Z; i++)
		T[i].build(i + 'a');
	while (Q--) {
		int l, r;
		cin >> l >> r;
		int cnt = 0;
		--l;
		for (int i = 0; i < Z; i++)
			cnt += T[i].get(l, r) % 2;
		if (cnt <= 1) {
			int L = l, R = r;
			for (int i = 0; i < Z; i++) {
				int x = T[i].get(l, r);
				T[i].clear(l, r);
				if (x > 1) {
					T[i].upd(L, L + x / 2);
					T[i].upd(R - x / 2, R);
				}
				if (x & 1) 
					T[i].upd((L + R) / 2, (L + R) / 2 + 1);
				L += x / 2, R -= x / 2;
			}
		}
	}
	for (int i = 0; i < Z; i++)
		T[i].print(i + 'a');
	cout << s << '\n';
	return 0;
}
