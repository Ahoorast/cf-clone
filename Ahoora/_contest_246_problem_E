#include<bits/stdc++.h>
using namespace std;
 
const int N = 500 * 1000 + 10;
int n, sz[N], h[N], ans[N];
unordered_map<string, bool> cnt[N];
vector<int> adj[N];
vector<pair<int, int>> query[N];
string s[N];
 
int dfs_sz(int v) {
	for (auto u: adj[v]) {
		h[u] = h[v] + 1;
		sz[v] += dfs_sz(u);
	}
	return ++sz[v];
}
 
void add(int v, int w = 1, int bg = -1) {
	if (w == 1)
		cnt[h[v]][s[v]] = true;
	else
		cnt[h[v]].clear();
	for (auto u: adj[v])
		if (u ^ bg)
			add(u, w);
}
 
void dfs(int v, bool kp = false) {
	int bg = -1, mx = 0;
	for (auto u: adj[v])
		if (sz[u] > mx)
			bg = u, mx = sz[u];
	for (auto u: adj[v])
		if (u ^ bg)
			dfs(u);
	if (mx)
		dfs(bg, 1);
	add(v, +1, bg);
	for (auto x: query[v])
		ans[x.first] = (int)(cnt[x.second].size());
	if (!kp) 
		add(v, -1);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n;
	for (int i = 1, p; i <= n; i++) {
		cin >> s[i] >> p;
		adj[p].push_back(i);
	}
	cin >> Q;
	dfs_sz(0);
	for (int i = 0, v, k; i < Q; i++) {
		cin >> v >> k;
		query[v].push_back({i, k + h[v]});
	}
	dfs(0);
	for (int i = 0; i < Q; i++)
		cout << ans[i] << '\n';
	return 0;
}
