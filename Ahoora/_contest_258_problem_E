#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, m, st[N], en[N], TM, ans[N];
vector<int> adj[N], query[N];
 
struct Node {
	int mn = 0, s = 0, lazy = 0;
	Node(int x = 0, int y = 0, int z = 0) {
		mn = x, s = y, lazy = z;
	}
	void merge(Node L, Node R) {
		mn = min(L.mn, R.mn);
		s = 0;
		if (L.mn == mn)
			s += L.s;
		if (R.mn == mn)
			s += R.s;
	}
	void add(int x) {
		lazy += x;
		mn += x;
	}
} seg[N << 2];
 
void shift(int id) {
	seg[id << 1].add(seg[id].lazy), seg[id << 1 | 1].add(seg[id].lazy);
	seg[id].lazy = 0;
}
 
void build(int l = 0, int r = n, int id = 1) {
	seg[id].s = r - l;
	if (l + 1 == r)
		return;
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
}
 
Node get(int s, int e, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r)
		return seg[id];
	if (s >= r || e <= l)
		return Node(1 << 30, 0, 0);
	shift(id);
	int mid = l + r >> 1;
	Node res;
	res.merge(get(s, e, l, mid, id << 1), get(s, e, mid, r, id << 1 | 1));
	return res;
}
 
void upd(int s, int e, int w, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r) {
		seg[id].add(w);
		return;
	}
	if (s >= r || e <= l)
		return;
	shift(id);
	int mid = l + r >> 1;
	upd(s, e, w, l, mid, id << 1), upd(s, e, w, mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
void dfs(int v, int par = 0) {
	st[v] = TM++;
	for (auto u: adj[v])
		if (u != par)
			dfs(u, v);
	en[v] = TM;
}
 
void dfs_ans(int v, int par = 0) {
	ans[v] += ans[par];
	upd(st[v], st[v] + 1, 1);
	for (auto x: query[v]) {
		Node res = get(st[x], en[x]); 
		ans[v] += (res.mn == 0? res.s: 0);
		upd(st[x], en[x], 1);
	}
	for (auto u: adj[v])
		if (u != par)
			dfs_ans(u, v);
	for (auto x: query[v])
		upd(st[x], en[x], -1);
	upd(st[v], st[v] + 1, -1);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	for (int i = 1, a, b; i <= m; i++) {
		cin >> a >> b;
		query[a].push_back(b);
		query[b].push_back(a);
		query[a].push_back(a), query[b].push_back(b);
	}
	dfs(1);
	build();
	dfs_ans(1);
	for (int i = 1; i <= n; i++)
		cout << ans[i] << ' ';
	cout << '\n';
	return 0;
}
