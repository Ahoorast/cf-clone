#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, LG = 42;
int can[N * LG][2], trie[N * LG][2], n, size_of_trie;
long long a[N], suf[N], pref[N];
 
void upd(long long x, int w) {
	for (int i = LG - 1, j = 0; i >= 0; i--) {
		bool b = (1LL << i) & x;
		if (!can[j][b]) 
			trie[j][b] = ++size_of_trie;
		can[j][b] += w;
		j = trie[j][b];
	}
}
 
long long get(long long x) {
	long long res = 0;
	for (int i = LG - 1, j = 0; i >= 0; i--) {
		bool b = (1LL << i) & x;
		if (can[j][!b]) {
			res ^= 1LL << i;
			j = trie[j][!b];
		} else
			j = trie[j][b];
	}
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	pref[0] = a[0];
	for (int i = 1; i < n; i++)
		pref[i] = a[i] ^ pref[i - 1];
	suf[n - 1] = a[n - 1];
	for (int i = n - 2; i >= 0; i--)
		suf[i] = a[i] ^ suf[i + 1];
	upd(0, +1);
	for (int i = 0; i < n; i++)
		upd(suf[i], +1);
	long long ans = get(0);
	for (int i = 0; i < n; i++) {
		upd(suf[i], -1);
		ans = max(ans, get(pref[i]));
	}
	cout << ans << '\n';
	return 0;
}
