#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 100;
int a[N], b[N], n, seg[N << 2], t[N << 2];
 
void upd(int l, int r, int s, int tt, int root = 1, int lv = 1, int rv = n) {
	if (lv == l && rv == r) {
		seg[root] = s;
		t[root] = tt;
		return;
	}
	int mid = (lv + rv) >> 1;
	if (l <= mid)
		upd(l, min(mid, r), s, tt, root * 2, lv, mid);
	if (r > mid)
		upd(max(l, mid + 1), r, s + max(0, mid - l + 1), tt, root * 2 + 1, mid + 1, rv);
}
 
int query(int x, int l = 1, int r = n, int root = 1, int tt = 0, int ans = 1 << 30) {
	if (ans == 1 << 30)
		ans = b[x];
	if (seg[root] != 0 && t[root] > tt)
		tt = t[root], ans = a[seg[root] + x - l];
	if (l == r)
		return ans;
	int mid = (l + r) >> 1;
	if (x <= mid)
		return query(x, l, mid, root * 2, tt, ans);
	else
		return query(x, mid + 1, r, root * 2 + 1, tt, ans);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q, tm = 0;
	cin >> n >> Q;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1; i <= n; i++)
		cin >> b[i];
	while (Q--) {
		int t;
		cin >> t;
		if (t == 1) {
			int x, y, k;
			cin >> x >> y >> k;
			upd(y, y + k - 1, x, ++tm);
		}
		else {
			int x;
			cin >> x;
			cout << query(x) << endl;
		}
	}
	return 0;
}
