#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 100;
int n, m, d, p[N], D[N][2];
vector<int> adj[N];
bool vis[N], fucked[N];
 
void read() {
	cin >> n >> m >> d;
	for (int i = 1; i <= m; i++)
		cin >> p[i], fucked[p[i]] = true;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
}
 
void dfs(int root, int tp) {
	vis[root] = true;
	if (!tp) {
		for (auto u: adj[root])
			if (!vis[u]) {
				dfs(u, tp);
				D[root][0] = max(D[u][0] + 1, D[root][0]);
			}
	}
	else {
		vector<int> vec;
		for (auto u: adj[root])
			if (!vis[u])
				vec.push_back(D[u][0]);
		sort(vec.begin(), vec.end());
		int r = vec.size() - 1;
		for (auto u: adj[root])
			if (!vis[u]) {
				r = vec.size() - 1;
				if (vec[r] == D[u][0])
					r--;
				if (r >= 0)
					D[u][1] = max(D[u][1], vec[r] + 2);
				D[u][1] = max(D[u][1], D[root][1] + 1);
				if (fucked[root])
					D[u][1] = max(D[u][1], 1);
			}
		for (auto u: adj[root])
			if (!vis[u])
				dfs(u, tp);
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	read();
	for (int i = 1; i <= n; i++) {
		D[i][1] = -1 * (1 << 27);
		if (!fucked[i])
			D[i][0] = -1 * (1 << 27);
	}
	dfs(1, 0);
	memset(vis, false, sizeof(vis));
	dfs(1, 1);
	int ans = 0;
	for (int i = 1; i <= n; i++)
		if (max(D[i][0], D[i][1]) <= d)
			ans++;
	cout << ans << endl;
	return 0;
}
