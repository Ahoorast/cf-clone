#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, LG = 20, SQ = 320;
int n, par[N][LG], h[N], tp[N], vv[N], d[N];
vector<int> adj[N];
 
void dfs(int v) {
	for (int i = 1; i < LG; i++)
		par[v][i] = par[par[v][i - 1]][i - 1];
	for (auto u: adj[v])
		if (u != par[v][0]) {
			par[u][0] = v;
			h[u] = h[v] + 1;
			dfs(u);
		}
}
 
int lca(int v, int u) {
	if (h[v] < h[u])
		swap(v, u);
	for (int i = 0; i < LG; i++)
		if ((1 << i) & (h[v] - h[u]))
			v = par[v][i];
	if (v == u)
		return v;
	for (int i = LG - 1; i >= 0; i--)
		if (par[v][i] != par[u][i])
			v = par[v][i], u = par[u][i];
	return par[v][0];
}
 
int dis(int v, int u) {
	return h[v] + h[u] - 2 * h[lca(v, u)];
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		--v, --u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(0);
	for (int i = 0; i < Q; i++)
		cin >> tp[i] >> vv[i], vv[i]--;
	for (int i = 0; i < n; i++)
		d[i] = h[i];
	for (int box = 0; box < SQ; box++) {
		int l = box * SQ, r = min(l + SQ, Q);
		for (int i = l; i < r; i++)
			if (tp[i] == 2) {
				for (int j = l; j < i; j++)
					if (tp[j] == 1) 
						d[vv[i]] = min(d[vv[i]], dis(vv[i], vv[j]));
				cout << d[vv[i]] << '\n';
			}
		queue<int> q;
		vector<int> nd(n);
		fill(nd.begin(), nd.end(), 1 << 30);
		for (int i = l; i < r; i++)
			if (tp[i] == 1)
				q.push(vv[i]), nd[vv[i]] = 0;
		while (q.size()) {
			int v = q.front();
			q.pop();
			for (auto u: adj[v])
				if (nd[v] + 1 < nd[u])
					q.push(u), nd[u] = nd[v] + 1;
		}
		for (int i = 0; i < n; i++)
			d[i] = min(d[i], nd[i]);
	}
	return 0;
}
