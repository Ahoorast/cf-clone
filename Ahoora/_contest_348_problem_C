#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, SQ = 320;
int n, m, sz[N];
long long a[N], sum[N], lazy[N];
bool have[N];
vector<int> vec[N], heavy, esh[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> m >> Q;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 0, k; i < m; i++) {
		cin >> sz[i];
		vec[i].resize(sz[i]);
		for (auto &x: vec[i]) {
			cin >> x;
			--x;
			sum[i] += a[x];
		}
		if (sz[i] > SQ) 
			heavy.push_back(i);
	}
	for (auto i: heavy) {
		for (auto x: vec[i])
			have[x] = true;
		esh[i].resize(m);
		for (int j = 0; j < m; j++)
			for (auto x: vec[j])
				esh[i][j] += have[x];
		for (auto x: vec[i])
			have[x] = false;
	}
	while (Q--) {
		char c;
		int i;
		cin >> c >> i;
		--i;
		if (c == '+') {
			int x;
			cin >> x;
			if (sz[i] > SQ) 
				lazy[i] += x;
			else {
				for (auto j: vec[i])
					a[j] += x;
				for (auto j: heavy)
					sum[j] += 1LL * esh[j][i] * x;
			}
		} else {
			long long res = 0;
			if (sz[i] > SQ) 
				res = sum[i];
			else 
				for (auto x: vec[i])
					res += a[x];
			for (auto j: heavy)
				res += 1LL * esh[j][i] * lazy[j];
			cout << res << '\n';
		}
	}
	return 0;
}
