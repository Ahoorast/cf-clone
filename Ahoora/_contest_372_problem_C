#include<bits/stdc++.h>
using namespace std;
 
const int N = 15 * 10000 + 10, M = 310, LG = 20;
int n, m, d, a[M], b[M], t[M];
long long dp[2][N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> d;
	for (int i = 1; i <= m; i++)
		cin >> a[i] >> b[i] >> t[i];
	for (int i = m; i >= 1; i--) {
		int D = max(t[i + 1] - t[i], 0);
		deque<int> dq;
		int last = 0;
		bool t = i & 1;
		for (int j = 1; j <= n; j++) {
			dp[t][j] = -abs(a[i] - j) + b[i];
			int L = max(1LL, 1LL * j - 1LL * d * D), R = min(1LL * n, 1LL * j + 1LL * d * D);
			for (int k = last + 1; k <= R; k++) {
				while (!dq.empty() && dp[!t][k] >= dp[!t][dq.back()])
					dq.pop_back();
				dq.push_back(k);
			}
			while (dq.front() < L)
				dq.pop_front();
			last = R;
			dp[t][j] += dp[!t][dq.front()];
		}
	}
	cout << *max_element(dp[1] + 1, dp[1] + n + 1) << '\n';
	return 0;
}
