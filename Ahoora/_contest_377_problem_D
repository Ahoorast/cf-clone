#include<bits/stdc++.h>
using namespace std;
 
const int N = 3000 * 100 + 10;
int n;
vector<pair<int, int>> vec[N];
vector<int> rm[N];
 
struct Node {
	int lazy = 0, mx = 0, who = 0;
	void merge(Node L, Node R) {
		mx = max(L.mx, R.mx);
		if (L.mx == mx)
			who = L.who;
		if (R.mx == mx)
			who = R.who;
	}
	void add(int x) {
		lazy += x;
		mx += x;
	}
} seg[(N << 2) + 100];
 
void shift(int id) {
	seg[id << 1].add(seg[id].lazy), seg[id << 1 | 1].add(seg[id].lazy);
	seg[id].lazy = 0;
}
 
void build(int l = 0, int r = N, int id = 1) {
	seg[id].who = l;
	if (l + 1 == r)
		return;
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
}
 
void upd(int s, int e, int w = +1, int l = 0, int r = N, int id = 1) {
	if (s <= l && e >= r) {
		seg[id].add(w);
		return;
	}
	if (s >= r || e <= l)
		return;
	shift(id);
	int mid = l + r >> 1;
	upd(s, e, w, l, mid, id << 1), upd(s, e, w, mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
struct bad_struct {
	int l, v, r;
} a[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i].l >> a[i].v >> a[i].r;
	for (int i = 0; i < n; i++) {
		vec[a[i].l].push_back({a[i].v, a[i].r});
		rm[a[i].v].push_back(a[i].r);
	}
	build();
	int ans = 0, L = 0, R = 0;
	for (int i = 1; i < N; i++) {
		for (auto x: vec[i]) 
			upd(x.first, x.second + 1);
		if (seg[1].mx > ans) {
			ans = seg[1].mx;
			L = i, R = seg[1].who;
		}
		for (auto x: rm[i]) 
			upd(i, x + 1,  -1);
	}
	cout << ans << '\n';
	for (int i = 0; i < n; i++)
		if (L <= a[i].v && a[i].l <= L && a[i].r >= R && R >= a[i].v)
			cout << i + 1 << ' ';
	cout << '\n';
	return 0;
}
