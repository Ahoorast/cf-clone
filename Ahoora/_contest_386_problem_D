#include<bits/stdc++.h>
using namespace std;
 
const int N = 72;
int n, d[N * N * N], a, b, c, par[N * N * N];
pair<int, int> MOVE[N * N * N];
char C[N][N];
 
int Node(int a, int b, int c) {
	return n * n * a + n * b + c;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> a >> b >> c;
	--a, --b, --c;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			cin >> C[i][j];
	queue<int> q;
	fill(d, d + N * N * N, 1  << 30);
	fill(par, par + N * N * N, -1);
	fill(MOVE, MOVE + N * N * N, make_pair(-1, -1));
	int source[3] = {a, b, c};
	sort(source, source + 3);
	q.push(Node(source[0], source[1], source[2])), d[Node(source[0], source[1], source[2])] = 0;
	while (q.size()) {
		int f = q.front();
		q.pop();
		int x[3] = {0, 0, 0};
		int v = f;
		for (int i = 0; i < 3; i++) {
			x[i] = f % n;
			f /= n;
		}
		sort(x, x + 3);
		if (Node(x[0], x[1], x[2]) == Node(0, 1, 2)) {
			int v = Node(x[0], x[1], x[2]);
			cout << d[v] << '\n';
			vector<pair<int, int>> ans;
			while (par[v] != -1) {
				ans.push_back({MOVE[v].first, x[MOVE[v].second]});
				x[MOVE[v].second] = MOVE[v].first;
				sort(x, x + 3);
				v = par[v];
			}
			reverse(ans.begin(), ans.end());
			for (auto it: ans)
				cout << it.first + 1 << ' ' << it.second + 1 << '\n';
			return 0;
		}
		for (int i = 0; i < 3; i++) 
			for (int j = 0; j < 3; j++) 
				if (i != j) {
					int who = 0 ^ 1 ^ 2 ^ i ^ j;
					int nxt[3] = {0, 0, 0};
					char allow = C[x[i]][x[j]];
					for (int k = 0; k < n; k++) 
						if (C[x[who]][k] == allow && k != x[0] && k != x[1] && k != x[2]) {
							for (int t = 0; t < 3; t++)
								if (t == who)
									nxt[t] = k;
								else
									nxt[t] = x[t];
							sort(nxt, nxt + 3);
							int nv = Node(nxt[0], nxt[1], nxt[2]);
							if (d[v] + 1 < d[nv]) {
								d[nv] = d[v] + 1;
								par[nv] = v;
								int kio = 0;
								for (int i = 0; i < 3; i++)
									if (nxt[i] == k)
										kio = i;
								MOVE[nv] = {x[who], kio};
								q.push(nv);
							}
						}
				}
	}
	cout << "-1\n";
	return 0;
}
