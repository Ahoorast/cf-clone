#include<bits/stdc++.h>
using namespace std;
 
const long long N = 1000 * 1000 + 100, mod = 1LL * 1000 * 1000 * 1000 + 7;
long long n, a[N], fact[N], seg[N << 2], s[N], inv4;
 
long long Pow(long long a, long long b) {
	return b? (b & 1? a: 1) % mod * Pow(a * a % mod, b >> 1) % mod: 1;
}
 
void add(long long x, long long l = 1, long long r = n + 1, long long root = 1) {
	if (l + 1 == r) {
		seg[root]++;
		return;
	}
	long long mid = l + r >> 1;
	if (x < mid)
		add(x, l, mid, root << 1);
	else
		add(x, mid, r, root << 1 | 1);
	seg[root] = seg[root << 1] + seg[root << 1 | 1];
}
 
long long get(long long l, long long r, long long lx = 1, long long rx = n + 1, long long root = 1) {
	if (l <= lx && r >= rx)
		return seg[root];
	if (l >= rx || r <= lx)
		return 0;
	long long mid = lx + rx >> 1;
	return get(l, r, lx, mid, root << 1) + get(l, r, mid, rx, root << 1 | 1);
}
 
long long c(long long x) {
	return 1LL * x * (x - 1) / 2;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	inv4 = Pow(4, mod - 2);
	cin >> n;
	for (long long i = 1; i <= n; i++)
		cin >> a[i];
	fact[0] = 1;
	for (long long i = 1; i <= n + 10; i++)
		fact[i] = 1LL * fact[i - 1] * i % mod;
	for (long long i = 0; i <= n + 10; i++)
		s[i] = 1LL * i * (i - 1) % mod * fact[i] % mod * inv4 % mod;
	long long ans = 0, inv = 0;
	for (long long i = 1; i <= n; i++) {
		long long x = a[i] - 1 - get(1, a[i]);
		add(a[i]);
		(ans += 1LL * inv * fact[n - i] % mod * x % mod) %= mod;
		(ans += 1LL * s[n - i] * x % mod) %= mod;
		(ans += 1LL * c(x) % mod * fact[n - i] % mod) %= mod;
		(inv += x) %= mod;
	}
	(ans += inv) %= mod;
	cout << ans << '\n';
	return 0;
}
