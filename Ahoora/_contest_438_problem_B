#include<bits/stdc++.h>
using namespace std;
 
struct DSU {
	vector<int> par, size;
	int comp;
	DSU(const int &n) {
		comp = n;
		par.push_back(-1), size.push_back(-1);
		for (int i = 1; i <= n; i++)
			par.push_back(i), size.push_back(1);
	}
	int findRoot(int v) {
		return par[v] == par[par[v]]? par[v]: par[v] = findRoot(par[v]);
	}
	bool Union(int v, int u) {
		int pv = findRoot(v), pu = findRoot(u);
		if (pv == pu)
			return true;
		if (size[pv] > size[pu])
			swap(pv, pu);
		par[pv] = par[pu], size[pu] += size[pv], comp--;
		return false;
	}
	int sz(int v) {
		return size[findRoot(v)];
	}
	bool check(int v, int u) {
		return findRoot(v) == findRoot(u);
	}
};
 
const int N = 1000 * 100 + 100;
int n, m;
vector<int> adj[N];
pair<int, int> a[N];
bool vis[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		cin >> a[i].first, a[i].second = i;
	for (int i = 1, v, u; i <= m; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	sort(a + 1, a + n + 1);
	reverse(a + 1, a + n + 1);
	long long ans = 0;
	DSU G(n);
	for (int i = 1; i <= n; i++) {
		long long mul = 0;
		set<int> s;
		for (auto u: adj[a[i].second]) 
			if (vis[u] && s.find(G.findRoot(u)) == s.end()) {
				s.insert(G.findRoot(u));
				int t = G.sz(u);
				ans += (mul + 1) * t * a[i].first;
				mul += t;
			}
		for (auto u: adj[a[i].second])
			if (vis[u])
				G.Union(a[i].second, u);
		vis[a[i].second] = true;
	}
	ans <<= 1;
	long double res = (long double)(1. * ans / (1. * n * (n - 1)));
	cout << res << '\n';
	return 0;
}
