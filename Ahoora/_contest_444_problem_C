#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, SQ = 250;
int n;
long long sum[N], dd[N], lazy[N], ff[N], col[N], pref[N];
pair<long long, int> a[N];
 
void push(int box) {
	if (lazy[box] == -1) 
		return;
	int s = box * SQ, e = s + SQ;
	e = min(e, n);
	for (int i = s; i < e; i++) {
		col[a[i].second] += abs(ff[box] - a[i].first);
		col[a[i].second] += dd[box];
		a[i].first = lazy[box];
	}
	sort(a + s, a + e);
	pref[s] = a[s].first;
	for (int i = s + 1; i < e; i++)
		pref[i] = pref[i - 1] + a[i].first;
	lazy[box] = ff[box] = -1;
	dd[box] = 0;
}
 
void upd(int box, int x) {
	if (lazy[box] == -1) {
		int s = box * SQ, e = (box + 1) * SQ;
		int ind = upper_bound(a + s, a + e, make_pair(1LL * x, n)) - a;
		ind--;
		int ted = ind - s + 1;
		if (ted) 
			sum[box] += 1LL * ted * x - 1LL * pref[ind];
		int r = SQ - ted;
		sum[box] -= 1LL * r * x;
		sum[box] += (e - 1 >= ind? pref[e - 1] - (ind >= s? pref[ind]: 0): 0);
		ff[box] = x;
	} else {
		sum[box] += 1LL * abs(x - lazy[box]) * SQ;
		dd[box] += abs(lazy[box] - x);
	}
	lazy[box] = x;
}
 
void upd(int box, int l, int r, int x) {
	push(box);
	int s = box * SQ, e = (box + 1) * SQ;
	e = min(e, n);
	for (int i = s; i < e; i++)
		if (a[i].second >= l && a[i].second < r) {
			sum[box] += abs(a[i].first - x);
			col[a[i].second] += abs(a[i].first - x);
			a[i].first = x;
		}
	sort(a + s, a + e);
	pref[s] = a[s].first;
	for (int i = s + 1; i < e; i++)
		pref[i] = pref[i - 1] + a[i].first;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	scanf("%d%d", &n, &Q);
	for (int i = 0; i < N; i++)
		lazy[i] = ff[i] = -1;
	for (int i = 0; i < n; i++) 
		a[i] = {i + 1, i};
	for (int i = 0; i < n; i++) {
		pref[i] = a[i].first;
		if (i % SQ)
			pref[i] += pref[i - 1];
	}
	while (Q--) {
		int t, l, r;
		scanf("%d%d%d", &t, &l, &r);
		--l;
		if (t == 1) {
			int x;
			scanf("%d", &x);
			upd(l / SQ, l, r, x);
			if (l / SQ != r / SQ)
				upd(r / SQ, l, r, x);
			l /= SQ, r /= SQ, l++;
			for (int i = l; i < r; i++) 
				upd(i, x);
		} else {
			long long ans = 0;
			while (l < r) {
				if (l % SQ != 0 || l + SQ >= r) {
					push(l / SQ);
					ans += col[l];
					l++;
				} else {
					ans += sum[l / SQ];
					l += SQ;
				}
			}
			printf("%lld\n", ans);
		}
	}
	return 0;
}
