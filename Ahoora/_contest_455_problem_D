#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, SQ = 320;
int n, a[N], cnt[SQ][N];
deque<int> dq[N];
 
void DO(int x, int y) {
	int b1 = x / SQ, b2 = y / SQ;
	int fnd = dq[b2][y % SQ];
	cnt[b2][fnd]--;
	dq[b2].erase(dq[b2].begin() + (y % SQ));
	cnt[b1][fnd]++;
	dq[b1].insert(dq[b1].begin() + (x % SQ), fnd);
	for (int i = b1; i < b2; i++) {
		int x = dq[i].back();
		cnt[i][x]--, cnt[i + 1][x]++;
		dq[i].pop_back();
		dq[i + 1].push_front(x);
	}
}
 
int get(int l, int r, int k) {
	int res = 0;
	while (l < r) {
		if (l + SQ <= r && l % SQ == 0) {
			res += cnt[l / SQ][k];
			l += SQ;
		}
		else {
			res += (dq[l / SQ][l % SQ] == k);
			l++;
		}
	}
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 0; i < n; i++) {
		dq[i / SQ].push_back(a[i]);
		cnt[i / SQ][a[i]]++;
	}
	int Q;
	cin >> Q;
	int lastans = 0;
	while (Q--) {
		int t, l, r, k = 0;
		cin >> t >> l >> r;
		if (t == 2)
			cin >> k;
		l = (l + lastans - 1) % n + 1;
		r = (r + lastans - 1) % n + 1;
		if (l > r)
			swap(l, r);
		if (t == 2)
			k = (k + lastans - 1) % n + 1;
		--l;
		if (t == 1) 
			DO(l, r - 1);
		else
			cout << (lastans = get(l, r, k)) << '\n';
	}
	return 0;
}
