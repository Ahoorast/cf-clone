#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 10;
int vis[N], cnt, D[N], Sz[N], n, m;
vector<int> adj[N];
 
pair<int, int> dfs(int root, int par = -1) {
	pair<int, int> res = {0, 0};
	vis[root] = cnt;
	Sz[cnt]++;
	for (auto u: adj[root]) 
		if (u ^ par) {
			pair<int, int> t = dfs(u, root);
			res.first = max({t.first, res.second + t.second + 1, res.first});
			res.second = max(res.second, t.second + 1);
		}
	return res;
}
 
struct DSU {
	vector<int> par, size, d;
	int comp;
	DSU(const int &n) {
		comp = n;
		par.push_back(-1), size.push_back(-1), d.push_back(-1);
		for (int i = 1; i <= n; i++)
			par.push_back(vis[i]), size.push_back(Sz[vis[i]]), d.push_back(D[vis[i]]);
	}
	int findRoot(int v) {
		return par[v] == par[par[v]]? par[v]: par[v] = findRoot(par[v]);
	}
	bool Union(int v, int u) {
		int pv = findRoot(v), pu = findRoot(u);
		if (pv == pu)
			return true;
		if (size[pv] > size[pu])
			swap(pv, pu);
		par[pv] = par[pu], size[pu] += size[pv], comp--;
		d[pu] = max({d[pu], d[pv], (d[pv] + 1) / 2 + (d[pu] + 1) / 2 + 1});
		return false;
	}
	int sz(int v) {
		return size[findRoot(v)];
	}
	bool check(int v, int u) {
		return findRoot(v) == findRoot(u);
	}
	int diameter(int v) {
		return d[findRoot(v)];
	}
};
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> m >> Q;
	for (int i = 1, v, u; i <= m; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	for (int i = 1; i <= n; i++)
		if (!vis[i]) {
			cnt = i;
			D[cnt] = dfs(i).first;
		}
	DSU G(n);
	while (Q--) {
		int t, x, y;
		cin >> t >> x;
		if (t == 1) 
			cout << G.diameter(x) << '\n';
		else {
			cin >> y;
			G.Union(x, y);
		}
	}
	return 0;
}
