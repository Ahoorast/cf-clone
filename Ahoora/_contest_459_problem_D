#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 1000 + 10;
int n, a[N], pref[N], suf[N], cnt[N], tmp[N];
long long ans;
 
void solve(int l, int r) {
	if (l + 1 == r)
		return;
	int mid = l + r >> 1;
	solve(l, mid), solve(mid, r);
	int R = mid;
	for (int i = l; i < mid; i++) {
		while (R < r && suf[R] < pref[i])
			R++;
		ans += (R - mid);
	}
	vector<int> v;
	merge(pref + l, pref + mid, pref + mid, pref + r, tmp + l);
	for (int i = l; i < r; i++)
		pref[i] = tmp[i];
	merge(suf + l, suf + mid, suf + mid, suf + r, tmp + l);
	for (int i = l; i < r; i++)
		suf[i] = tmp[i];
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	vector<int> all;
	for (int i = 0; i < n; i++)
		cin >> a[i], all.push_back(a[i]);
	sort(all.begin(), all.end());
	all.resize(unique(all.begin(), all.end()) - all.begin());
	for (int i = 0; i < n; i++)
		a[i] = lower_bound(all.begin(), all.end(), a[i]) - all.begin();
	for (int i = 0; i < n; i++) 
		pref[i] = ++cnt[a[i]];
	for (int i = 0; i < n; i++)
		cnt[a[i]]--;
	for (int i = n - 1; i >= 0; i--)
		suf[i] = ++cnt[a[i]];
	solve(0, n);
	cout << ans << '\n';
	return 0;
}
