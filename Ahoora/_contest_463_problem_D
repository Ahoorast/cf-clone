#include<bits/stdc++.h>
using namespace std;
 
const int N = 1010;
int n, K, pos[N][N], a[N][N], dp[N];
vector<int> adj[N];
 
bool isPath(int v, int u) {
	for (int i = 1; i <= K; i++)
		if (pos[i][v] > pos[i][u])
			return false;
	return true;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> K;
	for (int i = 1; i <= K; i++)
		for (int j = 1; j <= n; j++)
			cin >> a[i][j], pos[i][a[i][j]] = j;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			if (i != j && isPath(i, j))
				adj[i].push_back(j);
	for (int i = 1; i <= n; i++)
		dp[i] = 1;
	for (int i = n - 1; i >= 1; i--)
		for (auto u: adj[a[1][i]])
			dp[i] = max(dp[i], dp[pos[1][u]] + 1);
	int ans = 0;
	for (int i = 1; i <= n; i++)
		ans = max(ans, dp[i]);
	cout << ans << endl;
	return 0;
}
