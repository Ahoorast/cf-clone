#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;	
int dp[N], L[N], R[N], n, d, path[N];
pair<long long, int> h[N], a[N];
pair<int, int> seg[N << 2];
 
void read() {
	cin >> n >> d;
	for (int i = 1; i <= n; i++)
		cin >> a[i].first, a[i].second = i, h[i].first = a[i].first;
	sort(a + 1, a + n + 1);
	for (int i = 1; i <= n; i++)
		h[a[i].second].second = i;
	set<pair<long long, int>> s;
	for (int i = 1; i <= n; i++)
		s.insert(h[i]);
//	for (int i = 1; i <= n; i++)
//		cout << h[i].second << ' ';
//	cout << endl;
	s.insert({-1 * 1LL << 55, 0});
	s.insert({1LL << 55, n + 1});
	for (int i = 1; i <= n; i++) {
		auto it = s.upper_bound({h[i].first - d, 1 << 30});
		L[i] = (*it).second;
		it = s.upper_bound({h[i].first + d, -1});
		while ((*it).first - h[i].first >= d)
			it--;
		R[i] = (*it).second;
	//	cout << L[i] << ' ' << R[i] << endl;
	}
}
 
void add(int p, int x, int lv = 1, int rv = n, int root = 1) {
	if (lv == rv) {
		if (seg[root].first < dp[x])
			seg[root].first = dp[x], seg[root].second = x;
		return;
	}
	int mid = (lv + rv) >> 1;
	if (p <= mid)
		add(p, x, lv, mid, root << 1);
	else
		add(p, x, mid + 1, rv, root << 1 | 1);
	seg[root].first = max(seg[root << 1].first, seg[root << 1 | 1].first);
	if (seg[root].first == seg[root << 1].first)
		seg[root].second = seg[root << 1].second;
	else
		seg[root].second = seg[root << 1 | 1].second;
}
 
pair<int, int> get(int l, int r, int lv = 1, int rv = n, int root = 1) {
	if (l > r)
		return {-1 << 30, -1};
	if (l <= lv && r >= rv) 
		return seg[root];
	if (l > rv || r < lv)
		return {-1 << 30, -1};
	int mid = (lv + rv) >> 1;
	pair<int, int> res = get(l, r, lv, mid, root << 1), t = get(l, r, mid + 1, rv, root << 1 | 1);
	if (res.first < t.first)
		res = t;
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	read();
	for (int i = n; i >= 1; i--) {
		pair<int, int> t = get(R[i] + 1, n);
		dp[i] = 1 + t.first, path[i] = t.second;
		t = get(1, L[i] - 1);
		if (t.first + 1 > dp[i])
			dp[i] = t.first + 1, path[i] = t.second;
		add(h[i].second, i);
	}
	int x = 0;
	for (int i = 1; i <= n; i++)
		if (dp[x] < dp[i])
			x = i;
	cout << dp[x] << endl;
	while (dp[x]--) {
		cout << x << ' ';
		x = path[x];
	}
	cout << endl;
	return 0;
}
