#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, M = 15, SQ = 320;
int n, m;
pair<int, int> dp[N][M];
bool vis[N][M], tem[N][M];
char c[N][M];
 
bool vld(int x, int y) {
	return x >= 1 && y >= 1 && x <= n && y <= m;
}
 
pair<int, int> get(int x, int y) {
	if (!vld(x, y))
		return {x, y};
	if (tem[x][y]) {
		tem[x][y] = true;
		return dp[x][y];
	}
	if (vis[x][y]) {
		tem[x][y] = true;
		return dp[x][y] = {-1, -1};
	}
	vis[x][y] = true;
	if (c[x][y] == '^') 
		dp[x][y] = (x % SQ == 0? make_pair(x - 1, y): get(x - 1, y));
	if (c[x][y] == '>')
		dp[x][y] = get(x, y + 1);
	if (c[x][y] == '<')
		dp[x][y] = get(x, y - 1);
	vis[x][y] = false, tem[x][y] = true;
	return dp[x][y];
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> m >> Q;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			cin >> c[i][j];
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			if (!tem[i][j])
				get(i, j);
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			tem[i][j] = false;
	while (Q--) {
		char tp;
		int x, y;
		cin >> tp >> x >> y;
		if (tp == 'C') {
			cin >> c[x][y];
			for (int i = max((x / SQ) * SQ, 1); i <= n && i < (x / SQ) * SQ + SQ; i++)
				for (int j = 1; j <= m; j++)
					if (!tem[i][j])
						get(i, j);
			for (int i = max((x / SQ) * SQ, 1); i <= n && i < (x / SQ) * SQ + SQ; i++)
				for (int j = 1; j <= m; j++)
					tem[i][j] = false;
		} else {
			while (vld(x, y)) {
				pair<int, int> res = dp[x][y];
				x = res.first, y = res.second;
			}
			cout << x << ' ' << y << '\n';
		}
	}
	return 0;
}
