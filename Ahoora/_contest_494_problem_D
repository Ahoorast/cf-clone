#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, mod = 1LL * 1000 * 1000 * 1000 + 7, LG = 20;
int n, sz[N], d[N], dd[N], updd[N], upd[N], par[N][LG], H[N], h[N];
vector<pair<int, int>> adj[N];
 
long long Pow(long long a, long long b) {
	return b? (b & 1? a: 1) % mod * Pow(a * a % mod, b >> 1) % mod: 1;
}
 
int mul(int x, int y) {
	return 1LL * x * y % mod;
}
 
int add(int x, int y) {
	return ((x + y) % mod + mod) % mod;
}
 
void dfs_down(int v) {
	for (int i = 1; i < LG; i++)
		par[v][i] = par[par[v][i - 1]][i - 1];
	for (auto u: adj[v])
		if (u.first != par[v][0]) {
			h[u.first] = add(h[v], 1);
			H[u.first] = add(H[v], u.second);
			par[u.first][0] = v;
			dfs_down(u.first);
			sz[v] = add(sz[v], sz[u.first]);
			d[v] = add(d[v], add(d[u.first], mul(u.second, sz[u.first])));
			dd[v] = add(dd[v], add(dd[u.first], add(mul(Pow(u.second, 2), sz[u.first]), mul(2, mul(u.second, d[u.first])))));
		}
	sz[v]++;
}
 
void dfs_up(int v) {
	for (auto u: adj[v])
		if (u.first != par[v][0]) {
			int restdd = add(dd[v], -add(dd[u.first], add(mul(Pow(u.second, 2), sz[u.first]), mul(2, mul(u.second, d[u.first])))));
			int restd = add(d[v], -add(d[u.first], mul(u.second, sz[u.first])));
			int restsz = add(sz[v], -sz[u.first]);
			updd[u.first] = add(updd[u.first], add(restdd, add(mul(Pow(u.second, 2), restsz), mul(2, mul(u.second, restd)))));
			upd[u.first] = add(upd[u.first], add(restd, mul(u.second, restsz)));
		}
	for (auto u: adj[v]) 
		if (u.first != par[v][0]) {
			int restdd = updd[v];
			int restd = upd[v];
			int restsz = add(n, -sz[v]);
			updd[u.first] = add(updd[u.first], add(restdd, add(mul(Pow(u.second, 2), restsz), mul(2, mul(u.second, restd)))));
			upd[u.first] = add(upd[u.first], add(restd, mul(u.second, restsz)));
		}
	for (auto u: adj[v])
		if (u.first != par[v][0]) 
			dfs_up(u.first);
}
 
int lca(int v, int u) {
	if (h[v] < h[u])
		swap(v, u);
	for (int i = 0; i < LG; i++)
		if ((1 << i) & (h[v] - h[u]))
			v = par[v][i];
	if (v == u)
		return v;
	for (int i = LG - 1; i >= 0; i--)
		if (par[v][i] != par[u][i])
			v = par[v][i], u = par[u][i];
	return par[v][0];
}
 
int dis(int v, int u) {
	return ((H[v] + H[u]) - 2 * H[lca(v, u)]) % mod;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1, v, u, w; i < n; i++) {
		cin >> v >> u >> w;
		--v, --u;
		adj[v].push_back({u, w});
		adj[u].push_back({v, w});
	}
	dfs_down(0);
	dfs_up(0);
	int Q;
	cin >> Q;
	while (Q--) {
		int u, v;
		cin >> u >> v;
		--v, --u;
		int w = lca(v, u);
		if (w != v) {
			int X = dd[v];
			int ds = dis(v, u);
			X = add(X, add(mul(Pow(ds, 2), sz[v]), mul(2, mul(ds, d[v]))));
			int kol = add(dd[u], updd[u]);
			int ans = add(mul(2, X), -kol);
			cout << ans << '\n';
		} else {
			int Y = updd[v];
			int ds = dis(v, u);
			Y = add(Y, add(mul(Pow(ds, 2), add(n, -sz[v])), mul(2, mul(ds, upd[v]))));
			int kol = add(dd[u], updd[u]);
			int ans = add(kol, -mul(2, Y));
			cout << ans << '\n';
		}
	}
	return 0;
}
