#include<bits/stdc++.h>
using namespace std;
 
const int mod = 1e9 + 7;
 
int add(int a, int b) {
	a += b;
	a += (a < 0) * mod - (a >= mod) * mod;
	return a;
}
 
int mul(int a, int b) {
	return 1LL * a * b % mod;
}
 
struct mat {
	int n, m;
	vector<vector<int>> a;
	mat(int x = 0, int y = 0) {
		n = x, m = y;
		a.resize(n, vector<int>(m, 0));
	}
	void identity() {
		assert(n == m);
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = i == j;
	}
	void clear() {
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = 0;
	}
	void resize(int x, int y) {
		n = x, m = y;
		a.resize(n, vector<int>(m, 0));
	}
	mat operator * (const mat &b) {
		assert(m == b.n);
		mat res(n, b.m);
		for (int i = 0; i < n; i++)
			for (int j = 0; j < b.m; j++)
				for (int k = 0; k < m; k++)
					res.a[i][j] = add(res.a[i][j], mul(a[i][k], b.a[k][j]));
		return res;
	}
	void operator *= (const mat &b) {
		*this = *this * b;
	}
	mat operator ^ (long long b) {
		mat res(n, m), add = *this;
		for (res.identity(); b; b >>= 1, add *= add)
			if (b & 1)
				res *= add;
		return res;
	}
	void operator ^= (long long b) {
		*this = *this ^ b;
	}
};
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	long long n, k;
	cin >> n >> k;
	mat cnt(1, k + 1);
	cnt.a[0][k] = 1;
	mat A[60][k];
	for (int i = 0; i < k; i++) {
		A[0][i].resize(k + 1, k + 1);
		A[0][i].identity();
		for (int j = 0; j <= k; j++)
			A[0][i].a[j][i] = 1;
	}
	/*for (int i = 0; i < n; i++) {
		int res = 0, tmp = i;
		while (i) {
			res += i % k;
			i /= k;
		}
		res %= k;
		i = tmp;
		cnt *= A[res];
	} */
	vector<int> vec;
	while (n) {
		vec.push_back(n % k);
		n /= k;
	}
	int x = 0, sz = (int)(vec.size());
	for (int i = 1; i < sz; i++) {
		mat pre[k];
		for (int i = 0; i < k; i++)
			pre[i].resize(k + 1, k + 1);
		pre[0] = A[i - 1][0];
		for (int j = 1; j < k; j++)
			pre[j] = pre[j - 1] * A[i - 1][j];
		mat suf[k];
		for (int i = 0; i < k; i++)
			suf[i].resize(k + 1, k + 1);
		suf[k - 1] = A[i - 1][k - 1];
		for (int j = k - 2; j >= 0; j--)
			suf[j] = A[i - 1][j] * suf[j + 1];
		for (int j = 0; j < k; j++) {
			A[i][j] = suf[j];
			if (j)
				A[i][j] *= pre[j - 1];
		}
	}
	for (int i = sz - 1; i >= 0; i--) 
		for (int j = 0; j < vec[i]; j++) {
			cnt *= A[i][x];
			(x += 1) %= k;
		}
	int ans = 0;
	for (int i = 0; i <= k; i++) 
		ans = add(ans, cnt.a[0][i]);
	cout << ans << '\n';
	return 0;
}
