#include<bits/stdc++.h>
using namespace std;
 
const int N = 310;
int a[N], vis[N], t = 1, n;
vector<int> adj[N];
vector<int> comp[2][N];
 
void dfs(int root) {
	comp[0][t].push_back(a[root]);
	comp[1][t].push_back(root);
	vis[root] = t;
	for (auto u: adj[root])
		if (!vis[u])
			dfs(u);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1; i <= n; i++) {
		string s;
		cin >> s;
		for (int j = 1; j <= n; j++) 
			if (s[j - 1] == '1') 
				adj[i].push_back(j);
	}
	for (int i = 1; i <= n; i++)
		if (!vis[i])
			dfs(i), t++;
	for (int i = 1; i < t; i++) {
		sort(comp[0][i].begin(), comp[0][i].end());
		sort(comp[1][i].begin(), comp[1][i].end());
		for (int j = 0; j < comp[0][i].size(); j++)
			a[comp[1][i][j]] = comp[0][i][j];
	}
	for (int i = 1; i <= n; i++)
		cout << a[i] << ' ';
	cout << endl;
	return 0;
}
