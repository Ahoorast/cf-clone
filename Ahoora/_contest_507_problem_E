#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, m, from[N], to[N], we[N], d[N], dis[N], par[N];
bool mark[N];
vector<int> adj[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1, v, u, w; i <= m; i++) {
		cin >> v >> u >> w;
		w ^= 1;
		from[i] = v, to[i] = u, we[i] = w;
		adj[v].push_back(i);
		adj[u].push_back(i);
	}
	queue<int> q;
	fill(d, d + N, 1 << 30);
	q.push(1), d[1] = 0;
	while (q.size()) {
		int v = q.front();
		q.pop();
		for (auto i: adj[v]) {
			int u = from[i] + to[i] - v;
			if (d[u] > d[v] + 1) {
				d[u] = d[v] + 1;
				q.push(u);
			}
		}
	}
	deque<int> dq;
	fill(dis, dis + N, 1 << 30);
	dq.push_back(1), dis[1] = 0;
	while (dq.size()) {
		int v = dq.front();
		dq.pop_front();
		for (auto i: adj[v]) {
			int u = from[i] + to[i] - v;
			int w = we[i];
			if (d[v] + 1 == d[u] && dis[u] > dis[v] + w) {
				dis[u] = dis[v] + w;
				par[u] = i;
				if (w)
					dq.push_back(u);
				else
					dq.push_front(u);
			}
		}
	}
	int s = n, ans = 0;
	vector<int> o;
	while (s != 1) {
		int x = par[s];
		int nxt = from[x] + to[x] - s;
		ans += (we[x] == 1);
		if (we[x] == 1)
			o.push_back(x);
		we[x] = 1;
		mark[x] = true;
		s = nxt;
	}
	for (int i = 1; i <= m; i++)
		if (!mark[i]) {
			ans += (we[i] == 0);
			if (we[i] == 0)
				o.push_back(i);
			we[i] = 0;
		}
	cout << ans << '\n';
	for (auto i: o)
		cout << from[i] << ' ' << to[i] << ' ' << we[i] << '\n';
	return 0;
}
