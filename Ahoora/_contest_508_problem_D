#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, P = 427;
int n, in_deg[N], out_deg[N];
vector<int> adj[N], L;
 
int get_hash(char a, char b) {
	return P * a + b;
}
 
void euler(int v) {
	while (adj[v].size()) {
		int u = adj[v].back();
		adj[v].pop_back();
		euler(u);
	}
	L.push_back(v);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		adj[get_hash(s[0], s[1])].push_back(get_hash(s[1], s[2]));	
		in_deg[get_hash(s[1], s[2])]++;
		out_deg[get_hash(s[0], s[1])]++;
	}
	int cnt = 0, mx1 = 0, mx2 = 0;
	for (int i = 0; i < N; i++) {
		if (in_deg[i] != out_deg[i])
			cnt++;
		if (in_deg[i] > out_deg[i])
			mx1 = max(mx1, in_deg[i] - out_deg[i]);
		else
			mx2 = max(mx2, out_deg[i] - in_deg[i]);
	}
	if (cnt > 2)
		return cout << "NO\n", 0;
	if (mx1 > 1 || mx2 > 1)
		return cout << "NO\n", 0;
	for (int i = 0; i < N; i++)
		if ((cnt == 0 || (in_deg[i] < out_deg[i])) && adj[i].size()) {
			euler(i);
			break;
		}
	for (int i = 0; i < N; i++)
		if (adj[i].size())
			return cout << "NO\n", 0;
	reverse(L.begin(), L.end());
	cout << "YES\n";
	string ans;
	ans += (char)(L[0] / P);
	ans += (char)(L[0] % P);
	int sz = (int)(L.size());
	for (int i = 1; i < sz; i++)
		ans += ((char)(L[i] % P));
	cout << ans << '\n';
	return 0;
}
