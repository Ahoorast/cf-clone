#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, LG = 20;
int n, h[N], p[N][LG], sz[N];
vector<int> adj[N];
 
void dfs(int root, int par = 0) {
	h[root] = h[par] + 1, p[root][0] = par;
	for (int j = 1; j < LG; j++)
		p[root][j] = p[p[root][j - 1]][j - 1];
	for (auto u: adj[root])
		if (u ^ par) {
			dfs(u, root);
			sz[root] += sz[u];
		}
	sz[root]++;
}
 
int get(int v, int l) {
	for (int i = 0; i < LG; i++)
		if ((1 << i) & l)
			v = p[v][i];
	return v;
}
 
int lca(int v, int u) {
	if (h[v] < h[u])
		swap(v, u);
	v = get(v, h[v] - h[u]);
	if (v == u)
		return v;
	for (int j = LG - 1; j >= 0; j--)
		if (p[v][j] != p[u][j])
			v = p[v][j], u = p[u][j];
	return p[v][0];
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	bool db = n == 15;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(1);
	int Q;
	cin >> Q;
	while (Q--) {
		int v, u;
		cin >> v >> u;
		int w = lca(v, u), d = h[v] - h[w] + h[u] - h[w];
		if (d & 1)
			cout << "0\n";
		else if (h[v] == h[u]) {
			int L = get(v, d / 2 - 1), R = get(u, d / 2 - 1);
			cout << n - sz[L] - sz[R] << '\n';
		} 
		else {
			if (h[u] < h[v])
				swap(v, u);
			int a = get(u, d / 2), b = get(u, d / 2 - 1);
			cout << sz[a] - sz[b] << '\n';
		}
	}
	return 0;
}
