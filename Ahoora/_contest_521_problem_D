#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 100;
int k, n, m, a[N], mx[N], who[N], tp[N];
vector<pair<int, int>> vec[N];
 
struct greed {
	long long num, den, id;
	greed(long long a = 0, long long b = 0, long long c = 0) {
		num = a, den = b, id = c;
		assert(den != 0);
		if (den < 0)
			den *= -1, num *= -1;
		long long g = __gcd(abs(num), den);
		num /= g, den /= g;
	}
	bool operator < (greed b) const {
		return (long double)(num) * (long double)(b.den) < (long double)(b.num) * (long double)(den);
	}
};
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> k >> n >> m;
	for (int i = 0; i < k; i++)
		cin >> a[i], mx[i] = a[i];
	vector<greed> gg;
	for (int i = 0, t, j, b; i < n; i++) {
		cin >> t >> j >> b;
		j--;
		if (t == 1 && b > mx[j]) 
			mx[j] = b, who[j] = i;
		else if (t == 2) 
			vec[j].push_back({b, i});
		else if (t == 3)
			gg.push_back(greed(b, 1, i));
		tp[i] = t;
	}
	for (int i = 0; i < k; i++) {
		if (mx[i]) 
			vec[i].push_back({mx[i] - a[i], who[i]});
		sort(vec[i].begin(), vec[i].end(), greater<pair<int, int>>());
		long long s = 0;
		for (auto x: vec[i]) {
			gg.push_back(greed(s + a[i] + x.first, s + a[i], x.second));
			s += x.first;
		}
	}
	sort(gg.begin(), gg.end());
	reverse(gg.begin(), gg.end());
	vector<int> o;
	int sz = (int)(gg.size());
	for (int i = 0; i < min(m, sz); i++)
		if (gg[i].num > gg[i].den)
			o.push_back(gg[i].id);
	sort(o.begin(), o.end(), [](int x, int y) {
			return tp[x] < tp[y];
			});
	cout << (int)(o.size()) << '\n';
	for (auto i: o)
		cout << i + 1 << ' ';
	cout << '\n';
	return 0;
}
