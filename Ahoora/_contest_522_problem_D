#include<bits/stdc++.h>
using namespace std;
 
const int N = 5 * 1000 * 100 + 10;
int n, a[N], nxt[N];
vector<pair<int, int>> seg[N << 2];
 
void build(int l = 0, int r = n, int root = 1) {
	if (l + 1 == r) {
		seg[root].push_back({nxt[l], nxt[l] - l});
		return;
	}
	int mid = l + r >> 1;
	build(l, mid, root << 1), build(mid, r, root << 1 | 1);
	for (int i = l; i < r; i++)
		seg[root].push_back({nxt[i], nxt[i] - i});
	sort(seg[root].begin(), seg[root].end());
	for (int i = l + 1; i < r; i++)
		seg[root][i - l].second = min(seg[root][i - l].second, seg[root][i - l - 1].second);
}
 
int get(int l, int r, int lx = 0, int rx = n, int root = 1) {
	if (l <= lx && r >= rx) {
		auto it = lower_bound(seg[root].begin(), seg[root].end(), make_pair(r, -n - 1));
		if (it == seg[root].begin()) 
			return n + 1;
		--it;
		return (*it).second;
	}
	if (l >= rx || r <= lx)
		return n + 1;
	int mid = lx + rx >> 1;
	return min(get(l, r, lx, mid, root << 1), get(l, r, mid, rx, root << 1 | 1));
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	map<int, int> NX;
	for (int i = n - 1; i >= 0; i--) {
		if (NX.count(a[i]))
			nxt[i] = NX[a[i]];
		else
			nxt[i] = n + 1;
		NX[a[i]] = i;
	}
	build();
	while (Q--) {
		int l, r;
		cin >> l >> r;
		l--;
		int res = get(l, r);
		cout << (res < n? res: -1) << '\n';
	}
	return 0;
}
