#include<bits/stdc++.h>
using namespace std;
 
const int N = 30;
long long n, k, s, a[N];
unordered_map<int, long long> cnt[N];
 
int Pow(int a, int b) {
	return b? (b & 1? a: 1) * Pow(a * a, b >> 1): 1;
}
 
int main() { 
	cin >> n >> k >> s;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	vector<long long> fact;
	fact.push_back(1);
	int sz = 1;
	while (sz <= 25 && fact.back() * sz <= s)
		fact.push_back(fact.back() * sz), sz++;
	sz--;
	int mid = n >> 1, r = n - mid;
	int lim = Pow(3, mid);
	for (int i = 0; i < lim; i++) {
		long long sum = 0;
		bool flag = true;
		int tmp = i, x = 0;
		for (int j = 0; j < mid && flag; j++) {
			int c = tmp % 3;
			if (c == 1) {
				if (a[j] > sz)
					flag = false;
				else if (sum + fact[a[j]] > s)
					flag = false;
				else 
					sum += fact[a[j]];
				x++;
			}
			else if (c == 2) {
				if (a[j] + sum > s)
					flag = false;
				sum += a[j];
			}
			tmp /= 3;
		}
		if (flag)
			cnt[x][sum]++;
	}
	long long ans = 0;
	lim = Pow(3, r);
	for (int i = 0; i < lim; i++) {
		long long sum = 0;
		bool flag = true;
		int tmp = i, x = 0;
		for (int j = 0; j < r && flag; j++) {
			int c = tmp % 3;
			if (c == 1) {
				int t = a[j + mid];
				if (t > sz)
					flag = false;
				else if (sum + fact[t] > s) 
					flag = false;
				else 
					sum += fact[t];
				x++;
			}
			else if (c == 2) {
				if (sum + a[j + mid] > s)
					flag = false;
				sum += a[j + mid];
			}
			tmp /= 3;
		}
		if (k - x >= 0 && flag && s - sum >= 0)
			for (int j = 0; j <= k - x; j++)
				ans += cnt[j][s - sum];
	}
	cout << ans << '\n';
	return 0;
}
