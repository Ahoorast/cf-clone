#include<bits/stdc++.h>
using namespace std;
 
const int N = 1010;
int n, col[N], comp[N], cnt, best[N], m, d[N];
vector<int> adj[N];
 
void dfs_check(int v, int c = 1) {
	col[v] = c;
	comp[v] = cnt;
	c++;
	if (c == 3)
		c = 1;
	for (auto u: adj[v])
		if (!col[u])
			dfs_check(u, c);	
		else if (col[u] == col[v]) {
			cout << "-1\n";
			exit(0);
		}
}
 
void bfs(int v) {
	fill(d, d + N, 1 << 30);
	queue<int> q;
	q.push(v), d[v] = 0;
	while (q.size()) {
		int v = q.front();
		q.pop();
		best[comp[v]] = max(best[comp[v]], d[v]);
		for (auto u: adj[v])
			if (d[v] + 1 < d[u]) {
				d[u] = d[v] + 1;
				q.push(u);
			}
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1, v, u; i <= m; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	} 
	for (int i = 1; i <= n; i++)
		if (!col[i]) {
			cnt++;
			dfs_check(i);
		}
	int ans = 0;
	for (int i = 1; i <= n; i++)
		bfs(i);
	for (int i = 1; i <= cnt; i++)
		ans += best[i];
	cout << ans << '\n';
	return 0;
}
