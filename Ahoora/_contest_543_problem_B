#include<bits/stdc++.h>
using namespace std;
 
const int N = 3010;
int n, m, d[N][N];
vector<int> adj[N];
 
void bfs(int root) {
	queue<int> q;
	q.push(root), d[root][root] = 0;
	while (q.size()) {
		int v = q.front();
		q.pop();
		for (auto u: adj[v])
			if (d[root][u] > d[root][v] + 1) {
				d[root][u] = d[root][v] + 1;
				q.push(u);
			}
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1, v, u; i <= m; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			d[i][j] = 1 << 30;
	for (int i = 1; i <= n; i++)
		bfs(i);
	int s1, t1, s2, t2, l1, l2;
	cin >> s1 >> t1 >> l1 >> s2 >> t2 >> l2;
	if (d[s1][t1] > l1 || d[s2][t2] > l2)
		return cout << "-1\n", 0;
	int ans = d[s1][t1] + d[s2][t2];
	for (int v = 1; v <= n; v++)
		for (int u = 1; u <= n; u++) {
			int d1 = min(d[s1][v] + d[u][t1], d[s1][u] + d[v][t1]) + d[u][v];
			int d2 = min(d[s2][v] + d[u][t2], d[s2][u] + d[u][t2]) + d[u][v];
			if (d1 <= l1 && d2 <= l2)
				ans = min(ans, d1 + d2 - d[u][v]);
		}
	cout << m - ans << '\n';
	return 0;
}
