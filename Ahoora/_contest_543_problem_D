#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, mod = 1LL * 1000 * 1000 * 1000 + 7;
long long n, dp[N][2], L[N], R[N];
vector<int> adj[N];
 
void dfsD(int root, int par = -1) {
	dp[root][0] = 1;
	for (auto u: adj[root])
		if (u ^ par) {
			dfsD(u, root);
			(dp[root][0] *= 1LL + dp[u][0]) %= mod;
		}
}
 
void dfsU(int root, int par = -1) {
	vector<int> vec;
	vec.push_back(1);
	for (auto u: adj[root])
		if (u ^ par) 
			vec.push_back(dp[u][0] + 1 % mod);
	int sz = vec.size();
	L[0] = 1;
	for (int i = 1; i < sz; i++)
		L[i] = L[i - 1] * vec[i] % mod;
	R[sz] = 1;
	for (int i = sz - 1; i >= 1; i--)
		R[i] = R[i + 1] * vec[i] % mod;
	int i = 1;
	for (auto u: adj[root]) 
		if (u ^ par) {
			dp[u][1] = 1LL + dp[root][1] * L[i - 1] % mod * R[i + 1] % mod;
			i++;
		}
	for (auto u: adj[root])
		if (u ^ par)
			dfsU(u, root);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 2, u; i <= n; i++) {
		cin >> u;
		adj[u].push_back(i), adj[i].push_back(u);
	}
	dfsD(1);
	dp[1][1] = 1;
	dfsU(1);
	for (int i = 1; i <= n; i++)
		cout << dp[i][0] * dp[i][1] % mod << ' ';
	cout << endl;
	return 0;
}
