#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 10, M = 1000 * 1000 + 10;
int n, k, a[N], mx[N], s[N], cnt[M];
long long ans;
 
void solve(int l, int r) {
	if (r - l <= 2) {
		if (r - l == 1)
			return;
		ans += (((a[l] + a[l + 1] - max(a[l], a[l + 1])) % k) == 0);
		return;
	}
	int mid = l + r >> 1;
	solve(l, mid), solve(mid, r);
	for (int i = mid; i < r; i++) {
		mx[i] = (i == mid? a[i]: max(mx[i - 1], a[i]));
		s[i] = (i == mid? a[i]: s[i - 1] + a[i]);
		s[i] %= k;
	}
	for (int i = mid - 1; i >= l; i--) {
		mx[i] = (i == mid - 1? a[i]: max(mx[i + 1], a[i]));
		s[i] = (i == mid - 1? a[i]: s[i + 1] + a[i]);
		s[i] %= k;
	}
	for (int i = l; i < mid; i++)
		cnt[s[i]]++;
	int L = l;
	for (int i = r - 1; i >= mid; i--) {
		while (L < mid && mx[L] >= mx[i]) {
			cnt[s[L]]--;
			L++;
		}
		if (L != mid)
			ans += cnt[((k - (((s[i] - mx[i]) % k + k) % k)) % k + k) % k];
	}
	for (int i = l; i < mid; i++)
		cnt[s[i]] = 0;
	L = r - 1;
	for (int i = mid; i < r; i++)
		cnt[s[i]]++;
	for (int i = l; i < mid; i++) {
		while (L >= mid && mx[L] > mx[i]) {
			cnt[s[L]]--;
			L--;
		}
		if (L >= mid)
			ans += cnt[((k - (((s[i] - mx[i]) % k + k) % k)) % k + k) % k];
	}
	for (int i = mid; i < r; i++)
		cnt[s[i]] = 0;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> k;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	solve(0, n);
	cout << ans << '\n';
	return 0;
}
