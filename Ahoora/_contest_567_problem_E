#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, mod = 1LL * 1000 * 1000 * 1000 + 19;
int n, m, s, t, a[N], b[N], we[N], cnt[2][N];
vector<pair<int, int>> adj[2][N];
long long d[2][N];
 
void dij(int root, int tp) {
	set<pair<long long, int>> q;
	for (int i = 1; i <= n; i++)
		d[tp][i] = 1LL << 60;
	q.insert({d[tp][root] = 0, root});
	cnt[tp][root] = 1;
	while (q.size()) {
		auto it = *q.begin();
		q.erase(q.begin());
		int v = it.second;
		long long w = it.first;
		for (auto u: adj[tp][v])
			if (w + u.second < d[tp][u.first]) {
				cnt[tp][u.first] = 0;
				(cnt[tp][u.first] += cnt[tp][v]) %= mod;
				q.erase({d[tp][u.first], u.first});
				q.insert({d[tp][u.first] = w + u.second, u.first});
			} else if (w + u.second == d[tp][u.first]) 
				(cnt[tp][u.first] += cnt[tp][v]) %= mod;
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> s >> t;
	for (int i = 1, v, u, l; i <= m; i++) {
		cin >> v >> u >> l;
		a[i] = v, b[i] = u, we[i] = l;
		adj[0][v].push_back({u, l});
		adj[1][u].push_back({v, l});
	}
	dij(s, 0), dij(t, 1);
	for (int i = 1; i <= m; i++) {
		long long dis = d[0][a[i]] + d[1][b[i]] + we[i];
		if (dis == d[0][t] && 1LL * cnt[0][a[i]] * cnt[1][b[i]] % mod == cnt[0][t])
			cout << "YES\n";
		else if (dis - we[i] + 1 < d[0][t])
			cout << "CAN " << dis - d[0][t] + 1 << '\n';
		else
			cout << "NO\n";
	}
	return 0;
}
