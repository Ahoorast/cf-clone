#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, a[N], k;
unsigned long long dp[N][11], seg[N << 2][11];
 
void add(unsigned long long v, int p, int t, int lv = 1, int rv = n, int root = 1) {
	if (lv == rv) {
		seg[root][t] += v;
		return;
	}
	int mid = (lv + rv) >> 1;
	if (p <= mid)
		add(v, p, t, lv, mid, root << 1);
	else
		add(v, p, t, mid + 1, rv, root << 1 | 1);
	seg[root][t] = seg[root << 1][t] + seg[root << 1 | 1][t];
}
 
unsigned long long get(int l, int r, int t, int lv = 1, int rv = n, int root = 1) {
	if (l <= lv && r >= rv) 
		return seg[root][t];
	if (l > rv || r < lv)
		return 0ull;
	int mid = (lv + rv) >> 1;
	return get(l, r, t, lv, mid, root << 1) + get(l, r, t, mid + 1, rv, root << 1 | 1);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> k;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	k++;
	for (int i = n; i >= 1; i--) {
		dp[a[i]][1] = 1;
		for (int j = 2; j <= k; j++) 
			dp[a[i]][j] += get(a[i] + 1, n, j - 1);
		for (int j = 1; j <= k; j++)
			add(dp[a[i]][j], a[i], j);
	}
	cout << get(1, n, k) << endl;
	return 0;
}
