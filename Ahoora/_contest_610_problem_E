#include<bits/stdc++.h>
using namespace std;
 
const int N = 2000 * 100 + 10, Z = 12;
int n, k; 
string s;
 
struct Node {
	int cnt[Z][Z], first, last, len, lazy = -1;
	Node() {
		for (int i = 0; i < Z; i++)
			for (int j = 0; j < Z; j++)
				cnt[i][j] = 0;
		first = last = len = 0;
		lazy = -1;
	}
	void merge(Node L, Node R) {
		for (int i = 0; i < k; i++)
			for (int j = 0; j < k; j++)
				cnt[i][j] = L.cnt[i][j] + R.cnt[i][j];
		cnt[L.last][R.first]++;
		first = L.first, last = R.last;
	}
	void add(int x) {
		if (x == -1)
			return;
		first = last = lazy = x;
		for (int i = 0; i < k; i++)
			for (int j = 0; j < k; j++)
				cnt[i][j] = 0;
		cnt[x][x] = len - 1;
	}
} seg[N << 2];
 
void build(int l = 0, int r = n, int id = 1) {
	seg[id].len = r - l;
	if (l + 1 == r) {
		seg[id].add(s[l] - 'a');
		return;
	}
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
void shift(int id) {
	seg[id << 1].add(seg[id].lazy), seg[id << 1 | 1].add(seg[id].lazy);
	seg[id].lazy = -1;
}
 
void upd(int s, int e, int x, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r) {
		seg[id].add(x);
		return;
	}
	if (s >= r || e <= l)
		return;
	shift(id);
	int mid = l + r >> 1;
	upd(s, e, x, l, mid, id << 1), upd(s, e, x, mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q >> k >> s;
	build();
	while (Q--) {
		int tp;
		cin >> tp;
		if (tp == 2) {
			cin >> s;
			int ans = n;
			for (int i = 0; i < k; i++) 
				for (int j = i + 1; j < k; j++)
					ans -= seg[1].cnt[s[i] - 'a'][s[j] - 'a'];
			cout << ans << '\n';
		} else {
			int l, r;
			char c;
			cin >> l >> r >> c;
			upd(--l, r, c - 'a');
		}
	}
	return 0;
}
