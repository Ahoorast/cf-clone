#include<bits/stdc++.h>
using namespace std;
 
const int N = 3010;
int n, m, L[N][N], R[N][N], x[N][N];
long long ans;
char c[N][N];
 
struct BIT {
	int fen[N][N], all[N];
	vector<pair<int, int>> LOG;
	BIT() {
		LOG.clear();
		for (int i = 0; i < N; i++) {
			all[i] = 0;
			fill(fen[i], fen[i] + N, 0);
		}
	}
	inline void UPD(int id, int x) {
		all[id]++;
		for (++x; x < N; x += x & -x)
			fen[id][x]++, LOG.push_back({id, x});
	}
	inline int GET(int id, int x) {
		int res = 0;
		for (; x; x -= x & -x)
			res += fen[id][x];
		res = all[id] - res;
		return res;
	}
	inline void upd(int x, int y) {
		for (++x; x < N; x += x & -x) 
			UPD(x, y); // too fen[x] bia y roo insert kon
	}
	inline int get(int x, int y) {
		int res = 0;
		for (++x; x; x -= x & -x) 
			res += GET(x, y); // too fen[i] chand nafar bishtar mosavie y an 
		return res;
	}
	inline void clear() {
		for (auto it: LOG)
			fen[it.first][it.second] = all[it.first] = 0;
		LOG.clear();
	}
} fen;
 
void solve(int s) {
	for (int i = n - 1; i >= 0; i--) {
		int j = s - i;
		if (j < 0 || j >= m)
			continue;
		if (c[i][j] != 'z')
			continue;
		int mn = min(L[i][j], x[i][j]);
		fen.upd(i, j + R[i][j] - 1); // too index i benevis j + R[i][j] - 1
		ans += fen.get(i + mn - 1, j); // too  index haye kamtar mosavi i + x chand nafar bishtar mosavie j an
	}
	fen.clear();
}
 
inline int inp() { 
	char c = '0';
	int res = 0;
	while (c >= '0' && c <= '9') {
		((res *= 10) += c - '0');
		c = getchar();
	}
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	n = inp(), m = inp();
	for (int i = 0; i < n; i++, getchar())
		for (int j = 0; j < m; j++) {
			c[i][j] = getchar();
			if (c[i][j] == 'z')
				L[i][j] = L[i][j - 1] + 1;
			else
				L[i][j] = 0;
		}
	for (int i = n - 1; i >= 0; i--)
		for (int j = m - 1; j >= 0; j--) {
			if (c[i][j] == 'z') {
				R[i][j] = R[i][j + 1] + 1;
				x[i][j] = x[i + 1][j - 1] + 1;
			}
			else 
				R[i][j] = x[i][j] = 0;
		}
	for (int i = 0; i <= n - 1 + m - 1; i++)
		solve(i);
	printf("%lld\n", ans);
	return 0;
}
