#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, m, from[N], to[N], deg[N];
vector<int> adj[N];
 
bool check(int x) {
	for (int i = 0; i < n; i++) 
		deg[i] = 0, adj[i].clear();
	for (int i = 0; i < x; i++) {
		adj[from[i]].push_back(to[i]);
		deg[to[i]]++;
	}
	queue<int> q;
	for (int i = 0; i < n; i++)
		if (deg[i] == 0)
			q.push(i);
	if ((int)(q.size()) > 1) 
		return false;
	while (q.size()) {
		int v = q.front(), cnt = 0;
		q.pop();
		for (auto u: adj[v]) {
			deg[u]--;
			if (deg[u] == 0) {
				cnt++;
				q.push(u);
			}
		}
		if (cnt > 1)
			return false;
	}
	for (int i = 0; i < n; i++)
		if (deg[i] > 0)
			return false;
	return true;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		cin >> from[i] >> to[i];
		from[i]--, to[i]--;
	}
	int l = 0, r = m + 1;
	while (l + 1 < r) {
		int mid = l + r >> 1;
		if (check(mid))
			r = mid;
		else
			l = mid;
	}
	cout << (r <= m? r: -1) << '\n';
	return 0;
}
