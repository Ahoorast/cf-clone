#include<bits/stdc++.h>
using namespace std;
 
const int N = 310;
int n, m, p, a[N][N];
long long d[N][N];
vector<pair<int, int>> vec[N * N];
vector<int> r[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> p;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> a[i][j], vec[a[i][j]].push_back({i, j});
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			d[i][j] = 1LL << 55;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (a[i][j] == 1) 
				d[i][j] = i + j;
	for (int i = 2; i <= p; i++) {
		for (int i = 0; i < n; i++)
			r[i].clear();
		for (auto x: vec[i - 1])
			r[x.first].push_back(x.second);
		for (int i = 0; i < n; i++)
			sort(r[i].begin(), r[i].end());
		for (auto u: vec[i]) 
			for (int i = 0; i < n; i++) {
				auto x = upper_bound(r[i].begin(), r[i].end(), u.second);
				if (x != r[i].end())
					d[u.first][u.second] = min(d[u.first][u.second], d[i][*x] + abs(u.first - i) + abs(*x - u.second));
				if (x != r[i].begin()) {
					x--;
					d[u.first][u.second] = min(d[u.first][u.second], d[i][*x] + abs(u.first - i) + abs(*x - u.second));
				}
			}
	}
	cout << d[vec[p][0].first][vec[p][0].second] << '\n';
	return 0;
}
