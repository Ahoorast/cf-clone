#include <bits/stdc++.h>
using namespace std;
 
const int N = 30 * 2 * 100000 + 10;
int trie[N][2], mark[N], cnt;
 
void insert(long long x) {
	int j = 0;
	for (int i = 30; i >= 0; i--) {
		bool b = (1 << i) & (x);
		if (!trie[j][b])
			trie[j][b] = ++cnt;
		j = trie[j][b];
	}
	mark[j]++;
}
 
bool isLeaf(int x) {
	return !(mark[x] || trie[x][0] || trie[x][1]);
}
 
void remove(long long x) {
	vector<int> v;
	vector<bool> vec;
	v.push_back(0);
	bool flag = true;
	int j = 0;
	for (int i = 30; i >= 0; i--) {
		bool b = (1 << i) & x;
		vec.push_back(b);
		if (trie[j][b])
			j = trie[j][b];
		else
			flag = false;
		v.push_back(j);
	}
	reverse(v.begin(), v.end());
	reverse(vec.begin(), vec.end());
	if (flag) {
		mark[v[0]]--;
		for (int i = 0; i + 1 < v.size() && flag; i++)
			if (isLeaf(v[i]))
				trie[v[i + 1]][vec[i]] = 0;
			else
				flag = false;
	}
}
 
void query(long long x) {
	int j = 0, res = 0, ans = 0;
	for (int i = 30; i >= 0; i--) {
		bool b = (1 << i) & x;
		if (trie[j][!b])
			j = trie[j][!b], res = res * 2 + 1;
		else
			j = trie[j][b], res <<= 1;
	}
	cout << res << endl;
}
 
int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	insert(0);
	while (Q--) {
		char c;
		long long x;
		cin >> c >> x;
		if (c == '+')
			insert(x);
		else if (c == '-')
			remove(x);
		else
			query(x);
	}
	return 0;
}
