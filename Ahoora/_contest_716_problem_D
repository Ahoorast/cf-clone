#include<bits/stdc++.h>
using namespace std;
 
const int N = 1010, M = 10000 + 100;
int n, m, l, s, t, from[M], to[M], we[M], d[N];
bool mark[M];
vector<int> adj[N];
 
void dij(int source) {
	set<pair<int, int>> s;
	fill(d, d + n, l + 1);
	s.insert({d[source] = 0, source});
	while (s.size()) {
		auto it = *s.begin();
		s.erase(s.begin());
		int v = it.second;
		for (auto i: adj[v]) {
			long long nw = d[v] + we[i];
			int u = from[i] + to[i] - v;
			if (d[u] > nw) {
				s.erase({d[u], u});
				s.insert({d[u] = nw, u});
			}
		}
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	scanf("%d%d%d%d%d", &n, &m, &l, &s, &t);
	for (int i = 0; i < m; i++) {
		scanf("%d%d%d", &from[i], &to[i], &we[i]);
		if (we[i] == 0) 
			we[i] = 1, mark[i] = true;
		adj[from[i]].push_back(i);
		adj[to[i]].push_back(i);
	}
	dij(s);
	if (d[t] > l)
		return printf("NO\n"), 0;
	for (int i = 0; i < m; i++)
		if (mark[i]) {
			we[i] += l - d[t];
			dij(s);
		}
	if (d[t] != l)
		return printf("NO\n"), 0;
	printf("YES\n");
	for (int i = 0; i < m; i++)
		printf("%d %d %d\n", from[i], to[i], we[i]);
	return 0;
}
