#include<bits/stdc++.h>
using namespace std;
 
const int N = 5 * 1000 * 100 + 10, Z = 22;
int n, sz[N], d[1 << (Z + 2)], lazy[N], ans[N], lazyD[N];
vector<int> vec;
vector<pair<int, int>> adj[N];
 
int dfs_sz(int v) {
	for (auto u: adj[v])
		sz[v] += dfs_sz(u.first);
	return ++sz[v];
}
 
void add(int root, int v, int msk, int h, bool tp) {
	if (!tp) {
		d[msk] = max(d[msk], h);
		vec.push_back(msk);
	} else {
		int x = msk ^ lazy[root];
		for (int i = 0; i < Z; i++) {
			int y = x ^ (1 << i) ^ lazy[root];
			ans[root] = max(ans[root], d[y] + h + 2 * lazyD[root]);
		}
		if (__builtin_popcount(x) <= 1)
			ans[root] = max(ans[root], h + lazyD[root]);
		int y = x ^ lazy[root];
		ans[root] = max(ans[root], d[y] + h + 2 * lazyD[root]);
	}
	for (auto u: adj[v])
		add(root, u.first, msk ^ u.second, h + 1, tp);
}
 
void dfs(int v, bool kp = false) {
	int mx = 0, w;
	for (auto u: adj[v])
		if (sz[u.first] > sz[mx])
			mx = u.first, w = u.second;
	for (auto u: adj[v])
		if (u.first != mx) {
			dfs(u.first);
			ans[v] = max(ans[v], ans[u.first]);
		}
	if (mx) {
		dfs(mx, 1);
		ans[v] = max(ans[v], ans[mx]);
		lazy[v] = lazy[mx] ^ w;
		lazyD[v] = lazyD[mx] + 1;
		d[lazy[v] ^ w] = max(d[lazy[v] ^ w], 1 - lazyD[v]);
		vec.push_back(lazy[v] ^ w);
		ans[v] = max(ans[v], d[lazy[v]] + lazyD[v]);
		for (int i = 0; i < Z; i++) {
			int x = (1 << i) ^ lazy[v];
			ans[v] = max(ans[v], d[x] + lazyD[v]);
		}
	}
	for (auto u: adj[v])
		if (u.first != mx) {
			add(v, u.first, lazy[v] ^ u.second, 1 - lazyD[v], 1);
			add(v, u.first, lazy[v] ^ u.second, 1 - lazyD[v], 0);
		}
	if (!kp) {
		for (auto i: vec)
			d[i] = -N * 2;
		vec.clear();
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < 1 << (Z + 2); i++)
		d[i] = -N * 2;
	for (int i = 2, p; i <= n; i++) {
		char c;
		cin >> p >> c;
		adj[p].push_back({i, 1 << (c - 'a')});
	}
	dfs_sz(1);
	dfs(1);
	for (int i = 1; i <= n; i++)
		cout << ans[i] << ' ';
	cout << '\n';
	return 0;
}
