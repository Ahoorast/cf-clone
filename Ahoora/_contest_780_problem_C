#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int col[N], n, deg[N];
vector<int> adj[N];
 
void dfs(int root, int par = -1) {
	int c = 1;
	for (auto u: adj[root])
		if (u ^ par) {
			while ((par != -1 && col[par] == c) || col[root] == c)
				c++;
			col[u] = c++;
			dfs(u, root);
		}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
		deg[v]++, deg[u]++;
	}
	int mx = 0;
	for (int i = 1; i <= n; i++)
		mx = max(mx, deg[i]);
	cout << ++mx << endl;
	col[1] = 1;
	dfs(1);
	for (int i = 1; i <= n; i++)
		cout << col[i] << ' ';
	cout << endl;
	return 0;
}
