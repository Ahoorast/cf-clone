#include<bits/stdc++.h>
using namespace std;
 
const int N = 60, Z = 26;
int n, m, k, d[N][N], dx[4] = {+1, -1, 0, 0}, dy[4] = {0, 0, +1, -1};
char c[N][N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> k;
	int sx, sy, ex, ey;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++) {
			cin >> c[i][j];
			if (c[i][j] == 'S')
				sx = i, sy = j;
			if (c[i][j] == 'T')
				ex = i, ey = j;
		}
	vector<string> cnd;
	int len = 1 << 30;
	for (int msk = 0; msk < 1 << Z; msk++) 
		if (__builtin_popcount(msk) <= k) {
			for (int i = 0; i < n; i++)
				for (int j = 0; j < m; j++)
					d[i][j] = n + m + 10;
			auto vld = [&](int x, int y) {
				if (x < 0 || y < 0 || x > n || y > m)
					return false;
				if (c[x][y] == 'T' || c[x][y] == 'S')
					return true;
				if (((1 << (c[x][y] - 'a')) & msk) == 0)
					return false;
				return true;
			};
			queue<pair<int, int>> q;
			q.push({ex, ey}), d[ex][ey] = 0;
			while (q.size()) {
				pair<int, int> f = q.front();
				q.pop();
				int x = f.first, y = f.second;
				for (int i = 0; i < 4; i++) {
					int nx = x + dx[i], ny = y + dy[i];
					if (vld(nx, ny) && d[x][y] + 1 < d[nx][ny]) {
						d[nx][ny] = d[x][y] + 1;
						q.push({nx, ny});
					}
				}
			}
			if (d[sx][sy] == n + m + 10)
				continue;
			vector<pair<int, int>> vec;
			vec.push_back({sx, sy});
			string res;
			bool fnd = false;
			while (!fnd) {
				sort(vec.begin(), vec.end());
				vec.resize(unique(vec.begin(), vec.end()) - vec.begin());
				char mn = 'z';
				for (auto p: vec) {
					int x = p.first, y = p.second;
					for (int i = 0; i < 4; i++) {
						int nx = x + dx[i], ny = y + dy[i];
						if (vld(nx, ny) && d[nx][ny] == d[x][y] - 1) {
							mn = min(mn, c[nx][ny]);
							if (c[nx][ny] == 'T')
								fnd = true;
						}
					}
				}
				if (!fnd) {
					res += mn;
					vector<pair<int, int>> nxt;
					for (auto p: vec) {
						int x = p.first, y = p.second;
						for (int i = 0; i < 4; i++) {
							int nx = x + dx[i], ny = y + dy[i];
							if (vld(nx, ny) && d[nx][ny] == d[x][y] - 1 && c[nx][ny] == mn)
								nxt.push_back({nx, ny});
						}
					}
					swap(vec, nxt);
				}
			}
			int sz = (int)(res.size());
			if (sz < len) 
				len = sz, cnd.clear();
			if (sz == len)
				cnd.push_back(res);
		}
	if (cnd.empty())
		return cout << "-1\n", 0;
	cout << *min_element(cnd.begin(), cnd.end()) << '\n';
	return 0;
}
