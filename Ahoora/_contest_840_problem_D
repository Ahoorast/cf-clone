#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 10, LG = 20;
int n, cnt[N], a[N], ans, need;
bool vis[N];
vector<int> all;
vector<pair<int, int>> seg[N << 2];
 
inline void build(int l = 0, int r = n, int id = 1) {
	if (l + 1 == r) {
		seg[id].push_back({1, a[l]});
		return;
	}
	for (int i = l; i < r; i++) 
		cnt[a[i]]++;
	for (int i = l; i < r; i++)
		if (cnt[a[i]]) {
			seg[id].push_back({cnt[a[i]], a[i]});
			cnt[a[i]] = 0;
		}
	for (int i = l; i < r; i++)
		cnt[a[i]] = vis[a[i]] = 0;
	sort(seg[id].begin(), seg[id].end(), greater<pair<int, int>>());
	if ((int)(seg[id].size()) > LG)
		seg[id].resize(LG);
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
}
 
inline void go(int s, int e, int w, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r) {
		for (auto x: seg[id]) {
			cnt[x.second] += x.first * w;
			if (cnt[x.second] > need)
				ans = min(ans, x.second);
		}
		return;
	}
	if (s >= r || e <= l)
		return;
	int mid = l + r >> 1;
	go(s, e, w, l, mid, id << 1), go(s, e, w, mid, r, id << 1 | 1);
}
 
inline int inp() {
	int res = 0;
	char c = '0';
	while (c >= '0' && c <= '9') {
		((res *= 10) += c - '0');
		c = getchar();
	}
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	n = inp(), Q = inp();
	for (int i = 0; i < n; i++)
		a[i] = inp();
	build();
	while (Q--) {
		int l, r, k;
		l = inp(), r = inp(), k = inp();
		--l;
		all.clear();
		ans = n + 100, need = (r - l) / k;
		go(l, r, +1);
		printf("%d\n", (ans <= n? ans: -1));
		go(l, r, -1);
	}
	return 0;
}
 
