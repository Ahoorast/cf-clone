#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, SQ = 320;
int n, x[N], tp[N], ted[SQ];
long long sum[SQ][5];
vector<int> all, vec[SQ];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		if (s == "add") {
			tp[i] = 0;
			cin >> x[i];
			all.push_back(x[i]);
		} else if (s == "del") {
			tp[i] = 1;
			cin >> x[i];
			all.push_back(x[i]);
		} else 
			tp[i] = 2;
	}
	sort(all.begin(), all.end());
	all.resize(unique(all.begin(), all.end()) - all.begin());
	for (int i = 0; i < n; i++) {
		if (tp[i] == 2) {
			long long res = 0;
			int t = 0;
			for (int i = 0; i < SQ; i++) {
				res += sum[i][((3 - t) % 5 + 5) % 5];
				t += ted[i];
			}
			cout << res << '\n';
		} else {
			int ind = lower_bound(all.begin(), all.end(), x[i]) - all.begin();
			int box = ind / SQ;
			auto it = lower_bound(vec[box].begin(), vec[box].end(), x[i]);
			if (tp[i] == 0 && (it != vec[box].end() && (*it) == x[i]))
				continue;
			if (tp[i] == 1 && (it == vec[box].end() || (*it) != x[i]))
				continue;
			
			if (tp[i] == 0) {
				vec[box].push_back(x[i]);
				sort(vec[box].begin(), vec[box].end());
			} else {
				swap(vec[box][ted[box] - 1], vec[box][it - vec[box].begin()]);
				vec[box].pop_back();
				sort(vec[box].begin(), vec[box].end());
			}
			for (int i = 0; i < 5; i++)
				sum[box][i] = 0;
			ted[box] = (int)(vec[box].size());
			for (int i = 0; i < ted[box]; i++) 
				sum[box][(i + 1) % 5] += vec[box][i];
		}
	}
	return 0;
}
