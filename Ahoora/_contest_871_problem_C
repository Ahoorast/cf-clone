#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100, mod = 1LL * 1000 * 1000 * 1000 + 7;
int sz[N], par[N], n;
pair<int, int> p[N];
bool cyc[N];
 
int Pow(int a, int b) {
	return b? 1LL * (b & 1? a: 1) * Pow(1LL * a * a % mod, b >> 1) % mod: 1;
}
 
int get_par(int root) {
	return par[root] == root? root: par[root] = get_par(par[root]);
}
 
void Union(int v, int u) {
	v = get_par(v), u = get_par(u);
	if (v == u) {
		cyc[v] = true;
		return;
	}
	if (sz[u] > sz[v])
		swap(v, u);
	sz[v] += sz[u], sz[u] = 0;
	par[u] = v;
	cyc[v] = cyc[v] | cyc[u];
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	vector<int> vec;
	for (int i = 0; i < n; i++)
		cin >> p[i].first >> p[i].second, vec.push_back(p[i].first);
	sort(vec.begin(), vec.end());
	vec.resize(unique(vec.begin(), vec.end()) - vec.begin());
	for (int i = 0; i < n; i++)
		p[i].first = lower_bound(vec.begin(), vec.end(), p[i].first) - vec.begin();
	vec.clear();
	for (int i = 0; i < n; i++)
		vec.push_back(p[i].second);
	sort(vec.begin(), vec.end());
	vec.resize(unique(vec.begin(), vec.end()) - vec.begin());
	for (int i = 0; i < n; i++)
		p[i].second = lower_bound(vec.begin(), vec.end(), p[i].second) - vec.begin() + n;
	vector<int> all;
	for (int i = 0; i < n; i++) {
		all.push_back(p[i].first);
		all.push_back(p[i].second);
	}
	sort(all.begin(), all.end());
	all.resize(unique(all.begin(), all.end()) - all.begin());
	for (auto it: all)
		par[it] = it, sz[it] = 1, cyc[it] = false;
	int ans = 1;
	for (int i = 0; i < n; i++) 
		Union(p[i].first, p[i].second);
	for (auto x: all)
		if (get_par(x) == x) {
			int s = sz[get_par(x)];
			bool c = cyc[get_par(x)];
			int tmp = Pow(2, s);
			if (!c)
				tmp = ((tmp - 1) % mod + mod) % mod;
			ans = 1LL * ans * tmp % mod;
		}
	cout << ans << '\n';
	return 0;
}
