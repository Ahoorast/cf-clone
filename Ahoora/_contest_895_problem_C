#include<bits/stdc++.h>
using namespace std;
 
const long long N = 1000 * 100 + 10, mod = 1LL * 1000 * 1000 * 1000 + 7;
long long n, a[N], dp[2][(1 << 20) + 100], key[N], size[(1 << 20) + 100];
 
bool isPrime(long long x) {
	for (long long i = 2; i * i <= x; i++)
		if (x % i == 0)
			return false;
	return true && x > 1;
}
 
long long Pow(long long a, long long b) {
	return b? (b & 1? a: 1) * Pow(a * a % mod, b >> 1) % mod: 1;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	vector<long long> prime;
	for (long long i = 2; i <= 70; i++)
		if (isPrime(i))
			prime.push_back(i);
	cin >> n; 
	for (long long i = 1; i <= n; i++)
		cin >> a[i];
	for (long long i = 1; i <= n; i++) {
		for (long long j = 0; j < 19; j++)
			while (a[i] % prime[j] == 0)
				a[i] /= prime[j], key[i] ^= 1 << j;
		size[key[i]]++;
	}
	dp[0][0] = 1;
	set<long long> s, up;
	s.insert(0);
	long long ans = 0;
	bool t = false;
	for (long long i = 1; i <= n; i++) 
		if (up.find(key[i]) == up.end()) {
			t = !t;
			vector<long long> vec;
			for (auto it: s) 
				dp[t][it] = (dp[!t][it] * Pow(2LL, size[key[i]] - 1)) % mod;
			for (auto it: s) {
				int x = it ^ key[i];
				vec.push_back(x);
				(dp[t][x] += (Pow(2LL, size[key[i]] - 1) * dp[!t][it]) % mod) %= mod;
			}
			ans = dp[t][0];
			for (auto x: vec)
				s.insert(x);
			up.insert(key[i]);
		}
	ans = ((ans - 1 % mod) + mod) % mod;
	cout << ans << endl;
	return 0;
}
