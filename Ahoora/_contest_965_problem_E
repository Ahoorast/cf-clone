#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, Z = 26;
int trie[N][Z], w[N], ans, n, size, dp[N], par[N], h[N];
pair<int, int> mx[N];
string s;
 
void dfs(int v = 0) {
	for (auto u: trie[v])
		if (u) {
			dfs(u);
			dp[v] += dp[u];
			if (mx[v].first < mx[u].first)
				mx[v] = mx[u];
		}
	dp[v] += w[v] * h[v];
	if (w[v]) {
		if (mx[v].first == 0)
			mx[v] = {1, v};
		else
			mx[v].first++;
	}
	if (!w[v] && mx[v].first) {
		dp[v] -= mx[v].first;
		vector<int> upd;
		int u = mx[v].second;
		upd.push_back(u);
		while (u != v) {
			w[u]--;
			w[par[u]]++;
			u = par[u];
			upd.push_back(u);
		}
		for (auto v: upd) {
			mx[v] = {0, 0};
			for (auto u: trie[v])
				if (u && mx[u].first > mx[v].first)
					mx[v] = mx[u];
			if (w[v]) {
				if (mx[v].first == 0)
					mx[v] = {1, v};
				else
					mx[v].first++;
			} else
				mx[v] = {0, 0};
		}
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> s;
		int j = 0;
		for (auto c: s) {
			int x = c - 'a';
			if (!trie[j][x]) {
				trie[j][x] = ++size;
				par[size] = j;
				h[size] = h[j] + 1;
			}
			j = trie[j][x];
		}
		w[j]++;
	}
	dfs();
	for (auto u: trie[0])
		if (u)
			ans += dp[u];
	cout << ans << '\n';
	return 0;
}
