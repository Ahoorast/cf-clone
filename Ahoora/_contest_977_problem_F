#include <bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100;
int dp[N], a[N], n, path[N];
 
void pp(int i, int t) {
	if (t) 
		cout << i << ' ', pp(path[i], t - 1);
}
 
int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	set<pair<int, int>> st;
	dp[n] = 1;
	st.insert({a[n], n});
	path[n] = n;
	for (int i = n - 1; i >= 1; i--) {
		auto it = st.lower_bound({a[i] + 1, 0});
		if ((*it).first < a[i] || (*it).first != a[i] + 1)
			path[i] = i;
		else
			path[i] = (*it).second;
		dp[i] = dp[path[i]] + 1;
		st.insert({a[i], i});
	}
	int ans = 0, index = n;
	for (int i = 1; i <= n; i++)
		if (ans < dp[i])
			ans = dp[i], index = i;
	cout << ans << endl;
	pp(index, ans);
	cout << endl;
	return 0;
}
