#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, m, nxt[N], prv[N], cnt;
bool vis[N];
multiset<int> adj[N], jda[N], act[N];
set<pair<int, int>> in, out;
 
void upd(int v, int u) {
	out.erase({(int)(adj[v].size()), v});
	in.erase({(int)(jda[u].size()), u});
	adj[v].erase(adj[v].find(u));
	jda[u].erase(jda[u].find(v));
	if (prv[u] == -1 && nxt[v] == -1) {
		nxt[v] = u;
		prv[u] = v;
	}
	if (!adj[v].empty())
		out.insert({(int)(adj[v].size()), v});
	if (!jda[u].empty()) 
		in.insert({(int)(jda[u].size()), u});
}
 
void bt(int v) {
	if (vis[v])
		return;
	vis[v] = true;
	cnt++;
	if (cnt == n) {
		if (act[v].count(0)) {
			int ver = 0;
			while (ver != v) {
				cout << ver + 1 << ' ';
				ver = nxt[ver];
			}
			cout << v + 1 << ' ' << 1 << '\n';
			exit(0);
		}
	}
	if (nxt[v] != -1) 
		bt(nxt[v]);
	else 
		for (auto u: adj[v])
			if (!vis[u]) {
				nxt[v] = u;
				bt(u);
				nxt[v] = -1;
			}
	if (vis[v]) {
		vis[v] = false;
		cnt--;
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	freopen("king.in", "r", stdin);
	freopen("king.out", "w", stdout);
	cin >> n >> m;
	for (int i = 0, v, u; i < m; i++) {
		cin >> v >> u;
		--v, --u;
		adj[v].insert(u);
		jda[u].insert(v);
		act[v].insert(u);
	}
	for (int i = 0; i < n; i++) {
		if (adj[i].empty() || jda[i].empty())
			return cout << "There is no route, Karl!\n", 0;
		out.insert({(int)(adj[i].size()), i});
		in.insert({(int)(jda[i].size()), i});
	}
	fill(nxt, nxt + n, -1), fill(prv, prv + n, -1);
	bool fnd = true;
	while (fnd) {
		fnd = false;
		if (!out.empty() && (*out.begin()).first == 1) {
			int v = (*out.begin()).second;
			int u = *adj[v].begin();
			upd(v, u);
			fnd = true;
		}
		if (!in.empty() && (*in.begin()).first == 1) {
			int v = (*in.begin()).second;
			int u = *jda[v].begin();
			upd(u, v);
			fnd = true;
		}
	}
	bt(0);
	cout << "There is no route, Karl!\n";
	return 0;
}
