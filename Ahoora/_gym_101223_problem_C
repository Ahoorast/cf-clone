#include<bits/stdc++.h>
using namespace std;
 
const int N = 110, K = 5010;
const long long inf = 1LL << 60;
int n, m, k, TC, vv[K], uu[K];
long long d[N][N], ans[K][3];
 
void solve() {
	TC++;
	cin >> n >> m >> k;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			d[i][j] = (i != j) * inf;
	for (int i = 0, v, u; i < m; i++) {
		long long w;
		cin >> v >> u >> w;
		d[v][u] = d[u][v] = min(d[u][v], w);
	}
	for (int k = 1; k <= n; k++)
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= n; j++)
				d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
	for (int i = 1; i <= k; i++)
		cin >> vv[i] >> uu[i];
	set<pair<long long, pair<int, int>>> q;
	for (int i = 1; i <= k; i++)
		for (int j = 0; j <= 2; j++)
			ans[i][j] = inf;
	q.insert({ans[1][1] = d[1][vv[1]], {1, 1}});
	while (q.size()) {
		auto it = *q.begin();
		q.erase(q.begin());
		pair<int, int> v = it.second;
		long long D = it.first;
		if (v.second == 0)  {
			if (v.first + 1 <= k && d[uu[v.first]][vv[v.first + 1]] + D < ans[v.first + 1][1]) 
				q.insert({ans[v.first][1] = D + d[uu[v.first]][vv[v.first + 1]], {v.first + 1, 1}});
		}
		else if (v.second == 1) {
			if (D + d[vv[v.first]][uu[v.first]] < ans[v.first][0]) 
				q.insert({ans[v.first][0] = D + d[vv[v.first]][uu[v.first]], {v.first, 0}});
			if (v.first + 1 <= k && d[vv[v.first]][vv[v.first + 1]] + D < ans[v.first + 1][2]) 
				q.insert({ans[v.first + 1][2] = D + d[vv[v.first]][vv[v.first + 1]], {v.first + 1, 2}});
		} 
		else if (v.second == 2) {
			D += d[vv[v.first]][uu[v.first - 1]];
			if (D + d[uu[v.first - 1]][uu[v.first]] < ans[v.first][0]) 
				q.insert({ans[v.first][0] = D + d[uu[v.first - 1]][uu[v.first]], {v.first, 0}});
			if (v.first + 1 <= k && D + d[uu[v.first - 1]][vv[v.first + 1]] < ans[v.first + 1][2]) 
				q.insert({ans[v.first + 1][2] = D + d[uu[v.first - 1]][vv[v.first + 1]], {v.first + 1, 2}});
		}
	}
	cout << "Case #" << TC << ": ";
	cout << (ans[k][0] < inf? ans[k][0]: -1) << '\n'; 
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int T;
	cin >> T;
	while (T--) 
		solve();
	return 0;
}
