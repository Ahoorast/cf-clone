#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int n, p[3][N];
 
struct BIT {
	int fen[N];
	BIT() {
		fill(fen, fen + N, 0);
	}
	void upd(int x, int w) {
		for (++x; x < N; x += x & -x)
			fen[x] += w;
	}
	int get(int x) {
		int res = 0;
		for (; x; x -= x & -x)
			res += fen[x];
		return res;
	}
} T;
 
long long solve(int f, int s) {
	vector<int> pos;
	pos.resize(n);
	for (int i = 0; i < n; i++) 
		pos[p[f][i]] = i;
	vector<int> pr;
	for (int i = 0; i < n; i++)
		pr.push_back(pos[p[s][i]]);
	for (int i = 0; i < n; i++)
		pos[pr[i]] = i;
	long long res = 0;
	for (int i = n - 1; i >= 0; i--) {
		res += T.get(pos[i]);
		T.upd(pos[i], +1);
	}
	for (int i = 0; i < n; i++)
		T.upd(i, -1);
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < n; j++)
			cin >> p[i][j], p[i][j]--;
	long long ans = 0;
	for (int i = 0; i < 3; i++)
		for (int j = i + 1; j < 3; j++) 
			ans += solve(i, j);
	ans /= 2;
	ans = 1LL * n * (n - 1) / 2 - ans;
	cout << ans << '\n';
	return 0;
}
