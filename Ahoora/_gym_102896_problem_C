#include<bits/stdc++.h>
using namespace std;
 
const int N = 30;
int n;
vector<int> cld[N], ans[N];
 
void solve(int v) {
	int me = 1 << v;
	bool leaf = true;
	for (auto u: cld[v]) {
		leaf = false;
		solve(u);
		vector<int> vec = ans[v];
		ans[v].clear();
		int sz = (int)(vec.size()), x = 0;
		for (auto msk: ans[u]) {
			for (int i = (x == 0? 0: sz - 1); i >= 0 && i < sz; i += (x == 0? +1: -1)) 
				ans[v].push_back(vec[i] | me | msk);
			(x += 1) %= 2;
		}
		if (sz == 0)
			for (auto msk: ans[u])
				ans[v].push_back(msk | me);
	}
	if (leaf) {
		ans[v].push_back(0), ans[v].push_back(me);
	} else {
		ans[v].insert(ans[v].begin(), 0);
	}
}
 
void rep(int msk) {
	for (int i = 0; i < n; i++)
		cout << (msk >> i & 1);
	cout << '\n';
}
 
int diff(int x, int y) {
	for (int i = 0; i < n; i++)
		if ((x >> i & 1) != (y >> i & 1))
			return i + 1;
	return -1;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1, p; i < n; i++) {
		cin >> p;
		--p;
		cld[p].push_back(i);
	}
	solve(0);
	int sz = (int)(ans[0].size());
	cout << sz - 2 << '\n';
	for (int i = 2; i < sz; i++)
		cout << diff(ans[0][i], ans[0][i - 1]) << ' ';
	cout << '\n';
	return 0;
}
