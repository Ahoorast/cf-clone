#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, m, K, s, t, dist[N], from[N];
bool vis[N], mark[N];
vector<int> adj[N];
 
void read() {
	scanf("%d%d%d", &n, &m, &K);
	for (int i = 0, a; i < K; i++)
		cin >> a, mark[a] = true;
	for (int i = 0, v, u; i < m; i++) {
		scanf("%d%d", &v, &u);
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	scanf("%d%d", &s, &t);
}
 
void bfs() {
	queue<int> q;
	for (int i = 1; i <= n; i++)
		if (mark[i])
			q.push(i), vis[i] = true, from[i] = i;
	while (q.size()) {
		int x = q.front();
		q.pop();
		for (auto u: adj[x])
			if (!vis[u]) 
				vis[u] = true, dist[u] = dist[x] + 1, q.push(u), from[u] = from[x];
	}
}
 
bool check(int d) {
	for (int i = 1; i <= n; i++)
		vis[i] = false;
	queue<int> q;
	q.push(s), vis[s] = true;
	while (q.size()) {
		int x = q.front();
		q.pop();
		for (auto u: adj[x])
			if (!vis[u] && (dist[x] + dist[u] + 1 <= d || (from[x] == from[u] && dist[x] + dist[u] <= d)))
				vis[u] = true, q.push(u);
	}
	return vis[t];
}
 
int main() { 
	read();
	mark[t] = true;
	bfs();
	int l = 1, r = n + 1;
	while (l < r) {
		int mid = l + r >> 1;
		if (check(mid))
			r = mid;
		else
			l = mid + 1;
	} 
	printf("%d\n", (r < n? r: -1));
	return 0;
}
