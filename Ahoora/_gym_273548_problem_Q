#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, p[N], s[N], a[N];
vector<int> adj[N];
 
void dfs(int root, int par = -1, long long sum = 0) {
	if (s[root] != -1)
		a[root] = s[root] - sum;
	else {
		int mn = 1 << 30;
		for (auto u: adj[root])
			if (u ^ par)
				mn = min(mn, s[u]);
		if (mn == 1 << 30)
			mn = 0;
		else
			a[root] = max(1LL * (mn - sum), 0LL);
	}
	sum += a[root];
	for (auto u: adj[root])
		if (u ^ par)
			dfs(u, root, sum);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 2; i <= n; i++) {
		cin >> p[i];
		adj[i].push_back(p[i]), adj[p[i]].push_back(i);
	}
	for (int i = 1; i <= n; i++)
		cin >> s[i];
	dfs(1);
	long long res = 0;
	for (int i = 1; i <= n; i++)
		if (a[i] < 0)
			return cout << -1 << endl, 0;
		else
			res += a[i];
	cout << res << endl;
	return 0;
}
