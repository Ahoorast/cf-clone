#include<bits/stdc++.h>
using namespace std;
 
const int N = 5 * 1000 * 100 + 10;
int n, a[N], ans[N], last[N], nxt[N], prv[N], seg[N << 2], l[N], r[N];
vector<int> query[N], vec[N];
 
int merge(int x, int y) {
	return prv[x] < prv[y]? x: y;
}
 
void upd(int x, int l = 0, int r = n, int root = 1) {
	if (l + 1 == r) {
		seg[root] = l;
		return;
	}
	int mid = l + r >> 1;
	x < mid? upd(x, l, mid, root << 1): upd(x, mid, r, root << 1 | 1);
	seg[root] = merge(seg[root << 1], seg[root << 1 | 1]);
}
 
int get(int s, int e, int l = 0, int r = n, int root = 1) {
	if (s <= l && e >= r)
		return seg[root];
	if (s >= r || e <= l)
		return n;
	int mid = l + r >> 1;
	return merge(get(s, e, l, mid, root << 1), get(s, e, mid, r, root << 1 | 1));
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	fill(last, last + N, -1);
	for (int i = 0; i < n; i++) {
		prv[i] = last[a[i]];
		last[a[i]] = i;
	}
	fill(last, last + N, n);
	for (int i = n - 1; i >= 0; i--) {
		nxt[i] = last[a[i]];
		last[a[i]] = i;
		vec[nxt[i]].push_back(i);
	}
	int Q;
	cin >> Q;
	fill(seg, seg + (N << 2), n);
	nxt[n] = prv[n] = 1 << 30;
	for (int i = 0; i < Q; i++) {
		cin >> l[i] >> r[i];
		l[i]--;
		query[r[i]].push_back(i);
	}
	for (int i = n; i >= 1; i--) {
		for (auto it: vec[i]) 
			upd(it);
		for (auto it: query[i]) {
			int x = get(l[it], r[it]);
			if (prv[x] < l[it])
				ans[it] = a[x];
		}
	}
	for (int i = 0; i < Q; i++) 
		cout << ans[i] << '\n';
	return 0;
}
