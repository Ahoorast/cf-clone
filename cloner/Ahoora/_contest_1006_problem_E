#include <bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100;
int n, sub[N], Q;
vector<int> adj[N];
vector<int> vec;
 
void read() {
	cin >> n >> Q;
	for (int i = 2; i <= n; i++) {
		int p;
		cin >> p;
		adj[p].push_back(i);
	}
}	
 
void dfs(int v) {
	vec.push_back(v);
	for (auto u: adj[v])
		dfs(u), sub[v] += sub[u];
	sub[v]++;
}
 
int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	read();
	dfs(1);
	int pos[N] = {};
	for (int i = 0; i < vec.size(); i++)
		pos[vec[i]] = i;
	while (Q--) {
		int u, k;
		cin >> u >> k;
		if (sub[u] >= k)
			cout << vec[pos[u] + k - 1] << endl;
		else
			cout << "-1" << endl;
	}
	return 0;
}
