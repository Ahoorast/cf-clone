#include<bits/stdc++.h>
 
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
 
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, SQ = 550;
int n, pos[N], p[N];
 
struct BIT {
	int fen[N];
	BIT() {
		fill(fen, fen + N, 0);
	}
	void upd(int x, int w) {
		for (++x; x < N; x += x & (-x)) 
			fen[x] += w;
	}
	int get(int x) {
		int res = 0;
		for (++x; x; x -= x & (-x))
			res += fen[x];
		return res;
	}
} T[SQ];
 
inline int inp() {
	int res = 0;
	char c = '0';
	while (c >= '0' && c <= '9') {
		((res *= 10) += c - '0');
		c = getchar();
	}
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	n = inp(), Q = inp();
	for (int i = 0, a; i < n; i++)
		a = inp(), pos[a - 1] = i;
	for (int i = 0; i < n; i++) {
		p[i] = inp(), p[i]--;
		p[i] = pos[p[i]];
	}
	for (int i = 0; i < n; i++)
		T[i / SQ].upd(p[i], +1);
	while (Q--) {
		int tp;
		tp = inp();
		if (tp == 1) {
			int l, r, s, e, res = 0;
			l = inp(), r = inp(), s = inp(), e = inp();
			--l, --s;
			while (s < e) {
				if (s % SQ == 0 && s + SQ <= e) {
					res += T[s / SQ].get(r - 1) - T[s / SQ].get(l - 1);
					s += SQ;
				} else {
					res += (p[s] >= l && p[s] < r);
					s++;
				}
			}
			printf("%d\n", res);
		} else {
			int x, y;
			x = inp(), y = inp();
			--x, --y;
			T[x / SQ].upd(p[x], -1);
			T[y / SQ].upd(p[y], -1);
			swap(p[x], p[y]);
			T[x / SQ].upd(p[x], +1);
			T[y / SQ].upd(p[y], +1);
		}
	}
	return 0;
}
