#include<bits/stdc++.h>
using namespace std;
 
const int N = 5010;
int n, a, b, dp[N];
bool can[N][N];
string s;
 
void kmp(string s, string t, int ind) {
	int n = (int)(s.size()), m = (int)(t.size());
	vector<int> nxt(m, 0);
	for (int i = 1, len = 0; i < m; i++) {
		while (len && t[len] != t[i])
			len = nxt[len - 1];
		len += t[len] == t[i];
		nxt[i] = len;
	}
	int mx = 0;
	for (int i = 0, len = 0; i < n; i++) {
		while (len && s[i] != t[len])
			len = nxt[len - 1];
		len += s[i] == t[len];
		mx = max(mx, len);
		if (len == m)
			len = nxt[len - 1];
	}
	for (int j = 1; j <= mx; j++)
		can[ind][ind + j] = true;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> a >> b >> s;
	for (int i = 1; i < n; i++) {
		string L, R;
		for (int j = 0; j < i; j++)
			L += s[j];
		for (int j = i; j < n; j++)
			R += s[j];
		kmp(L, R, i);
	}
	for (int i = 1; i <= n; i++) {
		dp[i] = dp[i - 1] + a;
		for (int j = i - 1; j >= 0; j--)
			if (can[j][i])
				dp[i] = min(dp[i], dp[j] + b);
	}
	cout << dp[n] << '\n';
	return 0;
}
