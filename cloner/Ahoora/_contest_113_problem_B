#include<bits/stdc++.h>
using namespace std; 
 
const int N = 2 * 1000 + 10, P = 727;
long long pw[N], hsh[N];
 
vector<bool> kmp(string s, string t) {
	int n = (int)(s.size()), m = (int)(t.size());
	vector<int> nxt(m, 0);
	vector<bool> res(n, 0);
	for (int i = 1, len = 0; i < m; i++) {
		while (len && t[len] != t[i])
			len = nxt[len - 1];
		len += t[len] == t[i];
		nxt[i] = len;
	}
	for (int i = 0, j = 0; i < n; i++) {
		while (j && s[i] != t[j])
			j = nxt[j - 1];
		j += s[i] == t[j];
		if (j)
			res[i - j + 1] = j == m;
		if (j == m)
			j = nxt[j - 1];
	}
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	pw[0] = 1;
	for (int i = 1; i < N; i++)
		pw[i] = pw[i - 1] * P;
	string s, t1, t2;
	cin >> s >> t1 >> t2;
	vector<bool> v1 = kmp(s, t1), v2 = kmp(s, t2);
	int n = (int)(s.size());
	for (int i = 1; i <= n; i++)
		hsh[i] = hsh[i - 1] * P + s[i - 1] - 'a' + 1;
	int m1 = (int)(t1.size()), m2 = (int)(t2.size());
	unordered_set<long long> all;
	for (int i = 0; i < n; i++)
		for (int j = i; j < n; j++)
			if (v1[i] && v2[j] && i + m1 <= j + m2) 
				all.insert(hsh[j + m2] - hsh[i] * pw[j + m2 - i]);
	cout << (int)(all.size()) << '\n';
	return 0;
}
