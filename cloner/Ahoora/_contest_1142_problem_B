#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, LG = 22;
int n, m, p[N], pos[N], last[N], a[N], nxt[N], mn[N], rmq[N][LG];
vector<int> adj[N];
deque<int> dp;
 
void dfs(int v) {
	dp.push_front(v);
	int c1 = -1;
	if ((int)(dp.size()) >= n)
		mn[v] = dp[n - 1];
	else
		mn[v] = m;
	if ((int)(dp.size()) >= n) {
		c1 = dp.back();
		dp.pop_back();
	}
	for (auto u: adj[v])
		dfs(u);
	if (c1 != -1)
		dp.push_back(c1);
	dp.pop_front();
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> m >> Q;
	for (int i = 0; i < n; i++)
		cin >> p[i], pos[p[i]] = i;
	for (int i = 0; i < m; i++) {
		cin >> a[i];
		a[i] = pos[a[i]];
	}
	for (int i = 0; i < n; i++)
		last[i] = m;
	for (int i = m - 1; i >= 0; i--) {
		nxt[i] = last[(a[i] + 1) % n];
		last[a[i]] = i;
		adj[nxt[i]].push_back(i);
	}
	dfs(m);
	for (int i = 0; i <= m; i++)
		rmq[i][0] = mn[i];
	for (int j = 1; j < LG; j++)
		for (int i = 0; i <= m; i++)
			if ((i + (1 << j)) <= m)
				rmq[i][j] = min(rmq[i][j - 1], rmq[i + (1 << (j - 1))][j - 1]);
	while (Q--) {
		int l, r;
		cin >> l >> r;
		--l;
		int i = l, res = m;
		for (int j = LG - 1; j >= 0; j--)
			if ((r - l) & (1 << j)) {
				res = min(res, rmq[i][j]);
				i += 1 << j;
			}
		cout << (res < r);
	}
	cout << '\n';
	return 0;
}
