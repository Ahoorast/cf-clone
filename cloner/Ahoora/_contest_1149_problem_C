#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
const long long INF = 1LL * 20000000000000 * N * 2LL;
int n, h[N << 1];
char c[N << 1];
 
struct Node {
	long long dp[4][4], lazy;
	Node() {
		lazy = 0;
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++) {
				dp[i][j] = 0;
				if (i <= 1 && j > 1)
					dp[i][j] = -INF;
			}
	}
	void init(long long x) {
		for (int i = 0; i < 4; i++)
			for (int j = i + 1; j < 4; j++) {
				dp[i][j] = x * (j - i);
				if (i <= 1 && j > 1)
					dp[i][j] -= 3LL * x;
			}
	}
	Node operator + (Node R) {
		Node res;
		for (int i = 0; i < 4; i++)
			for (int j = i + 1; j < 4; j++)
				for (int k = i; k <= j; k++)
					res.dp[i][j] = max(res.dp[i][j], dp[i][k] + R.dp[k][j]);
		return res;
	}
	void add(long long x) {
		lazy += x;
		for (int i = 0; i < 4; i++)
			for (int j = i + 1; j < 4; j++) {
				dp[i][j] += x * (j - i);
				if (i <= 1 && j > 1)
					dp[i][j] -= x * 3LL;
			}
	}
} seg[N << 4];
 
void shift(int id) {
	seg[id << 1].add(seg[id].lazy), seg[id << 1 | 1].add(seg[id].lazy);
	seg[id].lazy = 0;
}
 
void build(int l = 0, int r = 2 * n - 1, int id = 1) {
	if (l + 1 == r) {
		seg[id].init(h[l]);
		return;
	}
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
	seg[id] = seg[id << 1] + seg[id << 1 | 1];
}
 
void upd(int s, int e, long long x, int l = 0, int r = 2 * n - 1, int id = 1) {
	if (s <= l && e >= r) {
		seg[id].add(x);
		return;
	}
	if (s >= r || e <= l)
		return;
	shift(id);
	int mid = l + r >> 1;
	upd(s, e, x, l, mid, id << 1), upd(s, e, x, mid, r, id << 1 | 1);
	seg[id] = seg[id << 1] + seg[id << 1 | 1];
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q;
	for (int i = 1; i < 2 * n - 1; i++) {
		cin >> c[i];
		h[i] = h[i - 1] + (c[i] == '('? +1: -1);
	}
	build();
	cout << seg[1].dp[0][3] << '\n';
	while (Q--) {
		int a, b;
		cin >> a >> b;
		if (a > b)
			swap(a, b);
		if (c[a] != c[b]) {
			upd(a, b, (c[a] != ')'? -2: 2));
			swap(c[a], c[b]);
		}
		cout << seg[1].dp[0][3] << '\n';
	}
	return 0;
}
