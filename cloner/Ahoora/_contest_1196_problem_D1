#include <bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100;
int n, K, a[N], dp[N][3];
char s[N];
 
void solve() {
	int ans = n;
	for (int j = 0; j <= 2; j++) {
		int l = j;
		for (int k = 0; k < K; k++) {
			if (a[k] != l)
				dp[0][j]++;
			(l += 1) %= 3;
		}
	}
	for (int i = 1; i + K - 1 < n; i++)
		for (int j = 0; j <= 2; j++) {
			dp[i][j] = dp[i - 1][((j - 1) % 3 + 3) % 3];
			dp[i][j] += (a[i + K - 1] != (j + K - 1) % 3);
			dp[i][j] -= (a[i - 1] != ((j - 1) % 3 + 3) % 3);
		}
	for (int i = 0; i + K - 1 < n; i++)
		for (int j = 0; j <= 2; j++)
			ans = min(ans, dp[i][j]), dp[i][j] = 0;
	cout << ans << endl;
}
 
int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n >> K >> s;
		for (int i = 0; i < n; i++)
			if (s[i] == 'R')
				a[i] = 0;
			else if (s[i] == 'G')
				a[i] = 1;
			else 
				a[i] = 2;
		solve();
	}
	return 0;
}
