#include<bits/stdc++.h>
using namespace std;
 
const int N = 300, ALL = 6 * 1000 * 100 + 10, Z = 26;
vector<int> adj[N];
int mt[N + ALL + N], n, sz[N];
bool vis[N];
string s[N];
 
int Pow(int a, int b) {
	return b? (b & 1? a: 1) * Pow(a * a, b >> 1): 1;
}
 
void print(int msk) {
	while (msk) {
		cout << (char)('a' + (char)(msk % 27 - 1));
		msk /= 27;
	}
	cout << '\n';
}
 
void bt(int i, int x = 0, int y = 0, int msk = 0) {
	if (x == sz[i]) {
		if (msk)
			adj[i].push_back(msk + n);
		return;
	}
	if (y + 1 <= 4) 
		bt(i, x + 1, y + 1, msk + Pow(27, y) * (s[i][x] - 'a' + 1));
	bt(i, x + 1, y, msk);
}
 
bool dfs(int v) {
	vis[v] = true;
	for (auto u: adj[v])
		if (mt[u] == -1 || (!vis[mt[u]] && dfs(mt[u]))) {
			mt[v] = u, mt[u] = v;
			return true;
		}
	return false;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	fill(mt, mt + (N + ALL + N), -1);
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> s[i];
		sz[i] = (int)(s[i].size());
	}
	for (int i = 0; i < n; i++)
		bt(i);
	bool fnd = true;
	int res = 0;
	while (fnd) {
		fnd = false;
		fill(vis, vis + n, false);
		for (int i = 0; i < n; i++)
			if (mt[i] == -1 && !vis[i] && dfs(i))
				fnd = true, res++;
	}
	if (res < n)
		return cout << "-1\n", 0;
	for (int i = 0; i < n; i++) 
		print(mt[i] - n);
	return 0;
}
