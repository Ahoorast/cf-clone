#include<bits/stdc++.h>
using namespace std;
 
const int N =  (4 * 1000 * 100 + 10) * 4;
int n, p, M, m, c[N], V, cnt_comp;
bool vis[N];
vector<int> adj[N], jda[N], L;
 
void add_clause(int v, int u, bool x, bool y) {
	adj[v << 1 | !x].push_back(u << 1 | y), jda[u << 1 | y].push_back(v << 1 | !x);
	adj[u << 1 | !y].push_back(v << 1 | x), jda[v << 1 | x].push_back(u << 1 | !y);
}
 
void dfs(int v) {
	vis[v] = true;
	for (auto u: adj[v])
		if (!vis[u])
			dfs(u);
	L.push_back(v);
}
 
void dfs_c(int v) {
	c[v] = cnt_comp;
	for (auto u: jda[v])
		if (!c[u])
			dfs_c(u);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> p >> M >> m;
	for (int i = 0, x, y; i < n; i++) {
		cin >> x >> y;
		--x, --y;
		add_clause(x, y, 0, 0);
	}
	for (int i = p; i < p + M; i++)
		add_clause(i, i + 1, 0, 1);
	for (int i = 0, l, r; i < p; i++) {
		cin >> l >> r;
		--l;
		l += p, r += p;
		add_clause(i, l, 1, 0);
		add_clause(i, r, 1, 1);
	}
	for (int i = 0, v, u; i < m; i++) {
		cin >> v >> u;
		--v, --u;
		add_clause(v, u, 1, 1);
	}
	V = (p + M + 1) * 2;
	for (int i = 0; i < V; i++)
		if (!vis[i])
			dfs(i);
	reverse(L.begin(), L.end());
	for (auto v: L)
		if (!c[v]) {
			cnt_comp++;
			dfs_c(v);
		}
	for (int i = 0; i <= (p + M); i++)
		if (c[i << 1] == c[i << 1 | 1])
			return cout << "-1\n", 0;
	vector<int> o;
	for (int i = 0; i < p; i++)
		if (c[i << 1] > c[i << 1 | 1])
			o.push_back(i);
	cout << (int)(o.size()) << ' ';
	for (int i = p + 1; i <= p + M; i++)
		if (c[i << 1] < c[i << 1 | 1]) {
			cout << i - p << '\n';
			break;
		}
	for (auto i: o)
		cout << i + 1 << ' ';
	cout << '\n';
	return 0;
}
