#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
long long n, x[N], y[N], sX[N], sz[N], sumX, sumY, ans;
vector<int> adj[N];
 
void dfs(int root, int par = -1) {
	for (auto u: adj[root]) 
		if (u ^ par) {
			dfs(u, root);
			sX[root] += sX[u];
			sz[root] += sz[u];
			ans += y[root] * sz[u] * sX[u];
		}
	sX[root] += x[root], sz[root]++;
	ans += y[root] * (n - sz[root]) * (sumX - sX[root]);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	for (int i = 1; i <= n; i++)
		cin >> x[i] >> y[i], sumX += x[i], sumY += y[i];
	dfs(1);
	cout << setprecision(10) << fixed;
	cout << 1. * (1. * ans / sumX / sumY) << endl;
	return 0;
}
