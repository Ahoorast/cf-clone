#include<bits/stdc++.h>
using namespace std;
 
const int N = 2010;
int n, c[N], K[N], x[N], y[N];
long long ans;
vector<pair<int, int>> wire, edge;
set<int> build;
 
void read() {
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> x[i] >> y[i];
	for (int i = 1; i <= n; i++)
		cin >> c[i];
	for (int i = 1; i <= n; i++)
		cin >> K[i];
}
 
long long dist(int i, int j) {
	return 1LL * (abs(x[i] - x[j]) + abs(y[i] - y[j])) * (K[i] + K[j]);
}
 
struct DSU {
	vector<int> par, size, bVal;
	int comp;
	DSU(int n) {
		comp = n;
		par.push_back(-1), size.push_back(-1), bVal.push_back(-1);
		for (int i = 1; i <= n; i++)
			par.push_back(i), size.push_back(1), bVal.push_back(i);
	}
	int findRoot(int v) {
		return par[v] == par[par[v]]? par[v]: par[v] = findRoot(par[v]);
	}
	bool Union(int v, int u) {
		int pv = findRoot(v), pu = findRoot(u);
		if (pv != pu) {
			if (size[pv] > size[pu])
				swap(pv, pu);
			par[pv] = par[pu], size[pv] += size[pu], size[pu] = 0, comp--;
			if (c[bVal[pv]] > c[bVal[pu]]) 
				bVal[pv] = bVal[pu];
			else
				bVal[pu] = bVal[pv];
			return false;
		}
		return true;
	}
	bool check(int v, int u) {
		return findRoot(v) == findRoot(u);
	}
	int buildVal(int v) {
		return c[bVal[findRoot(v)]];
	}
	void Build() {
		for (int i = 1; i <= n; i++) {
			int t = bVal[findRoot(i)];
			if (build.find(t) == build.end()) {
				ans += c[t];
				build.insert(t);
			}
		}
	}
};
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	read();
	for (int i = 1; i <= n; i++)
		for (int j = i + 1; j <= n; j++)
			edge.push_back({i, j});
	sort(edge.begin(), edge.end(), [] (pair<int, int> x, pair<int, int> y) {return dist(x.first, x.second) < dist(y.first, y.second);});
	DSU G(n);
	for (auto it: edge) {
		bool t = G.check(it.first, it.second);
		if (!t) {
			int v = it.first, u = it.second;
			int x = G.buildVal(v), y = G.buildVal(u);
			long long val = dist(it.first, it.second);
			if (val + min(x, y) < x + y) {
				wire.push_back({v, u});
				ans += val;
				G.Union(v, u);
			}
		}
	}
	G.Build();
	cout << ans << endl;
	cout << build.size() << endl;
	for (auto it: build)
		cout << it << ' ';
	cout << endl << wire.size() << endl;
	for (auto it: wire)
		cout << it.first << ' ' << it.second << endl;
	return 0;
}
