#include<bits/stdc++.h>
using namespace std;
 
const int N = 210;
int A[N], n, K, dp[N][N];
vector<int> adj[N];
bool vis[N];
 
void read() {
	cin >> n >> K;
	for (int i = 1; i <= n; i++)
		cin >> A[i];
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
}
 
void dfs(int root, int h = -1) {
	vis[root] = true;
	dp[root][0] += A[root];
	vector<int> vec;
	for (auto u: adj[root])
		if (!vis[u]) {
			vec.push_back(u);
			dfs(u, h);
			dp[root][0] += dp[u][K - 1];
		}
	for (int t = 1; t <= n; t++) {
		int s = 0;
		for (auto u: vec)
			s += dp[u][max(0, max(K - t - 1, t - 1))];
		for (auto u: vec)
			dp[root][t] = max(dp[root][t], dp[u][t - 1] + s - dp[u][max(0, max(K - t - 1, t - 1))]);
	}
	for (int t = n; t >= 0; t--)
		dp[root][t] = max(dp[root][t], dp[root][t + 1]);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	read();
	K++;
	dfs(1);
	cout << dp[1][0] << endl;
	return 0;
}
