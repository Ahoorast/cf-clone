#include <iostream>
#include <algorithm>
using namespace std;
 
const int N = 2 * 1000 * 100 + 2;
int n, a[N], m, Max[N], len;
pair<int, int> p[N];
 
int BS(int l, int r, int key) {
	while (l < r) {
		int mid = (l + r) >> 1;
		if (p[mid].first < key) 
			l = mid + 1;
		else
			r = mid;
	}
	return r;
}
 
int main() {
	int Q;
	scanf("%d", &Q);
	while (Q--) {
		scanf("%d", &n);
		for (int i = 0; i < n; i++) 
			scanf("%d", &a[i]);
		scanf("%d", &m);
		int mark[N] = {}, x, y;
		len = 0;
		for (int i = 0; i < m; i++) {
			scanf("%d%d", &x, &y);
			if (mark[y]) 
				p[mark[y] - 1].first = max(x, p[mark[y] - 1].first);
			else {
				p[len++] = {x, y};
				mark[y] = len;
			}
		}
		sort(p, p + len);
		Max[len - 1] = p[len - 1].second;
		for (int i = len - 2; ~i; i--) 
			Max[i] = max(Max[i + 1], p[i].second);
		int l = 0, r = len - 1, t = 0, ans = 1;
		bool flag = true;
		for (int i = 0; i < n && flag; i++) {
			int index = BS(l, r, a[i]);
			if (p[index].first < a[i])
				flag = false;
			else if (Max[index] >= t + 1)
				t++, l = index;
			else {
				l = t = 0;
				ans++;
				i--;
			}
		}
		(flag? printf("%d\n", ans): printf("%d\n", -1));
	}
	return 0;
}
