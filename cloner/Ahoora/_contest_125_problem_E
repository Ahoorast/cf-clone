#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, m, k, par[N];
 
struct edge {
	int v, u, id;
	double w;
	edge(int x = 0, int y = 0, double xd = 0., int z = 0) {
		v = x, u = y, id = z, w = xd;
	}
	bool operator < (edge b) const {
		return w < b.w;
	}
} ed[N];
 
int get_par(int v) {
	return par[v] == v? v: par[v] = get_par(par[v]);
}
 
bool Union(int v, int u) {
	v = get_par(v), u = get_par(u);
	if (v == u)
		return false;
	par[u] = v;
	return true;
}
 
bool check(double x) {
	iota(par, par + n + 1, 0);
	vector<edge> E;
	for (int i = 1; i <= m; i++) {
		if (ed[i].v != 1 && ed[i].u != 1)
			ed[i].w += x;
		E.push_back(ed[i]);
		if (ed[i].v != 1 && ed[i].u != 1)
			ed[i].w -= x;
	}
	sort(E.begin(), E.end());
	vector<int> ans;
	int res = 0;
	for (auto e: E)
		if (Union(e.v, e.u)) {
			ans.push_back(e.id);
			res += (e.v == 1 || e.u == 1);
		}
	if (res == k) {
		cout << (int)(ans.size()) << '\n';
		for (auto e: ans)
			cout << e << ' ';
		cout << '\n';
		exit(0);
	}
	return res < k;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> k;
	for (int i = 1, v, u, w; i <= m; i++) {
		cin >> v >> u >> w;
		ed[i] = edge(v, u, w, i);
	}
	double l = -1e9, r = 1e9;
	for (int i = 0; i < 300; i++) {
		double mid = (l + r) / 2.;
		if (check(mid)) 
			l = mid;
		else
			r = mid;
	}
	cout << "-1\n";
	return 0;
}
