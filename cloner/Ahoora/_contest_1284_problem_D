#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int sa[N], sb[N], ea[N], eb[N], seg[N << 4], n;
 
void compress() {
	vector<int> all;
	for (int i = 0; i < n; i++) {
		all.push_back(sa[i]);
		all.push_back(sb[i]);
		all.push_back(ea[i]);
		all.push_back(eb[i]);
	}
	sort(all.begin(), all.end());
	all.resize(unique(all.begin(), all.end()) - all.begin());
	for (int i = 0; i < n; i++) {
		sa[i] = lower_bound(all.begin(), all.end(), sa[i]) - all.begin();
		sb[i] = lower_bound(all.begin(), all.end(), sb[i]) - all.begin();
		ea[i] = lower_bound(all.begin(), all.end(), ea[i]) - all.begin();
		eb[i] = lower_bound(all.begin(), all.end(), eb[i]) - all.begin();
	}
}
 
void upd(int p, int x, int l = 0, int r = n * 4 + 10, int root = 1) {
	if (l + 1 == r) {
		seg[root] = max(seg[root], x);
		return;
	}
	int mid = l + r >> 1;
	(p < mid? upd(p, x, l, mid, root << 1): upd(p, x, mid, r, root << 1 | 1));
	seg[root] = max(seg[root << 1], seg[root << 1 | 1]);
}
 
int get(int s, int e, int l = 0, int r = n * 4 + 10, int root = 1) {
	if (s <= l && e >= r)
		return seg[root];
	if (s >= r || e <= l)
		return -1;
	int mid = l + r >> 1;
	return max(get(s, e, l, mid, root << 1), get(s, e, mid, r, root << 1 | 1));
}
 
void solve() {
	for (int i = 0; i < N << 4; i++)
		seg[i] = -1;
	vector<int> vec[2];
	for (int i = 0; i < n; i++)
		vec[0].push_back(i), vec[1].push_back(i);
	sort(vec[0].begin(), vec[0].end(), [](int i, int j) {
			return sa[i] > sa[j];
			});
	sort(vec[1].begin(), vec[1].end(), [](int i, int j) {
			return ea[i] > ea[j];
			});
	int r = 0;
	for (auto i: vec[1]) {
		while (r < n && sa[vec[0][r]] > ea[i]) {
			upd(sb[vec[0][r]], eb[vec[0][r]]);
			r++;
		}
		if (get(0, eb[i] + 1) >= sb[i]) {
			cout << "NO\n";
			exit(0);
		}
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> sa[i] >> ea[i] >> sb[i] >> eb[i];
	compress();
	solve();
	for (int i = 0; i < n; i++) {
		swap(sa[i], sb[i]);
		swap(ea[i], eb[i]);
	}
	solve();
	cout << "YES\n";
	return 0;
}
