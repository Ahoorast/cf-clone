#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int n, l[N], r[N];
 
struct SEGS {
	set<pair<int, int>> s;
	stack<vector<pair<int, int>>> last_rem;
	stack<pair<int, int>> last_add;
	SEGS(int n = 0) {
		s.clear();
		while (last_rem.size())
			last_rem.pop();
		while (last_add.size())
			last_add.pop();
		s.insert({-1, -1});
		s.insert({n + 1, n + 1});
	}
	void add(int l, int r) {
		int L = l, R = r;
		auto it = s.lower_bound({l, 0});
		auto p = --it;
		++it;
		if ((*p).second > l) {
			it = p;
			L = min(L, (*p).first);
		}
		vector<pair<int, int>> vec;
		while ((*it).first < r) {
			auto nx = ++it;
			--it;
			R = max(R, (*it).second);
			vec.push_back(*it);
			++it;
		}
		for (auto it: vec)
			s.erase(it);
		s.insert({L, R});
		last_rem.push(vec);
		last_add.push({L, R});
	}
	int size() {
		return (int)(s.size());
	}
	void Undo() {
		vector<pair<int, int>> lst = last_rem.top();
		pair<int, int> last = last_add.top();
		last_add.pop(), last_rem.pop();
		s.erase(last);
		for (auto x: lst)
			s.insert(x);
	}
} nice;
 
int solve(int s = 0, int e = n) {
	if (s + 1 == e) 
		return nice.size();
	int mid = s + e >> 1, ans = 0;
	for (int i = s; i < mid; i++)
		nice.add(l[i], r[i]);
	ans = max(ans, solve(mid, e));
	for (int i = s; i < mid; i++)
		nice.Undo();
	for (int i = mid; i < e; i++)
		nice.add(l[i], r[i]);
	ans = max(ans, solve(s, mid));
	for (int i = mid; i < e; i++)
		nice.Undo();
	return ans;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n;
		nice = SEGS(n * 2 + 10);
		vector<int> all;
		for (int i = 0; i < n; i++) {
			cin >> l[i] >> r[i];
			r[i]++;
			all.push_back(l[i]), all.push_back(r[i]);
		}
		sort(all.begin(), all.end());
		all.resize(unique(all.begin(), all.end()) - all.begin());
		for (int i = 0; i < n; i++) {
			l[i] = lower_bound(all.begin(), all.end(), l[i]) - all.begin();
			r[i] = lower_bound(all.begin(), all.end(), r[i]) - all.begin();
		}
		cout << solve() - 2 << '\n';
	}
	return 0;
}
