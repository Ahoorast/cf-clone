#include<bits/stdc++.h>
using namespace std;
 
const int N = 5 * 1000 * 100 + 10;
int n, seg[(N << 2) + 100];
 
struct bad_struct {
	int a, b, c;
} p[N];
 
void upd(int x, int w, int l = 0, int r = N, int id = 1) {
	if (l + 1 == r) {
		seg[id] = max(seg[id], w);
		return;
	}
	int mid = l + r >> 1;
	(x < mid? upd(x, w, l, mid, id << 1): upd(x, w, mid, r, id << 1 | 1));
	seg[id] = max(seg[id << 1], seg[id << 1 | 1]);
}
 
int get(int s, int e = N, int l = 0, int r = N, int id = 1) {
	if (s <= l && e >= r)
		return seg[id];
	if (s >= r || e <= l)
		return seg[0];
	int mid = l + r >> 1;
	return max(get(s, e, l, mid, id << 1), get(s, e, mid, r, id << 1 | 1));
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> p[i].a;
	vector<int> vec;
	for (int i = 0; i < n; i++) {
		cin >> p[i].b;
		vec.push_back(p[i].b);
	}
	for (int i = 0; i < n; i++)
		cin >> p[i].c;
	sort(vec.begin(), vec.end());
	vec.resize(unique(vec.begin(), vec.end()) - vec.begin());
	for (int i = 0; i < n; i++) 
		p[i].b = lower_bound(vec.begin(), vec.end(), p[i].b) - vec.begin() + 1;
	sort(p, p + n, [](bad_struct x, bad_struct y) {
			return (x.a != y.a? x.a < y.a: x.b > y.b);
			});
	int ans = 0;
	//for (int i = 0; i < n; i++)
	//	cout << p[i].a << ' ';
	//cout << '\n';
	//for (int i = 0; i < n; i++)
	//	cout << p[i].b << ' ';
	//cout << '\n';
	//for (int i = 0; i < n; i++)
	//	cout << p[i].c << ' ';
	//cout << '\n';
	for (int i = n - 1; i >= 0; i--) {
		ans += (get(p[i].b + 1) > p[i].c);
		upd(p[i].b, p[i].c);
	//	cout << p[i].c << '\n';
	//	cout << seg[1] << '\n';
	}
	cout << ans << '\n';
	return 0;
}
