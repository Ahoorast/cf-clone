#include<bits/stdc++.h>
using namespace std;
 
const int N = 1010, C = 50;
int n, m, K, a[N][N], d[C][N][N], D[N], dx[4] = {1, -1, 0, 0}, dy[4] = {0, 0, -1, 1};
vector<pair<int, int>> vert[C];
bool mark[C], vis[N][N];
 
bool vld(int x, int y) {
	return x >= 1 && y >= 1 && x <= n && y <= m;
}
 
void bfs(int c) {
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			vis[i][j] = false;
	for (int i = 1; i <= K; i++)
		mark[i] = false;
	mark[c] = true;
	queue<pair<int, int>> q;
	for (auto x: vert[c]) {
		q.push(x);
		vis[x.first][x.second] = true;
	}
	while (q.size()) {
		pair<int, int> tm = q.front();
		q.pop();
		int x = tm.first, y = tm.second, dd = d[c][x][y];
		for (int i = 0; i < 4; i++) {
			int nx = dx[i] + x, ny = dy[i] + y;
			if (vld(nx, ny) && !vis[nx][ny]) {
				vis[nx][ny] = true;
				d[c][nx][ny] = dd + 1;
				q.push({nx, ny});
			}
		}
		if (!mark[a[x][y]]) {
			mark[a[x][y]] = true;
			for (auto it: vert[a[x][y]]) {
				int nx = it.first, ny = it.second;
				if (!vis[nx][ny]) {
					d[c][nx][ny] = dd + 1;
					q.push({nx, ny});
					vis[nx][ny] = true;
				}
			}
		}
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> K;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++) {
			cin >> a[i][j];
			vert[a[i][j]].push_back({i, j});
		}
	for (int i = 1; i <= K; i++) 
		bfs(i);
	int Q;
	cin >> Q;
	while (Q--) {
		int r1, c1, r2, c2;
		cin >> r1 >> c1 >> r2 >> c2;
		int ans = abs(r1 - r2) + abs(c1 - c2);
		for (int i = 1; i <= K; i++)
			ans = min(ans, d[i][r1][c1] + d[i][r2][c2] + 1);
		cout << ans << '\n';
	}
	return 0;
}
