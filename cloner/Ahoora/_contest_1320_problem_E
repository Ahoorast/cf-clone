#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, LG = 22;
int n, st[N], en[N], h[N], par[N][LG], imp[N], vv[N], ss[N], TM, col[N];
bool fix[N];
vector<int> adj[N]; 
vector<pair<int, int>> T[N];
 
void dfs_lca(int v) {
	st[v] = ++TM;
	for (int i = 1; i < LG; i++)
		par[v][i] = par[par[v][i - 1]][i - 1];
	for (auto u: adj[v])
		if (u != par[v][0]) {
			par[u][0] = v, h[u] = h[v] + 1;
			dfs_lca(u);
		}
	en[v] = ++TM;
}
 
int k_par(int v, int k) {
	for (int i = 0; i < LG; i++)
		if ((1 << i) & k)
			v = par[v][i];
	return v;
}
 
int lca(int v, int u) {
	if (h[v] < h[u])
		swap(v, u);
	v = k_par(v, h[v] - h[u]);
	if (v == u)
		return v;
	for (int i = LG - 1; i >= 0; i--)
		if (par[v][i] != par[u][i])
			v = par[v][i], u = par[u][i];
	return par[v][0];
}
 
int dis(int v, int u) {
	return h[v] + h[u] - 2 * h[lca(v, u)];
}
 
void aux(vector<int> &ver) {
	sort(ver.begin(), ver.end(), [](int v, int u) {
			return st[v] < st[u];
			});
	ver.resize(unique(ver.begin(), ver.end()) - ver.begin());
	int sz = (int)(ver.size());
	for (int i = 1; i < sz; i++) 
		ver.push_back(lca(ver[i], ver[i - 1]));
	sort(ver.begin(), ver.end(), [](int v, int u) {
			return st[v] < st[u];
			});
	ver.resize(unique(ver.begin(), ver.end()) - ver.begin());
	stack<int> s;
	s.push(ver[0]);
	sz = (int)(ver.size());
	for (int i = 1; i < sz; i++) {
		while (!(st[s.top()] <= st[ver[i]] && en[s.top()] >= en[ver[i]]))
			s.pop();
		int d = dis(s.top(), ver[i]); 
		T[s.top()].push_back({ver[i], d});
		T[ver[i]].push_back({s.top(), d});
		s.push(ver[i]);
	}
}
 
struct state {
	int i, d;
	state(int a = 1 << 30, int b = 1 << 30) {
		d = a, i = b;
	}
	pair<int, int> dis() const {
		if (i == 1 << 30)
			return {1 << 30, 1 << 30};
		return {(d + ss[i] - 1) / ss[i], i};
	}
	bool operator < (state b) const {
		return dis() < b.dis();
	}
	state operator + (int w) const {
		state res = *this;
		res.d += w;
		return res;
	}
} d[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	} 
	dfs_lca(1);
	int Q;
	cin >> Q;
	while (Q--) {
		vector<int> ver;
		int k, m;
		cin >> k >> m;
		for (int i = 1; i <= k; i++) {
			cin >> vv[i] >> ss[i]; 
			ver.push_back(vv[i]);
		}
		for (int i = 1; i <= m; i++) {
			cin >> imp[i];
			ver.push_back(imp[i]);
		}
		aux(ver);
		set<pair<state, int>> q;
		for (int i = 1; i <= k; i++) 
			q.insert({d[vv[i]] = state(0, i), vv[i]});
		while (q.size()) {
			auto it = *q.begin();
			q.erase(q.begin());
			int v = it.second;
			for (auto u: T[v]) {
				state nd = d[v] + u.second;
				if (nd < d[u.first]) {
					q.erase({d[u.first], u.first});
					d[u.first] = nd;
					q.insert({d[u.first], u.first});
				}
			}
		}
		for (int i = 1; i <= m; i++) 
			cout << d[imp[i]].i << ' ';
		cout << '\n';
		for (auto v: ver)
			T[v].clear(), ss[v] = 0, d[v] = state(), fix[v] = false;
	}
	return 0;
}
