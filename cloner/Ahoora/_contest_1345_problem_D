#include<bits/stdc++.h>
using namespace std;
 
const int N = 1010;
bool vis[N][N], row[N], col[N], Row[N], Col[N];
char c[N][N];
int n, m, dx[4] = {0, 0, -1, 1}, dy[4] = {1, -1, 0, 0};
 
bool vld(int x, int y) {
	return x >= 1 && x <= n && y >= 1 && y <= m && !vis[x][y] && c[x][y] == '#';
}
 
void dfs(int x, int y) {
	vis[x][y] = true;
	for (int i = 0; i < 4; i++) {
		int nx = dx[i] + x, ny = dy[i] + y;
		if (vld(nx, ny))
			dfs(nx, ny);
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 0; i <= n + 1; i++)
		for (int j = 0; j <= m + 1; j++)
			c[i][j] = '.';
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			cin >> c[i][j];
	for (int i = 1; i <= n; i++) {
		int l = m + 1, r = 0, cnt = 0;
		for (int j = 1; j <= m; j++) 
			if (c[i][j] == '#')
				l = min(l, j), r = max(r, j), cnt++;
		if (cnt != max(0, r - l + 1))
			return cout << -1 << endl, 0;
		row[i] = cnt == 0;
	}
	for (int j = 1; j <= m; j++) {
		int l = n + 1, r = 0, cnt = 0;
		for (int i = 1; i <= n; i++)
			if (c[i][j] == '#')
				l = min(l, i), r = max(r, i), cnt++;
		if (cnt != max(0, r - l + 1))
			return cout << -1 << endl, 0;
		col[j] = cnt == 0;
	}
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			if ((col[j] && row[i]) || c[i][j] == '#')
				Row[i] = Col[j] = true;
	for (int i = 1; i <= n; i++)
		if (!Row[i])
			return cout << -1 << endl, 0;
	for (int j = 1; j <= m; j++)
		if (!Col[j])
			return cout << -1 << endl, 0;
	int ans = 0;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			if (vld(i, j))
				dfs(i, j), ans++;
	cout << ans << endl;
	return 0;
}
