#include<bits/stdc++.h>
using namespace std;
 
const int N = 1010;
int n, m, comp[N][N], sz[N * N + 100], cnt, dx[4] = {0, 0, -1, +1}, dy[4] = {1, -1, 0, 0}, d[N][N];
char c[N][N];
bool vis[N][N];
 
bool vld(int x, int y) {
	return x >= 1 && x <= n && y >= 1 && y <= m && !comp[x][y];
}
 
void dfs(int x, int y, char ch) {
	comp[x][y] = cnt;
	sz[cnt]++;
	for (int i = 0; i < 4; i++) {
		int nx = x + dx[i], ny = y + dy[i];
		if (vld(nx, ny) && c[nx][ny] == ch)
			dfs(nx, ny, ch);
	}
}
 
bool vld1(int x, int y) {
	return x >= 1 && x <= n && y >= 1 && y <= m && !vis[x][y];
}
 
void doshit() {
	queue<pair<int, int>> q;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			if (sz[comp[i][j]] > 1)
				q.push({i, j}), vis[i][j] = true;
	while (q.size()) {
		pair<int, int> x = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x.first + dx[i], ny = x.second + dy[i];
			if (vld1(nx, ny))
				q.push({nx, ny}), vis[nx][ny] = true, d[nx][ny] = d[x.first][x.second] + 1;
		}
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> m >> Q;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			cin >> c[i][j];
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			if (vld(i, j)) {
				cnt++;
				dfs(i, j, c[i][j]);
			}
	doshit();
	while (Q--) {
		int x, y;
		long long p;
		cin >> x >> y >> p;
		if (sz[comp[x][y]] > 1) 
			cout << (c[x][y] - '0' + (p % 2)) % 2 << '\n';
		else {
			if (d[x][y] == 0)
				cout << c[x][y] - '0' << '\n';
			else if (d[x][y] > p - 1)
				cout << c[x][y] - '0' << '\n';
			else
				cout << (c[x][y] - '0' + ((p - 1LL * d[x][y]) % 2)) % 2 << '\n';
		}
	}
	return 0;
}
