#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100;
long long n, d[N], x;
 
long long cal(long long n) {
	return 1LL * n * (n + 1) / 2;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> x;
	long long S = 0, S1 = 0;
	for (int i = 1; i <= n; i++)
		cin >> d[i], S += d[i], S1 += cal(d[i]);
	int i = 0, j = 1;
	long long ans = 0, sum = cal(d[1]), ted = d[1], y = S - x, mn = 1LL << 60;
	while (j <= n) {
		sum -= cal(d[i]), ted -= d[i];
		i++;
		while (ted <= x && j <= n) {
			long long delta = x - ted;
			ans = max(ans, cal(d[i - 1]) - cal(max(0LL, d[i - 1] - delta)) + cal(min(d[j + 1], max(0LL, delta - d[i - 1]))) + sum);
			j++;
			ted += d[j], sum += cal(d[j]);
		}
	}
	i = 0, j = 1, sum = cal(d[1]), ted = d[1];
	while (j <= n) {
		sum -= cal(d[i]), ted -= d[i];
		i++;
		while (ted <= y && j <= n) {
			long long delta = y - ted, t = sum;
			t += cal(min(d[j + 1], delta)), delta -= min(delta, d[j + 1]);
			if (d[i - 1] >= delta)
				mn = min(mn, t + cal(d[i - 1]) - cal(d[i - 1] - delta));
			j++;
			ted += d[j], sum += cal(d[j]);
		}
	}
	for (i = 1; i <= n; i++) {
		if (d[i] >= x)
			ans = max(ans, cal(d[i]) - cal(d[i] - x));
		if (d[i] >= y)
			mn = min(mn, cal(y));
	}
	cout << max(ans, S1 - mn) << '\n';
	return 0;
}
