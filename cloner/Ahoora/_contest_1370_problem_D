#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int a[N], n, K, dp[N], nxt[N];
bool mark[N], debug;
 
bool check(int x) {
	for (int i = 1; i <= n; i++)
		mark[i] = a[i] > x, dp[i] = 0;
	nxt[n + 1] = n + 1;
	for (int i = n; i >= 1; i--)
		if (mark[i + 1])
			nxt[i] = i + 1;
		else
			nxt[i] = nxt[i + 1];
	bool flag = false;
	int l = n, r = 1, ans = 0;
	for (int i = 1; i <= n; i++) 
		if (mark[i])
			l = min(l, i), r = max(r, i);
	if (l >= r)
		return true;
	ans += l - 1 + n - r;
	while (nxt[l] != n + 1) {
		if (nxt[l] == l + 1)
			l = nxt[l];
		else {
			int t = nxt[l] - l - 1;
			ans += t - (t % 2 == 0) + 1;
			l = nxt[l];
		}
	}
	return (ans + 1) >= K;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> K;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	int l = 1, r = 1LL * 1000 * 1000 * 1000 + 100;
	while (l < r) {
		int mid = l + r >> 1;
		if (check(mid)) 
			r = mid;
		else
			l = mid + 1;
	}
	cout << r << '\n';
	return 0;
}
