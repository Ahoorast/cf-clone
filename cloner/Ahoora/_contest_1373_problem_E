#include<bits/stdc++.h>
using namespace std;
 
int n, K;
 
long long solve(int x) {
	vector<int> vec;
	while (x >= 9) 
		vec.push_back(9), x -= 9;
	if (x)
		vec.push_back(x);
	long long res = 0;
	int sz = vec.size();
	for (int i = sz - 1; i >= 0; i--)
		res = res * 10 + vec[i];
	return res;
}
 
void test() {
	cin >> n >> K;
	long long ans = 1LL << 60;
	bool found = false;
	for (int i = 0; i <= 9 - K; i++) {
		int t = n - i * (K + 1) - K * (K + 1) / 2;
		if (t % (K + 1) == 0 && t >= 0) {
			t /= (K + 1);
			found = true;
			ans = min(ans, solve(t) * 10 + i);
		}
	}
	for (int i = 9 - K + 1; i <= 9; i++) {
		int s1 = (45 - i * (i - 1) / 2), k1 = 9 - i + 1, k2 = K + 1 - k1, s2 = (k2 - 1) * k2 / 2;
		int t = n - s1 - s2, td = 0;
		while (t >= 0) {
			for (int j = 0; j <= 8; j++) {
				int tmp = t - j * k1 - (j + 1) * k2;
				if (tmp % (k1 + k2) == 0 && tmp >= 0) {
					long long mn = solve((tmp) / (k1 + k2));
					mn = mn * 10 + j;
					for (int k = 0; k < td; k++)
						mn = mn * 10 + 9;
					mn = mn * 10 + i;
					ans = min(ans, mn);
					found = true;
				}
			}
			td++;
			t -= k1 * 9;
		}
	}
	cout << (found? ans: -1) << '\n';
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) 
		test();
	return 0;
}
