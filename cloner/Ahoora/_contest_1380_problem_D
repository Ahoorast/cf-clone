#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int n, m, k, a[N], b[N], s[N];
long long x, y;
 
long long solve(int L, int R) {
	if (L > R)
		return 0LL;
	int prv = a[L - 1], nxt = a[R + 1], t = R - L + 1, lft = R, rgh = L;
	int mx = a[L];
	for (int i = L; i <= R; i++) {
		mx = max(mx, a[i]);
		if (a[i] > max(prv, nxt))
			lft = min(lft, i), rgh = i;
	}
	if (t < k) {
		if (max(prv, nxt) < mx) {
			cout << "-1\n";
			exit(0);
		}
		return t * y;
	}
	if (y * k >= x)
		return x * (t / k) + y * (t % k);
	if (max(prv, nxt) > mx)
		return y * t;
	if ((rgh - lft + 1) >= k) 
		return x + ((rgh - lft + 1) - k) * y + (t - (rgh - lft + 1)) * y;
	if ((lft + k - 1 <= R) || (rgh - k + 1) >= L) 
		return x + (t - k) * y;
	cout << "-1\n";
	exit(0);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> x >> k >> y;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1; i <= m; i++)
		cin >> b[i];
	if (m > n)
		return cout << "-1\n", 0;
	for (int j = 1; j <= m; j++) {
		s[j] = s[j - 1] + 1;
		while (b[j] != a[s[j]] && s[j] <= n)
			s[j]++;
		if (a[s[j]] != b[j])
			return cout << "-1\n", 0;
	}
	s[m + 1] = n + 1;
	long long ans = 0;
	for (int i = 1; i <= m + 1; i++) 
		ans += solve(s[i - 1] + 1, s[i] - 1);
	cout << ans << '\n';
	return 0;
}
