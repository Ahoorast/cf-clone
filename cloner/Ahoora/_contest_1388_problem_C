#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
long long g[N], n, m, h[N], p[N], sum[N], b[N];
vector<int> adj[N];
 
void dfs(int root, int par = -1) {
	for (auto u: adj[root])
		if (u ^ par) {
			dfs(u, root);
			sum[root] += sum[u];
		}
	sum[root] += p[root];
}
 
bool dfscheck(int root, int par = -1) {
	long long sm = 0;
	for (auto u: adj[root])
		if (u ^ par) 
			sm += g[u];
	bool res = true;
	res &= (sm <= g[root]);
	for (auto u: adj[root])
		if (u ^ par)
			res &= dfscheck(u, root);
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n >> m;
		for (int i = 1; i <= n; i++)
			cin >> p[i];
		for (int i = 1; i <= n; i++)
			cin >> h[i];
		for (int i = 1, v, u; i < n; i++) {
			cin >> v >> u;
			adj[v].push_back(u);
			adj[u].push_back(v);
		}
		dfs(1);
		bool flag = true;
		for (int i = 1; i <= n; i++) {
			long long G = sum[i] + h[i];
			if (G % 2 != 0)
				flag = false;
			else 
				g[i] = G / 2;
			b[i] = sum[i] - g[i];
			if (g[i] < 0 || b[i] < 0)
				flag = false;
		}
		if (flag) 
			flag &= dfscheck(1);
		cout << (flag? "YES": "NO") << '\n';
		for (int i = 1; i <= n; i++) {
			g[i] = h[i] = p[i] = sum[i] = b[i] = 0;
			adj[i].clear();
		}
	}
	return 0;
}
