#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
long long n, a[N], b[N], dg[N], ans;
vector<int> res, adj[N];
bool vis[N], mark[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	queue<int> q;
	for (int i = 1; i <= n; i++) {
		cin >> b[i];
		if (b[i] != -1) 
			dg[b[i]]++, adj[b[i]].push_back(i);
	}
	set<pair<int, int>> s;
	for (int i = 1; i <= n; i++)
		s.insert({dg[i], i});
	while (s.size()) {
		auto it = *s.begin();
		s.erase(s.begin());
		if (a[it.second] > 0) {
			mark[it.second] = true;
			ans += a[it.second], res.push_back(it.second);
			if (b[it.second] != -1)
				a[b[it.second]] += a[it.second];
		}
		if (b[it.second] != -1) {
			int u = b[it.second];
			s.erase({dg[u], u});
			dg[u]--;
			s.insert({dg[u], u});
		}
	}	
	for (int i = 1; i <= n; i++)
		vis[i] = false;
	for (int i = 1; i <= n; i++)
		if (!mark[i]) {
			if (b[i] == -1 || mark[b[i]])
				q.push(i), vis[i] = true;
		}
	while (q.size()) {
		int x = q.front();
		q.pop();
		ans += a[x], res.push_back(x), mark[x] = true;
		if (b[x] != -1)
			a[b[x]] += a[x];
		for (auto u: adj[x])
			if (!mark[u] && !vis[u])
				q.push(u), vis[u] = true;
	}
	cout << ans << '\n';
	for (auto x: res)
		cout << x << ' ';
	cout << '\n';
	return 0;
}
