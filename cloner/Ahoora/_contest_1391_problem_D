#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 1000 + 10;
int ans[N][4], dp[N][10], n, m;
vector<int> adj[10];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	bool c[n + 10][m + 10] = {0};
	for (int i = 1; i <= n; i++) {
		string s;
		cin >> s;
		for (int j = 1; j <= m; j++) 
			c[i][j] = s[j - 1] - '0';
	}
	if (n > 3 && m > 3)
		return cout << "-1\n", 0;
	if (n == 1 || m == 1)
		return cout << "0\n", 0;
	if (n == 2) {
		for (int j = 1; j <= m; j++) {
			ans[j][0] = (c[1][j] + c[2][j]) + ans[j - 1][1];
			ans[j][1] = (c[1][j] == c[2][j]) + min(ans[j - 1][0], ans[j - 1][2]);
			ans[j][2] = ((!c[1][j]) + (!c[2][j])) + ans[j - 1][1];
		}
		cout << min({ans[m][0], ans[m][1], ans[m][2]}) << '\n';
		return 0;
	}
	for (int i = 0; i < 8; i++)
		for (int j = 0; j < 8; j++) {
			int d1[3] = {i % 2, (i / 2) % 2, (i / 2 / 2) % 2};
			int d2[3] = {j % 2, (j / 2) % 2, (j / 2 / 2) % 2};
			bool flag = true;
			for (int t = 0; t <= 1; t++)
				if ((d1[t] + d1[t + 1] + d2[t] + d2[t + 1]) % 2 == 0)
					flag = false;
			if (flag)
				adj[i].push_back(j);
		}
	for (int i = 1; i <= m; i++) 
		for (int j = 0; j < 8; j++) {
			for (int k = 1; k <= 3; k++) {
				bool x = (bool)((1 << (k - 1)) & j);
				bool y = c[k][i];
				if (x != y)
					dp[i][j]++;
			}
			int t = 1 << 30;
			for (auto u: adj[j])
				t = min(t, dp[i - 1][u]);
			dp[i][j] += t;
		}
	int ans = 1 << 30;
	for (int j = 0; j < 8; j++)
		ans = min(ans, dp[m][j]);
	cout << ans << '\n';
	return 0;
}
