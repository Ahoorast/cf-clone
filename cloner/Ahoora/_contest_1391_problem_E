#include<bits/stdc++.h>
using namespace std;
 
const int N = 5 * 1000 * 100 + 10;
int n, m, h[N], sz[N], p[N];
vector<int> adj[N], vec[N];
bool vis[N];
 
void dfs(int root, int par = 0) {
	h[root] = h[par] + 1;
	vec[h[root]].push_back(root), sz[h[root]]++;
	p[root] = par;
	vis[root] = true;
	for (auto u: adj[root])
		if (!vis[u])
			dfs(u, root);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n >> m;
		for (int i = 1; i <= n; i++)
			adj[i].clear(), vis[i] = false, h[i] = 0;
		for (int i = 1, v, u; i <= m; i++) {
			cin >> v >> u;
			adj[v].push_back(u);
			adj[u].push_back(v);
		}
		dfs(1);
		bool flag = false;
		for (int i = 1; i <= n; i++)
			if (!flag && h[i] >= (n + 1) / 2) {
				flag = true;
				cout << "PATH\n" << h[i] << '\n';
				int v = i;
				while (v) {
					cout << v << ' ';
					v = p[v];
				}
				cout << '\n';
			}
		if (!flag) {
			cout << "PAIRING\n";
			vector<pair<int, int>> ans;
			for (int i = 1; i <= n; i++) 
				for (int j = 0; j + 1 < sz[i]; j += 2)
					ans.push_back({vec[i][j], vec[i][j + 1]});
			cout << (int)(ans.size()) << '\n';
			for (auto it: ans)
				cout << it.first << ' ' << it.second << '\n';
		}
		for (int i = 1; i <= n; i++)
			vec[i].clear(), sz[i] = 0;
	}
	return 0;
}
