#include<bits/stdc++.h>
using namespace std;
 
const int N = 210;
long long dp[N][N][N], r[N], g[N], b[N], R, G, B;
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> R >> G >> B;
	for (int i = 2; i <= R + 1; i++)
		cin >> r[i];
	for (int i = 2; i <= G + 1; i++)
		cin >> g[i];
	for (int i = 2; i <= B + 1; i++)
		cin >> b[i];
	sort(r + 2, r + R + 2);
	sort(g + 2, g + G + 2);
	sort(b + 2, b + B + 2);
	for (int i = 0; i <= R + 1; i++)
		for (int j = 0; j <= G + 1; j++)
			for (int k = 0; k <= B + 1; k++) {
				int ind[3] = {i, j, k};
				for (int a = 0; a < 3; a++)
					for (int B = 0; B < 3; B++)
						if (ind[a] > 0 && ind[B] > 0) {
							ind[a]--, ind[B]--;
							if (a == B)
								ind[a]++;
							dp[i][j][k] = max(dp[i][j][k], dp[ind[0]][ind[1]][ind[2]]);
							long long x = 0;
							if (a == 0 && B == 1)
								x = r[i] * g[j];
							else if (a == 0 && B == 2)
								x = r[i] * b[k];
							else if (a == 1 && B == 2)
								x = g[j] * b[k];
							dp[i][j][k] = max(dp[i][j][k], dp[ind[0]][ind[1]][ind[2]] + x);
							ind[0] = i, ind[1] = j, ind[2] = k;
						}
			}
	cout << dp[R + 1][G + 1][B + 1] << '\n';
	return 0;
}
