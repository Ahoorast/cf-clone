#include<bits/stdc++.h>
using namespace std;
 
const int N = 6100;
int l[N], r[N], n, dp[N][N];
vector<int> vec[N];
 
void compress() {
	vector<int> vec;
	for (int i = 0; i < n; i++)
		vec.push_back(l[i]), vec.push_back(r[i]);
	sort(vec.begin(), vec.end());
	vec.resize(unique(vec.begin(), vec.end()) - vec.begin());
	for (int i = 0; i < n; i++) {
		l[i] = lower_bound(vec.begin(), vec.end(), l[i]) - vec.begin();
		r[i] = lower_bound(vec.begin(), vec.end(), r[i]) - vec.begin();
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n;
		for (int i = 1; i <= n * 2 + 10; i++)
			vec[i].clear();
		for (int i = 0; i < n; i++)
			cin >> l[i] >> r[i];
		compress();
		for (int i = 0; i < n; i++)
			l[i]++, r[i]++;
		for (int i = 0; i < n; i++)
			vec[r[i]].push_back(i);
		for (int i = 0; i <= 2 * n + 10; i++)
			for (int j = 0; j <= 2 * n + 10; j++)
				dp[i][j] = 0;
		for (int i = 2 * n + 10; i >= 1; i--)
			for (int j = i; j <= 2 * n + 10; j++) {
				dp[i][j] = dp[i][j - 1];
				int cnt = 0;
				for (auto x: vec[j]) {
					int L = l[x], R = r[x];
					if (L > i) 
						dp[i][j] = max(dp[i][j], dp[i][L - 1] + dp[L][R]);
					else if (L == i)
						cnt++;
				}
				dp[i][j] += cnt;
			}
		cout << dp[1][2 * n + 10] << '\n';
	}
	return 0;
}
