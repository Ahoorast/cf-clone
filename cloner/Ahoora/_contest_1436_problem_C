#include<bits/stdc++.h>
using namespace std;
 
const int mod = 1LL * 1000 * 1000 * 1000 + 7, N = 1000 + 10;
int n, x, pos, c1[N], c2[N], fact[N], inv[N];
long long ans;
vector<int> sat1, sat2;
 
long long Pow(long long a, long long b) {
	return b? (b & 1? a: 1) % mod * Pow(a * a % mod, b >> 1) % mod: 1;
}
 
int C(int r, int n) {
	if (r > n)
		return 0;
	if (r < 0)
		return 0;
	return 1LL * fact[n] * inv[r] % mod * inv[n - r] % mod;
}
 
void bt(int l = 0, int r = n) {
	if (!(l < r)) {
		if (l > 0 && l - 1 == pos) {
			int cnt1 = 0, cnt2 = 0;
			for (int i = 0; i < n; i++) {
				if (c1[i])
					cnt1++;
				else if (c2[i])
					cnt2++;
			}
			(ans += 1LL * C(cnt1 - 1, x - 1) * fact[cnt1 - 1] % mod * C(cnt2, n - x) % mod*  fact[cnt2] % mod * fact[n - cnt1 - cnt2] % mod) %= mod;
		}
		return;
	}
	int m = l + r >> 1;
	int i = m;
	if (!c2[i]) {
		c1[i]++;
		bt(m + 1, r);
		c1[i]--;
	}
	if (!c1[i]) {
		c2[i]++;
		bt(l, m);
		c2[i]--;
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	fact[0] = 1;
	for (int i = 1; i < N; i++)
		fact[i] = 1LL * fact[i - 1] * i % mod;
	inv[N - 1] = Pow(fact[N - 1], mod - 2);
	for (int i = N - 2; i >= 0; i--)
		inv[i] = 1LL * inv[i + 1] * (i + 1) % mod;
	cin >> n >> x >> pos;
	c1[pos]++;
	bt();
	cout << ans << '\n';
	return 0;
}
