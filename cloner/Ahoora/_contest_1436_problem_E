#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 100;
int n, a[N], seg[N << 2];
bool qualify[N];
vector<int> vec[N];
vector<pair<int, int>> query[N];
 
void upd(int p, int x, int l = 1, int r = n + 10, int id = 1) {
	if (l + 1 == r) {
		seg[id] = x;
		return;
	}
	int mid = l + r >> 1;
	p < mid? upd(p, x, l, mid, id << 1): upd(p, x, mid, r, id << 1 | 1);
	seg[id] = min(seg[id << 1], seg[id << 1 | 1]);
}
 
int find(int x, int l = 1, int r = n + 10, int id = 1) {
	if (l + 1 == r) 
		return l;
	int mid = l + r >> 1;
	return (seg[id << 1] < x? find(x, l, mid, id << 1): find(x, mid, r, id << 1 | 1));
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	for (int i = 0; i < N << 2; i++)
		seg[i] = -1;
	cin >> n;
	for (int i = 0; i < N; i++)
		vec[i].push_back(-1);
	for (int i = 0; i < n; i++)
		cin >> a[i], vec[a[i]].push_back(i);
	for (int i = 0; i < N; i++)
		vec[i].push_back(n);
	if ((int)(vec[1].size()) == 2)
		return cout << "2\n", 0;
	if ((int)(vec[1].size()) == n + 2)
		return cout << "1\n", 0;
	for (int i = 1; i <= n; i++)
		for (auto x: vec[i]) 
			if (x >= 0 && x < n) {
				auto it = upper_bound(vec[i + 1].begin(), vec[i + 1].end(), x);
				int r = *it, l = *--it + 1;
				query[r].push_back({l, i + 1});
			}
	for (int i = 0; i < n; i++) {
		upd(a[i], i);
		for (auto it: query[i + 1]) 
			qualify[it.second - 1] |= (find(it.first) == it.second);
	}
	for (int i = 1; i <= n; i++)
		if (!qualify[i])
			return cout << i + 1 << '\n', 0;
	cout << n + 2 << '\n';
	return 0;
}
