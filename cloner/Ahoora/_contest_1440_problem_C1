#include<bits/stdc++.h>
using namespace std;
 
const int N = 110;
int n, m;
vector<pair<int, int>> ans;
string s[N];
 
bool vld(int x, int y) {
	return x >= 0 && y >= 0 && x < n && y < m;
}
 
void solve(int i, int j) {
	int cnt = 0;
	for (int x = 0; x <= 1; x++)
		for (int y = 0; y <= 1; y++)
			cnt += s[i + x][j + y] - '0';
 
	if (cnt == 0)
		return;
	int c[2] = {2, 1};
	if (cnt >= 3)
		c[0] = 0, c[1] = 3;
	for (int x = 0; x <= 1; x++)
		for (int y = 0; y <= 1; y++)
			if (c[s[i + x][j + y] - '0']) {
				c[s[i + x][j + y] - '0']--;
				ans.push_back({i + x, j + y});
				s[i + x][j + y] = !(s[i + x][j + y] - '0') + '0';
			}
	solve(i, j);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n >> m;
		for (int i = 0; i < n; i++)
			cin >> s[i];
		if (n & 1) {
			int i = n - 1;
			for (int j = 0; j < m; j++)
				if (s[i][j] == '1') {
					ans.push_back({i, j});
					s[i][j] = '0';
					int c = 0;
					for (int x = -1; x <= 1; x++) 
						if (c <= 1 && vld(i - 1, j + x)) {
							ans.push_back({i - 1, j + x});
							s[i - 1][j + x] = !(s[i -1 ][j + x] - '0') + '0';
							c++;
						}
				}
		}
		if (m & 1) {
			int j = m - 1;
			for (int i = 0; i < n; i++)
				if (s[i][j] == '1') {
					ans.push_back({i, j});
					s[i][j] = '0';
					int c = 0;
					for (int x = -1; x <= 1; x++) 
						if (c <= 1 && vld(i + x, j - 1)) {
							ans.push_back({i + x, j - 1});
							s[i + x][j - 1] = !(s[i + x][j - 1] - '0') + '0';
							c++;
						}
				}
		} 
		for (int i = 0; i + 1 < n; i += 2)
			for (int j = 0; j + 1 < m; j += 2) {
				solve(i, j);
			}
		int sz = (int)(ans.size());
		cout << sz / 3;
		for (int i = 0; i < sz; i++) {
			if (i % 3 == 0)
				cout << '\n';
			cout << ans[i].first + 1 << ' ' << ans[i].second + 1 << ' ';
		}
		cout << '\n';
		ans.clear();
		for (int i = 0; i < n; i++)
			s[i].clear();
	}
	return 0;
}
