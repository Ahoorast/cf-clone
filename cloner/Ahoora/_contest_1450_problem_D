#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 10;
int n, a[N], L[N], R[N], want[N];
bool mark[N];
vector<pair<int, int>> vec[N];
 
int get_l(int i, int x) {
	return a[i] < x? i: get_l(L[i], x);
}
 
int get_r(int i, int x) {
	return a[i] < x? i: get_r(R[i], x);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n;
		for (int i = 0; i <= n + 1; i++)
			a[i] = 0;
		for (int i = 1; i <= n; i++)
			cin >> a[i];
		for (int i = 1; i <= n; i++)
			L[i] = get_l(i - 1, a[i]);
		for (int i = n; i >= 1; i--)
			R[i] = get_r(i + 1, a[i]);
		for (int i = 1; i <= n; i++)
			want[i] = -1;
		int mx = 0;
		for (int i = 1; i <= n; i++) {
			int l = L[i] + 1, r = R[i] - 1;
			if (l < i && r > i) 
				mx = max(mx, r - l + 1);
			want[a[i]] = max(want[a[i]], r - l + 1);
			vec[a[i]].push_back({l, r});
		}
		for (int i = 1; i <= n; i++) {
			int sz = (int)(vec[i].size());
			if (sz > 1)
				for (auto it: vec[i])
					mx = max(mx, it.second - it.first + 1);
		}
		for (int i = 1; i <= n; i++)
			vec[a[i]].clear();
		for (int i = 1; i <= n; i++)
			mark[i] = true;
		for (int i = 2; i < mx; i++)
			mark[i] = false;
		want[0] = 1 << 30;
		for (int i = 1; i <= n; i++)
			want[i] = min(want[i - 1], want[i]);
		for (int i = 1; i <= n; i++) {
			if (want[i] < n - i + 1)
				mark[n - i + 1] = false;
		}
		set<int> s;
		for (int i = 1; i <= n; i++)
			s.insert(a[i]);
		if ((int)(s.size()) == n)
			mark[1] = true;
		else
			mark[1] = false;
		for (int i = 1; i <= n; i++)
			cout << mark[i];
		cout << '\n';
	}
	return 0;
}
