#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 10;
int n, m, p[N], x[N], y[N], cnt_col, ps, col[N], ind[N];
bool vis[N];
vector<int> adj[N], L, G[N];
vector<int> vec[N], lol;
 
void dfs(int v) {
	vis[v] = true;
	for (auto u: adj[v])
		if (!vis[u])
			dfs(u);
	L.push_back(v);
}
 
void dfs_col(int v) {
	col[v] = cnt_col;
	vec[cnt_col].push_back(v);
	ind[v] = ++ps;
	for (auto u: G[v])
		if (!col[u])
			dfs_col(u);
}
 
void dfs_kir(int v) {
	vis[col[v]] = true;
	for (auto fuck: vec[col[v]])
		for (auto u: adj[fuck])
			if (!vis[col[u]]) 
				dfs_kir(u);
	lol.push_back(col[v]);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		cin >> p[i];
		if (p[i])
			adj[p[i]].push_back(i);
	}
	for (int i = 1; i <= m; i++) {
		cin >> x[i] >> y[i];
		adj[x[i]].push_back(y[i]);
		G[x[i]].push_back(y[i]);
	}
	for (int i = 1; i <= n; i++)
		if (!vis[i])
			dfs(i);
	vector<int> pos(n + 1);
	for (int i = 0; i < n; i++)
		pos[L[i]] = i + 1;
	int cnt1 = 0, cnt2 = 0;
	for (auto v: L)
		for (auto u: adj[v]) {
			cnt1 += pos[v] < pos[u];
			cnt2 += pos[v] > pos[u];
		}
	if (cnt1 && cnt2)
		return cout << "0\n", 0;
	fill(vis, vis + N, false);
	reverse(L.begin(), L.end());
	for (auto i: L) 
		if (!col[i]) {
			cnt_col++;
			ps = 0;
			dfs_col(i);
		}
	for (int i = 1; i <= n; i++)
		if (!vis[col[i]]) 
			dfs_kir(i);
	L.clear();
	reverse(lol.begin(), lol.end());
	for (auto c: lol) {
		sort(vec[c].begin(), vec[c].end(), [](int v, int u) {
				return ind[v] < ind[u];
				});
		for (auto v: vec[c])
			L.push_back(v);
	}
	for (int i = 0; i < n; i++)
		pos[L[i]] = i + 1;
	cnt1 = cnt2 = 0;
	for (auto v: L)
		for (auto u: adj[v]) {
			cnt1 += pos[v] < pos[u];
			cnt2 += pos[v] > pos[u];
		}
	if (cnt1 && cnt2)
		return cout << "0\n", 0;
	for (int i = 1; i <= m; i++)
		if (pos[x[i]] + 1 != pos[y[i]])
			return cout << "0\n", 0;
	for (auto v: L)
		cout << v << ' ';
	cout << '\n';
	return 0;
}
