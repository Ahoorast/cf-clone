#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int n, par[N], m, k;
 
struct edge {
	int v, u, w;
	edge(int a = 0, int b = 0, int c = 0) {
		v = a, u = b, w = c;
	}
	bool operator < (edge b) const {
		return w < b.w;
	}
	bool operator == (edge b) {
		return (v == b.v && u == b.u && w == b.w);
	}
};
 
int get_par(int v) {
	return par[v] == v? v: par[v] = get_par(par[v]);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		cin >> n >> m >> k;
		iota(par, par + n + 1, 0);
		vector<edge> E;
		for (int i = 0, v, u, w; i < m; i++) {
			cin >> v >> u >> w;
			E.push_back(edge(v, u, w));
		}
		long long ans = 0;
		edge last;
		bool res = false;
		sort(E.begin(), E.end());
		for (auto e: E)
			if (get_par(e.v) != get_par(e.u)) {
				int v = e.v, u = e.u;
				v = get_par(v), u = get_par(u);
				par[u] = v;
				if (e.w >= k) {
					ans += e.w - k;
					res = true;
				}
				last = e;
			}
		if (res) 
			cout << ans << '\n';
		else {
			ans = k - last.w;
			bool flag = false;
			for (auto e: E) {
				if (e == last)
					flag = true;
				if (flag)
					ans = min(ans, 1LL * abs(k - e.w));
			}
			cout << ans << '\n';
		}
	}
	return 0;
}
