#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, K = 22, MX = (int)(1e7) + 10;
int n, k, a[N], dp[N][K], L[N][K], last[MX], hsh[MX];
 
inline int inp() {
	int res = 0;
	char c = '0';
	while (c >= '0' && c <= '9') {
		((res *= 10) += c - '0');
		c = getchar();
	}
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	Q = inp();
	while (Q--) {
		n = inp(), k = inp();
		for (int i = 1, x; i <= n; i++) {
			a[i] = 1;
			x = inp();
			if (hsh[x]) {
				a[i] = hsh[x];
				continue;
			}
			int tmp = x;
			for (int j = 2; 1LL * j * j <= x; j++)
				if (x % j == 0) {
					int cnt = 0;
					while (x % j == 0)
						x /= j, cnt++;
					if (cnt & 1)
						a[i] *= j;
				}
			if (x > 1)
				a[i] *= x;
			hsh[tmp] = a[i];
		}
		for (int i = 1; i <= n; i++) {
			for (int j = 0; j <= k; j++) {
				L[i][j] = max(last[a[i]], L[i - 1][j]);
				if (j)
					L[i][j] = min(L[i - 1][j - 1], L[i][j]);
			}
			last[a[i]] = i;
		}
		for (int i = 1; i <= n; i++)
			for (int j = 0; j <= k; j++) {
				dp[i][j] = n;
				for (int t = 0; t <= j; t++)
					dp[i][j] = min(dp[i][j], dp[L[i][t]][j - t] + 1);
			}
		printf("%d\n", dp[n][k]);
		for (int i = 1; i <= n; i++)
			last[a[i]] = 0;
	}
	return 0;
}
