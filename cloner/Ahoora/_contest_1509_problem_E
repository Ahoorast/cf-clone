#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
const long long lim = (long long)(1e18) + 100;
long long pw[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	fill(pw, pw + N, lim);
	pw[0] = 1;
	for (int i = 1; i < N; i++) 
		if (pw[i - 1] * 2 <= lim)
			pw[i] = pw[i - 1] * 2;
	int Q;
	cin >> Q;
	while (Q--) {
		long long n, k;
		cin >> n >> k;
		vector<int> res;
		for (int i = 0, j = 1; i < n && k > 0; ) {
			int last = j;
			while (j < n && k > pw[n - j - 1]) {
				k -= pw[n - j - 1];
				j++;
			}
			for (int k = j; k >= last; k--)
				res.push_back(k);
			i += j - last + 1;
			j++;
		}
		if (k == 1 && (int)(res.size()) == n) {
			for (auto x: res)
				cout << x << ' ';
			cout << '\n';
		} else 
			cout << "-1\n";
	}
	return 0;
}
