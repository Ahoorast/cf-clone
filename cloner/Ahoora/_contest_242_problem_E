#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, LOG = 30;
int n, a[N], seg[N << 2][LOG], lazy[N << 2];
 
void build(int l = 1, int r = n, int root = 1) {
	if (l == r) {
		for (int i = 0; i < LOG; i++)
			if (a[l] & (1 << i))
				seg[root][i]++;
		return;
	}
	int mid = (l + r) >> 1;
	build(l, mid, root << 1);
	build(mid + 1, r, root << 1 | 1);
	for (int i = 0; i < LOG; i++)
		seg[root][i] = seg[root << 1][i] + seg[root << 1 | 1][i];
}
 
void work(int root, int l, int r, int x) {
	for (int i = 0; i < LOG; i++)
		if (x & (1 << i))
			seg[root][i] = r - l + 1 - seg[root][i];
}
 
void shift(int root, int l, int r) {
	lazy[root << 1] ^= lazy[root], lazy[root << 1 | 1] ^= lazy[root];
	int mid = (l + r) >> 1;
	work(root << 1, l, mid, lazy[root]);
	work(root << 1 | 1, mid + 1, r, lazy[root]);
	lazy[root] = 0;
}
 
void upd(int l, int r, int x, int lv = 1, int rv = n, int root = 1) {
	if (l <= lv && r >= rv) {
		lazy[root] ^= x;
		work(root, lv, rv, x);
		return;
	}
	if (l > rv || r < lv)
		return;
	shift(root, lv, rv);
	int mid = (lv + rv) >> 1;
	upd(l, r, x, lv, mid, root << 1);
	upd(l, r, x, mid + 1, rv, root << 1 | 1);
	for (int i = 0; i < LOG; i++)
		seg[root][i] = seg[root << 1][i] + seg[root << 1 | 1][i];
}
 
long long get(int l, int r, int lv = 1, int rv = n, int root = 1) {
	if (l <= lv && r >= rv) {
		long long s = 0;
		for (int i = 0; i < LOG; i++)
			s += 1LL * seg[root][i] * (1LL << i);
		return s;
	}
	if (l > rv || r < lv)
		return 0LL;
	shift(root, lv, rv);
	int mid = (lv + rv) >> 1;
	return get(l, r, lv, mid, root << 1) + get(l, r, mid + 1, rv, root << 1 | 1);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	build();
	int Q;
	cin >> Q;
	while (Q--) {
		int l, r, x, t;
		cin >> t >> l >> r;
		if (t == 1) 
			cout << get(l, r) << endl;
		else {
			cin >> x;
			upd(l, r, x);
		}
	}
	return 0;
}
