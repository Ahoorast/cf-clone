#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
const int inf = 1e9 + 100;
int n, sx[N], sy[N];
vector<int> all, seg[N << 2], vec[N];
 
struct point {
	int x, y;
} p[N];
 
void build(int l = 0, int r = n, int id = 1) {
	for (int i = l; i < r; i++)
		for (auto y: vec[i])
			seg[id].push_back(y);
	sort(seg[id].begin(), seg[id].end());
	if (l + 1 == r) 
		return;
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
}
 
int get(int s, int e, int y, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r) {
		return (int)(seg[id].size()) - (upper_bound(seg[id].begin(), seg[id].end(), y) - seg[id].begin()); 
	}
	if (s >= r || e <= l)
		return 0;
	int mid = l + r >> 1;
	return get(s, e, y, l, mid, id << 1) + get(s, e, y, mid, r, id << 1 | 1);
}
 
int get(pair<int, int> inp) {
	int x = inp.first, y = inp.second;
	x = lower_bound(all.begin(), all.end(), x) - all.begin();
	return get(0, x, y);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cout << setprecision(6) << fixed;
	for (int i = 0; i < N; i++)
		sx[i] = sy[i] = inf;
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> p[i].x >> p[i].y;
		all.push_back(p[i].x);
	}
	sort(all.begin(), all.end());
	all.resize(unique(all.begin(), all.end()) - all.begin());
	for (int i = 0; i < n; i++) 
		vec[lower_bound(all.begin(), all.end(), p[i].x) - all.begin()].push_back(p[i].y);
	vector<int> a(9);
	for (int i = 0; i < 9; i++)
		cin >> a[i];
	vector<int> ah;
	for (int i = 0; i < n; i++)
		ah.push_back(p[i].x);
	sort(ah.begin(), ah.end());
	ah.push_back(1 << 30);
	for (int i = 1; i <= n; i++)
		if (ah[i] != ah[i - 1])
			sx[i] = ah[i];
	ah.clear();
	for (int i = 0; i < n; i++)
		ah.push_back(p[i].y);
	sort(ah.begin(), ah.end(), greater<int>());
	ah.push_back(-1 * (1 << 30));
	for (int i = 1; i <= n; i++)
		if (ah[i] != ah[i - 1])
			sy[i] = ah[i];
	build();
	sort(a.begin(), a.end());
	do {
		int sx1 = a[0] + a[3] + a[6];
		int sx2 = sx1 + a[1] + a[4] + a[7];
		int sy1 = a[0] + a[1] + a[2];
		int sy2 = sy1 + a[3] + a[4] + a[5];
		vector<pair<int, int>> check;
		check.push_back({sx[sx1], sy[sy1]});
		check.push_back({sx[sx1], sy[sy2]});
		check.push_back({sx[sx2], sy[sy1]});
		check.push_back({sx[sx2], sy[sy2]});
		if (get(check[0]) != a[0])
			continue;
		if (get(check[1]) != a[0] + a[3])
			continue;
		if (get(check[2]) != a[0] + a[1])
			continue;
		if (get(check[3]) != a[0] + a[1] + a[3] + a[4])
			continue;
		cout << (double)(sx[sx1]) - 0.5 << ' ' << (double)(sx[sx2]) - 0.5 << '\n' << (double)(sy[sy1]) + 0.5 << ' ' << (double)(sy[sy2]) + 0.5 << '\n';
		return 0;
	} while(next_permutation(a.begin(), a.end()));
	cout << "-1\n";
	return 0;
}
