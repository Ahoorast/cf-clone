#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n;
long long dp[N], v[N], c[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q;
	for (int i = 1; i <= n; i++)
		cin >> v[i];
	for (int i = 1; i <= n; i++)
		cin >> c[i];
	while (Q--) {
		long long a, b;
		cin >> a >> b;
		fill(dp, dp + n + 1, -1 * (1LL << 58));
		vector<pair<long long,int>> mx;
		mx.push_back({0, 0}), mx.push_back({0, 0});
		for (int i = 1; i <= n; i++) {
			long long val = dp[c[i]] + a * v[i];
			if (c[i] != mx[1].second) 
				val = max(val, mx[1].first + b * v[i]);
			else
				val = max(val, mx[0].first + b * v[i]);
			dp[c[i]] = max(dp[c[i]], val);
			bool flag = false;
			for (int j = 0; j < 2; j++)
				if (c[i] == mx[j].second) {
					flag = true;
					mx[j].first = dp[c[i]];
				}
			if (!flag)
				mx[0] = max(mx[0], {dp[c[i]], c[i]});
			sort(mx.begin(), mx.end());
		}
		cout << mx[1].first << '\n';
	}
	return 0;
}
