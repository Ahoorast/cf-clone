#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 10;
int n, x[N], X[N], tp[N], p[N], d[N], l[N], r[N], sz;
vector<int> all;
 
struct Node {
	long long ted = 0, s = 0, ans = 0;
	void merge(Node L, Node R) {
		ted = L.ted + R.ted;
		s = L.s + R.s;
		ans = L.ans + R.ans + R.s * L.ted - L.s * R.ted;
	}
	void init(int x, int w) {
		ted += w;
		s += x * w;
	}
} seg[N << 2];
 
void upd(int p, int w, int l = 0, int r = sz, int id = 1) {
	if (l + 1 == r) {
		seg[id].init(all[l], w);
		return;
	}
	int mid = l + r >> 1;
	(p < mid? upd(p, w, l, mid, id << 1): upd(p, w, mid, r, id << 1 | 1));
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
Node get(int s, int e, int l = 0, int r = sz, int id = 1) {
	if (s <= l && e >= r)
		return seg[id];
	if (s >= r || e <= l)
		return seg[0];
	int mid = l + r >> 1;
	Node res;
	res.merge(get(s, e, l, mid, id << 1), get(s, e, mid, r, id << 1 | 1));
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> x[i], all.push_back(x[i]), X[i] = x[i];
	int Q;
	cin >> Q;
	for (int i = 0; i < Q; i++) {
		cin >> tp[i];
		if (tp[i] == 1)  {
			cin >> p[i] >> d[i];
			p[i]--;
			X[p[i]] += d[i];
			all.push_back(X[p[i]]);
		}
		else {
			cin >> l[i] >> r[i];
			all.push_back(l[i]), all.push_back(r[i]);
		}
	}
	sort(all.begin(), all.end());
	all.resize(unique(all.begin(), all.end()) - all.begin());
	sz = (int)(all.size());
	for (int i = 0; i < n; i++) {
		int t = lower_bound(all.begin(), all.end(), x[i]) - all.begin();
		upd(t, 1);
	}
	for (int i = 0; i < Q; i++) {
		if (tp[i] == 1) {
			int t = lower_bound(all.begin(), all.end(), x[p[i]]) - all.begin();
			upd(t, -1);
			x[p[i]] += d[i];
			t = lower_bound(all.begin(), all.end(), x[p[i]]) - all.begin();
			upd(t, +1);
		} else {
			l[i] = lower_bound(all.begin(), all.end(), l[i]) - all.begin();
			r[i] = lower_bound(all.begin(), all.end(), r[i]) - all.begin();
			cout << get(l[i], r[i] + 1).ans << '\n';
		}
	}
	return 0;
}
