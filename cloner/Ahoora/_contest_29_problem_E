#include<bits/stdc++.h>
using namespace std;
 
const int N = 510;
int n, m, d[N][N];
pair<int, int> par[N][N];
vector<int> adj[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1, v, u; i <= m; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			d[i][j] = 1 << 30, par[i][j] = {-1, -1};
	queue<pair<int, int>> q;
	q.push({1, n}), d[1][n] = 0;
	while (q.size()) {
		pair<int, int> x = q.front();
		q.pop();
		if (x.first == n && x.second == 1) {
			cout << d[x.first][x.second] << '\n';
			vector<int> ans[2];
			pair<int, int> v = x;
			ans[0].push_back(v.first), ans[1].push_back(v.second);
			while (par[v.first][v.second].first != -1) {
				v = par[v.first][v.second];
				ans[0].push_back(v.first), ans[1].push_back(v.second);
			}
			for (int i = 0; i < 2; i++) {
				reverse(ans[i].begin(), ans[i].end());
				for (auto v: ans[i])
					cout << v << ' ';
				cout << '\n';
			}
			return 0;
		}
		for (auto uf: adj[x.first])
			for (auto us: adj[x.second])
				if (uf != us && d[uf][us] > d[x.first][x.second] + 1) {
					d[uf][us] = d[x.first][x.second] + 1;
					par[uf][us] = x;
					q.push({uf, us});
				}
	}
	cout << "-1\n";
	return 0;
}
