#include<bits/stdc++.h>
using namespace std;
 
const int N = 1010;
int dp[N][N][2], n;
bool path[N][N][2];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n + 2; i++)
		for (int k = 0; k < 2; k++)
			dp[i][0][k] = dp[0][i][k] = 1 << 29;
	dp[0][1][0] = dp[0][1][1] = 0;
	bool KIR = false;
	int X, Y;
	for (int i = 1, a; i <= n; i++)
		for (int j = 1; j <= n; j++) {
			cin >> a;
			if (a == 0)
				KIR = true, X = i, Y = j;
			while (a % 2 == 0 && a > 0)
				a /= 2, dp[i][j][0]++;
			while (a % 5 == 0 && a > 0)
				a /= 5, dp[i][j][1]++;
			for (int k = 0; k < 2; k++) {
				path[i][j][k] = dp[i - 1][j][k] < dp[i][j - 1][k];
				dp[i][j][k] += (path[i][j][k]? dp[i - 1][j][k]: dp[i][j - 1][k]);
			}
		}
	bool c = dp[n][n][0] > dp[n][n][1];
	if (dp[n][n][c] > 1 && KIR) {
		cout << "1\n";
		int x = 1, y = 1;
		for (int i = 0; i < 2; i++) {
			if (i == 1)
				X = n, Y = n;
			while (x < X) {
				cout << 'D';
				x++;
			}
			while (y < Y) {
				cout << 'R';
				y++;
			}
		}
		return cout << '\n', 0;
	}
	cout << dp[n][n][c] << '\n';
	int x = n, y = n;
	vector<char> ans;
	while (x > 0 && y > 0) {
		if (path[x][y][c])
			x--, ans.push_back('D');
		else
			y--, ans.push_back('R');
	}
	for (int i = 2 * n - 3; i >= 0; i--)
		cout << ans[i];
	cout << '\n';
	return 0;
}
