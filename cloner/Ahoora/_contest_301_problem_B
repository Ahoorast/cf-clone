#include<bits/stdc++.h>
using namespace std;
 
const int N = 110;
int n, a[N], x[N], y[N];
long long dist[N], d;
vector<pair<int, long long>> adj[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> d;
	for (int i = 2; i < n; i++)
		cin >> a[i];
	for (int i = 1; i <= n; i++)
		cin >> x[i] >> y[i];
	long long mn = 1LL << 55;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			if (i != j) {
				long long dis = abs(x[i] - x[j]) + abs(y[i] - y[j]);
				dis *= d;
				adj[i].push_back({j, dis - a[j]});
				adj[j].push_back({i, dis - a[i]});
				mn = min(dis - a[j], mn);
				mn = min(dis - a[i], mn);
			}
	if (mn < 0) {
		for (int i = 1; i <= n; i++)
			for (auto u: adj[i])
				u.second -= mn;
	}
	fill(dist, dist + N, 1LL << 55);
	set<pair<long long, int>> s;
	s.insert({dist[1] = 0, 1});
	while (s.size()) {
		auto it = *s.begin();
		s.erase(s.begin());
		int v = it.second;
		long long w = it.first;
		for (auto u: adj[v])
			if (u.second + w < dist[u.first]) {
				s.erase({dist[u.first], u.first});
				s.insert({dist[u.first] = u.second + w, u.first});
			}
	}
	if (mn < 0)
		dist[n] += mn * (n - 1);
	cout << dist[n] << '\n';
	return 0;
}
