#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, mod = 1LL * 1000 * 1000 * 1000 + 7, S = 400;
int dp[2][S][S], n, m, x;
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> x;
	if (n > m)
		return cout << "0\n", 0;
	dp[0][0][0] = 1;
	for (int i = 1; i <= m; i++)
		for (int j = 0; j <= min(i, n); j++)
			for (int k = 0; k <= j; k++) {
				bool t = i & 1;
				dp[t][j][k] = 0;
				if (i != x)
					(dp[t][j][k] += (dp[!t][j][k] + dp[!t][j][k + 1]) % mod) %= mod;
				if (j > 0 && k > 0)
					(dp[t][j][k] += dp[!t][j - 1][k - 1]) %= mod;
				if (k == 0 && j > 0)
					(dp[t][j][k] += dp[!t][j - 1][k]) %= mod;
				if (j > 0 && k > 0)
					(dp[t][j][k] += dp[!t][j - 1][k]) %= mod;
			}
	int ans = dp[m & 1][n][0];
	for (int i = 1; i <= n; i++)
		ans = 1LL * ans * i % mod;
	cout << ans << '\n';
	return 0;
}
