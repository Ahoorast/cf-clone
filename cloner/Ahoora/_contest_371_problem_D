#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
long long n, a[N], w[N], par[N];
 
int findRoot(int v) {
	return par[v] == par[par[v]]? par[v]: par[v] = findRoot(par[v]);
}
 
void Union(int v, int u) {
	int pv = findRoot(v), pu = findRoot(u);
	par[pv] = pu;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i], par[i] = i;
	par[n + 1] = n + 1;
	a[n + 1] = 1LL << 60;
	cin >> Q;
	while (Q--) {
		int t;
		cin >> t;
		if (t == 1) {
			int p, x;
			cin >> p >> x;
			int s = findRoot(p);
			while (x) {
				if (x > a[s] - w[s]) {
					x -= a[s] - w[s];
					w[s] = a[s];
					Union(s, s + 1);
					s = findRoot(s);
				}
				else 
					w[s] += x, x = 0;
			}
		}
		else {
			int k;
			cin >> k;
			cout << w[k] << '\n';
		}
	}
	return 0;
}
