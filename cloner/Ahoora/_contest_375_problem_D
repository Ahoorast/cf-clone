#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, c[N], ans[N], vq[N], kq[N];
vector<int> adj[N], query[N];
unordered_map<int, int> cnt[N], fen[N];
 
void upd(int v, int x, int w) {
	for (; x <= n; x += x & (-x))
		fen[v][x] += w;
}
 
int get(int v, int x) {
	int res = 0;
	for (; x; x -= x & (-x))
		res += fen[v][x];
	return res;
}
 
int sum(int v, int l, int r) {
	return get(v, r) - get(v, l - 1);
}
 
void dfs(int v, int par = 0) {
	cnt[v][c[v]]++;
	upd(v, 1, 1); 
	for (auto u: adj[v])
		if (u ^ par) {
			dfs(u, v);
			if (cnt[u].size() > cnt[v].size()) {
				swap(cnt[u], cnt[v]);
				swap(fen[u], fen[v]);
			}
			for (auto it: cnt[u]) {
				if (cnt[v][it.first])
					upd(v, cnt[v][it.first], -1);
				cnt[v][it.first] += it.second;
				if (cnt[v][it.first])
					upd(v, cnt[v][it.first], +1);
			}
			cnt[u].clear(), fen[u].clear();
		}
	for (auto it: query[v]) 
		if (kq[it] <= n)
			ans[it] = sum(v, kq[it], n);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q;
	for (int i = 1; i <= n; i++)
		cin >> c[i];
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	for (int i = 0; i < Q; i++) {
		cin >> vq[i] >> kq[i];
		query[vq[i]].push_back(i);
	}
	dfs(1);
	for (int i = 0; i < Q; i++)
		cout << ans[i] << '\n';
	return 0;
}
