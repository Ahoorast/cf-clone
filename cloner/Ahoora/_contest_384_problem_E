#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100;
int st[N], en[N], vert[N], n, a[N], cnt;
bool col[N];
vector<int> adj[N];
 
struct Node {
	long long cnt[2] = {0, 0}, sum = 0, lazy = 0, size = 0;
	void merge(Node L, Node R) {
		cnt[0] = L.cnt[0] + R.cnt[0], cnt[1] = L.cnt[1] + R.cnt[1];
		size = L.size + R.size;
		sum = L.sum + R.sum;
	}
	void add(int val) {
		sum += cnt[0] * val - cnt[1] * val;
		lazy += val;
	}
} seg[N << 2];
 
void dfs(int root, int par = -1) {
	col[root] = (par == -1? 0: !col[par]);
	st[root] = ++cnt;
	vert[cnt] = root;
	for (auto u: adj[root])
		if (u ^ par)
			dfs(u, root);
	en[root] = cnt;
}
 
void build(int l = 1, int r = n, int root = 1) {
	if (l == r) {
		seg[root].sum = a[vert[l]];
		seg[root].cnt[col[vert[l]]]++;
		return;
	}
	int mid = l + r >> 1;
	build(l, mid, root << 1), build(mid + 1, r, root << 1 | 1);
	seg[root].merge(seg[root << 1], seg[root << 1 | 1]);
}
 
void shift(int root) {
	seg[root << 1].add(seg[root].lazy), seg[root << 1 | 1].add(seg[root].lazy);
	seg[root].lazy = 0;
}
 
void upd(int l, int r, int val, int lx = 1, int rx = n, int root = 1) {
	if (l > rx || r < lx)
		return;
	if (l <= lx && r >= rx) {
		seg[root].add(val);
		return;
	}
	shift(root);
	int mid = lx + rx >> 1;
	upd(l, r, val, lx, mid, root << 1), upd(l, r, val, mid + 1, rx, root << 1 | 1);
	seg[root].merge(seg[root << 1], seg[root << 1 | 1]);
}
 
Node get(int p, int lx = 1, int rx = n, int root = 1) {
	if (lx == rx)
		return seg[root];
	int mid = lx + rx >> 1;
	shift(root);
	return (p <= mid? get(p, lx, mid, root << 1): get(p, mid + 1, rx, root << 1 | 1));
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(1);
	build();
	while (Q--) {
		int tp, x, val;
		cin >> tp >> x;
		if (tp == 1) {
			cin >> val;
			upd(st[x], en[x], val * (col[x]? -1: +1));
		}
		else 
			cout << get(st[x]).sum << '\n';
	}
	return 0;
}
