#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 1000 + 10;
set<int> adj[N];
int ans[N];
bool on[N];
 
void set_state(int v, int x) {
	on[v] = x;
	for (auto u: adj[v])
		ans[u] += (on[v]? +1: -1);
}
 
void add(int v, int u) {
	if (adj[v].size() > adj[u].size())
		swap(v, u);
	ans[u] += on[v];
	adj[v].insert(u);
}
 
void rem(int v, int u) {
	if (!adj[v].count(u))
		swap(v, u);
	adj[v].erase(u);
	ans[u] -= on[v];
}
 
int get(int v) {
	int res = ans[v];
	for (auto u: adj[v])
		res += on[u];
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int n, m, Q, o;
	cin >> n >> m >> Q >> o;
	for (int i = 0, v; i < o; i++) 
		cin >> v, set_state(v, 1);
	for (int i = 0, v, u; i < m; i++) {
		cin >> v >> u;
		add(v, u);
	}
	while (Q--) {
		char c;
		int v, u;
		cin >> c >> v;
		if (c == 'O') 
			set_state(v, 1);
		else if (c == 'F')
			set_state(v, 0);
		else if (c == 'A') {
			cin >> u;
			add(v, u);
		} else if (c == 'D') {
			cin >> u;
			rem(v, u);
		} else if (c == 'C') 
			cout << get(v) << '\n';
	}
	return 0;
}
