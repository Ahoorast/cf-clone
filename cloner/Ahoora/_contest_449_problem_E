#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 1000 + 10, mod = 1LL * 1000 * 1000 * 1000 + 7;
int phi[N],  sg[N], val[N], ps[3][N];
 
long long Pow(long long a, long long b) {
	return b? (b & 1? a: 1) % mod * Pow(a * a % mod, b >> 1) % mod: 1;
}
 
int mul(int a, int b) {
	return 1LL * a * b % mod;
}
 
int add(int a, int b) {
	return ((a + b) % mod + mod) % mod;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	for (int i = 1; i < N; i++) {
		phi[i] = i - phi[i];
		for (int j = 2 * i; j < N; j += i)
			phi[j] += phi[i];
	}
	for (int i = 1; i < N; i++)
		for (int j = i; j < N; j += i)
			sg[j] = add(sg[j], mul(phi[j / i], i));
	int div3 = Pow(3, mod - 2);
	for (int i = 1; i < N; i++) 
		val[i] = add(add(mul(i, mul(i + 1, mul(2 * i + 1, div3))), -(mul(3, mul(i, i)))), mul(2, sg[i]));
	for (int i = 0; i < 3; i++)
		for (int j = 1; j < N; j++)
			ps[i][j] = add(ps[i][j - 1], mul(Pow(j, i), val[j]));
	int Q;
	cin >> Q;
	while (Q--) {
		int n, m;
		cin >> n >> m;
		int l = min(n, m);
		int ans = ps[2][l];
		ans = add(ans, -mul(ps[1][l], n + m + 2));
		ans = add(ans, mul(ps[0][l], mul(n + 1, m + 1)));
		cout << ans << '\n';
	}
	return 0;
}
