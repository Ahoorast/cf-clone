#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 5, LG = 20, mod = 1LL * 1000 * 1000 * 1000 + 7;
int n, m, seg[(N << 2) * LG], pw[N << 1], sz_of_seg, L[(N << 2) * LG], R[(N << 2) * LG], root[N], TM, cnt_z[(N << 2) * LG], make_o, make_z, par[N];
vector<pair<int, int>> adj[N + 2];
 
int merge(int x, int y, int l, int r) {
	int mid = l + r >> 1;
	return (x + 1LL * pw[mid - l] * y % mod) % mod;
}
 
int build_z(int l = 0, int r = N) {
	int id = ++sz_of_seg;
	if (l + 1 == r)  {
		cnt_z[id] = 1;
		return id;
	}
	int mid = l + r >> 1;
	L[id] = build_z(l, mid);
	R[id] = build_z(mid, r);
	cnt_z[id] = cnt_z[L[id]] + cnt_z[R[id]];
	return id;
}
 
int build_o(int l = 0, int r = N) {
	int id = ++sz_of_seg;
	if (l + 1 == r) {
		seg[id] = 1;
		return id;
	}
	int mid = l + r >> 1;
	L[id] = build_o(l, mid);
	R[id] = build_o(mid, r);
	seg[id] = merge(seg[L[id]], seg[R[id]], l, r);
	return id;
}
 
int upd(int s, int e, int v, int u, int l = 0, int r = N) { 
	int id = ++sz_of_seg;
	if (s <= l && e >= r) {
		L[id] = L[u], R[id] = R[u];
		seg[id] = seg[u], cnt_z[id] = cnt_z[u];
		return id;
	}
	int mid = l + r >> 1;
	L[id] = L[v], R[id] = R[v]; 
	if (s < mid)
		L[id] = upd(s, e, L[v], L[u], l, mid);
	if (e > mid)
		R[id] = upd(s, e, R[v], R[u], mid, r);
	seg[id] = merge(seg[L[id]], seg[R[id]], l, r);
	cnt_z[id] = cnt_z[L[id]] + cnt_z[R[id]];
	return id;
}
 
int find(int v, int p, int l = 0, int r = N) {
	if (p >= r || cnt_z[v] == 0)
		return -1;
	if (l + 1 == r)
		return l;
	int mid = l + r >> 1;
	int res = find(L[v], p, l, mid);
	if (res == -1)
		res = find(R[v], p, mid, r);
	return res;
}
 
int add(int v, int w) { 
	int r = find(v, w);
	v = upd(w, r, v, make_z);
	v = upd(r, r + 1, v, make_o);
	return v;
}
 
bool compare(int v, int u, int l = 0, int r = N) {
	if (l + 1 == r) 
		return seg[v] < seg[u];
	int mid = l + r >> 1;
	if (cnt_z[R[v]] == cnt_z[R[u]] && seg[R[v]] == seg[R[u]])
		return compare(L[v], L[u], l, mid);
	return compare(R[v], R[u], mid, r);
}
 
struct state {
	int v;
	state(int x = 0) {
		v = x;
	}
	bool operator < (state u) const {
		return compare(v, u.v);
	}
};
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	pw[0] = 1;
	for (int i = 1; i < N << 1; i++)
		pw[i] = 1LL * pw[i - 1] * 2 % mod;
	make_z = build_z();
	make_o = build_o();
	cin >> n >> m;
	map<pair<int, int>, int> WWW;
	for (int i = 0, v, u, w; i < m; i++) {
		cin >> v >> u >> w;
		adj[v].push_back({u, w});
		adj[u].push_back({v, w});
		WWW[make_pair(v, u)] = WWW[make_pair(u, v)] = w;
	}
	int s, t;
	cin >> s >> t;
	set<pair<state, int>> q;
	for (int i = 1; i <= n; i++)
		root[i] = make_o;
	q.insert({state(make_z), s});
	root[s] = make_z;
	while (q.size()) {
		auto it = *q.begin();
		q.erase(q.begin());
		int v = it.second;
		if (v == t) {
			vector<int> ans;
			while (v) {
				ans.push_back(v);
				v = par[v];
			}
			reverse(ans.begin(), ans.end());
			int sz = (int)(ans.size());
			int res = 0;
			for (int i = 1; i < sz; i++)
				(res += pw[WWW[make_pair(ans[i], ans[i - 1])]]) %= mod;
			cout << res << '\n';
			cout << (int)(ans.size()) << '\n';
			for (auto v: ans)
				cout << v << ' ';
			cout << '\n';
			return 0;
		}
		for (auto u: adj[v]) {
			int nw = add(root[v], u.second);
			if (compare(nw, root[u.first])) {
				q.erase({state(root[u.first]), u.first});
				root[u.first] = nw;
				par[u.first] = v;
				q.insert({state(root[u.first]), u.first});
			}
		}
	}
	cout << "-1\n";
	return 0;
}
