#include<bits/stdc++.h>
using namespace std;
 
const int N = 5 * 1000 * 100 + 10;
int n, a[N], nxt[N], mn[N], seg[N << 2], dp[N], path[N];
vector<int> vec[N];
 
void upd(int x, int w, int l = 0, int r = n, int id = 1) {
	if (l + 1 == r) {
		seg[id] = min(seg[id], w);
		return;
	}
	int mid = l + r >> 1;
	x < mid? upd(x, w, l, mid, id << 1): upd(x, w, mid, r, id << 1 | 1);
	seg[id] = min(seg[id << 1], seg[id << 1 | 1]);
}
 
int get(int s, int e, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r)
		return seg[id];
	if (e <= l || s >= r)
		return n;
	int mid = l + r >> 1;
	return min(get(s, e, l, mid, id << 1), get(s, e, mid, r, id << 1 | 1));
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < N << 2; i++)
		seg[i] = n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	map<int, int> last;
	nxt[n] = n;
	for (int i = n - 1; i >= 0; i--) {
		if (last.count(a[i]))
			nxt[i] = last[a[i]];
		else
			nxt[i] = n;
		last[a[i]] = i;
		vec[nxt[i]].push_back(i);
	}
	vector<pair<int, int>> query;
	for (int i = 0; i < n; i++)
		query.push_back({i, nxt[i]});
	sort(query.begin(), query.end(), [](pair<int, int> x, pair<int, int> y) {
			return x.second > y.second;
			});
	int R = n;
	for (auto it: query) {
		while (R > it.second) {
			for (auto x: vec[R])
				upd(x, nxt[x]); 
			R--;
		}
		mn[it.first] = get(it.first + 1, it.second);
	}
	mn[n] = 1 << 30;
	for (int i = 0; i < n; i++)
		mn[i] = min(mn[i], nxt[nxt[nxt[i]]]);
	for (int i = n - 1; i >= 0; i--)
		mn[i] = min(mn[i], mn[nxt[i]]);
	for (int i = n - 1; i >= 0; i--) {
		dp[i] = dp[i + 1];
		if (dp[mn[i] + 1] + 1 > dp[i] && mn[i] < n) {
			dp[i] = dp[mn[i] + 1] + 1;
			path[i] = 1;
		}
	}
	cout << dp[0] * 4 << '\n';
	int i = 0;
	while (i < n) {
		if (path[i] == 0) 
			i++;
		else {
			cout << a[i] << ' ' << a[mn[i]] << ' ' << a[i] << ' ' << a[mn[i]] << ' ';
			i = mn[i] + 1;
		}
	}
	cout << '\n';
	return 0;
}
