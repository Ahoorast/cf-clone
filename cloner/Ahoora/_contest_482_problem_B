#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int l[N], r[N], q[N], n, m, seg[N << 2], lazy[N << 2], a[N];
 
void shift(int root) {
	seg[root << 1] |= lazy[root], seg[root << 1 | 1] |= lazy[root];
	lazy[root << 1] |= lazy[root], lazy[root << 1 | 1] |= lazy[root];
	lazy[root] = 0;
}
 
void upd(int l, int r, int q, int lv = 1, int rv = n, int root = 1) {
	if (l > rv || r < lv)
		return;
	if (l <= lv && r >= rv) {
		seg[root] |= q;
		lazy[root] |= q;
		return;
	}
	shift(root);
	int mid = (lv + rv) >> 1;
	upd(l, r, q, lv, mid, root << 1), upd(l, r, q, mid + 1, rv, root << 1 | 1);
	seg[root] = seg[root << 1] & seg[root << 1 | 1];
}
 
int val(int p, int lv = 1, int rv = n, int root = 1) {
	if (lv == rv) 
		return seg[root];
	shift(root);
	int mid = (lv + rv) >> 1;
	if (p <= mid)
		return val(p, lv, mid, root << 1);
	return val(p, mid + 1, rv, root << 1 | 1);
}
 
void build(int l = 1, int r = n, int root = 1) {
	if (l == r) {
		seg[root] = a[l];
		return;
	}
	int mid = (l + r) >> 1;
	build(l, mid, root << 1), build(mid + 1, r, root << 1 | 1);
	seg[root] = seg[root << 1] & seg[root << 1 | 1];
}
 
int get(int l, int r, int lv = 1, int rv = n, int root = 1) {
	if (l > rv || r < lv)
		return (1 << 30) - 1 + (1 << 30);
	if (l <= lv && r >= rv)
		return seg[root];
	int mid = (lv + rv) >> 1;
	return get(l, r, lv, mid, root << 1) & get(l, r, mid + 1, rv, root << 1 | 1);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= m; i++)
		cin >> l[i] >> r[i] >> q[i], upd(l[i], r[i], q[i]);
	for (int i = 1; i <= n; i++)
		a[i] = val(i);
	for (int i = 0; i < N << 2; i++)
		seg[i] = 0;
	build();
	for (int i = 1; i <= m; i++)
		if (get(l[i], r[i]) != q[i])
			return cout << "NO" << endl, 0;
	cout << "YES" << endl;
	for (int i = 1; i <= n; i++)
		cout << a[i] << ' ';
	cout << endl;
	return 0;
}
