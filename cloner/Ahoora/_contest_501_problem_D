#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
 
#define indexed_set tree<int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update>
 
using namespace __gnu_pbds;
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int n, p[N], pos[N], fen[N], num[N];
 
void upd(int x) {
	for (; x <= n; x += x & (-x))
		fen[x]++;
}
 
int get(int x) {
	int res = 0;
	for (; x; x -= x & (-x))
		res += fen[x];
	return res;
}
 
void sum() {
	for (int i = 1; i <= n; i++)
		p[i]++;
	for (int i = 1; i <= n; i++) {
		int x = p[i];
		x -= get(x);
		num[n - i] += x - 1;
		upd(p[i]);
	}
	for (int i = 0; i <= n; i++)
		fen[i] = 0;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> p[i];
	sum();
	for (int i = 1; i <= n; i++)
		cin >> p[i];
	sum();
	for (int i = 0; i < n; i++) {
		num[i + 1] += num[i] / (i + 1);
		num[i] %= (i + 1);
	}
	indexed_set s;
	for (int i = 0; i < n; i++)
		s.insert(i);
	for (int i = n; i >= 1; i--) {
		int x = num[i - 1];
		int res = *s.find_by_order(x);
		cout << res << ' ';
		s.erase(res);
	}
	cout << '\n';
	return 0;
}
