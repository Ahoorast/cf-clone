#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 100;
int n, a[N];
long long seg[N << 2], lazy[N << 2];
 
void build(int l = 1, int r = n, int root = 1) {
	if (l == r) {
		seg[root] = a[l];
		return;
	}
	int mid = (l + r) >> 1;
	build(l, mid, root * 2);
	build(mid + 1, r, root * 2 + 1);
	seg[root] = min(seg[root * 2], seg[root * 2 + 1]);
}
 
void shift(int root) {
	seg[root * 2] += lazy[root], seg[root * 2 + 1] += lazy[root];
	lazy[root * 2] += lazy[root], lazy[root * 2 + 1] += lazy[root];
	lazy[root] = 0;
}
 
long long query(int l, int r, int root = 1, int lv = 1, int rv = n) {
	if (lv >= l && rv <= r) 
		return seg[root];
	if (l > rv || lv > r)
		return 1LL << 55;
	int mid = (lv + rv) >> 1;
	shift(root);
	return min(query(l, r, root * 2, lv, mid), query(l, r, root * 2 + 1, mid + 1, rv));
}
 
void upd(int l, int r, int v, int root = 1, int lv = 1, int rv = n) {
	if (lv >= l && rv <= r) {
		lazy[root] += v;
		seg[root] += v;
		return;
	} 
	if (l > rv || lv > r)
		return;
	int mid = (lv + rv) >> 1;
	shift(root);
	upd(l, r, v, root * 2, lv, mid);
	upd(l, r, v, root * 2 + 1, mid + 1, rv);
	seg[root] = min(seg[root * 2], seg[root * 2 + 1]);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	build();
	int Q;
	cin >> Q;
	cin.ignore();
	while (Q--) {
		string ah;
		getline(cin, ah);
		int l = 0, r = 0, v = 0, i = 0;
		bool t = false, neg = false;
		while (ah[i] != ' ')
			(l *= 10) += ah[i] - '0', i++;
		i++;
		while (ah[i] != ' ' && i < ah.size())
			(r *= 10) += ah[i] - '0', i++;
		i++;
		while (i < ah.size()) { 
			if (ah[i] == '-')
				neg = true, i++, t = true;
			else if (ah[i] >= '0' && ah[i] <= '9')
				(v *= 10) += ah[i] - '0', i++, t = true;
		}
		if (neg)
			v *= -1;
		l++, r++;
		if (!t) {
			long long res = 1LL << 55;
			if (l > r)
				res = min(query(l, n), query(1, r));
			else
				res = query(l, r);
			cout << res << endl;
		}
		else {
			if (l > r)
				upd(l, n, v), upd(1, r, v);
			else
				upd(l, r, v);
		}
	}
	return 0;
}
