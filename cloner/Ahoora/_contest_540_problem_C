//be omide khoda
#include<bits/stdc++.h>
using namespace std;
 
const int N = 510;
char c[N][N];
int n, m, r[2], C[2];
bool vis[N][N];
 
void read() {
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			cin >> c[i][j];
	cin >> r[0] >> C[0] >> r[1] >> C[1];
}
 
void dfs(int x, int y) {
	vis[x][y] = true;
	for (int dx = -1; dx <= 1; dx++)
		for (int dy = -1; dy <= 1; dy++)
			if ((dx == 0 || dy == 0) && !(dx == 0 && dy == 0))
				if (!vis[x + dx][y + dy] && c[x + dx][y + dy] == '.')
					dfs(x + dx, y + dy);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	read();
	c[r[0]][C[0]] = '.';
	int deg = 0, x = r[1], y = C[1];
		for (int dx = -1; dx <= 1; dx++)
			for (int dy = -1; dy <= 1; dy++)
				if ((dx == 0 || dy == 0) && !(dx == 0 && dy == 0))
					if (c[x + dx][y + dy] == '.')
						deg++;
	if (r[1] == r[0] && C[1] == C[0]) {
		if (deg == 0)
			cout << "NO" << endl;
		else
			cout << "YES" << endl;
		return 0;
	}
	if (c[r[1]][C[1]] == 'X') {
		c[r[1]][C[1]] = '.';
		dfs(r[0], C[0]);
		return cout << (vis[r[1]][C[1]]? "YES": "NO") << endl, 0;
	}
	else {
		c[r[1]][C[1]] = '.';
		dfs(r[0], C[0]);
		if (deg >= 2)
			cout << (vis[r[1]][C[1]]? "YES": "NO") << endl;
		else
			cout << "NO" << endl;
	}
	return 0;
}
