#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10;
int n, a[N], cnt[N * 4], sz[N];
bool mark[N];
vector<int> p[N];
long long ans;
 
void lmao(int x, int w) {
	for (int i = 1; i < 1 << sz[x]; i++) {
		int tm = 1;
		for (int j = 0; j < sz[x]; j++)
			if ((1 << j) & i)
				tm *= p[x][j];
		cnt[tm] += w;
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q;
	for (int i = 1; i <= n; i++) {
		cin >> a[i];
		int t = 1;
		for (int j = 2; 1LL * j * j <= a[i]; j++) 
			if (a[i] % j == 0) {
				t *= j;
				sz[i]++, p[i].push_back(j);
				while (a[i] % j == 0)
					a[i] /= j;
			}
		if (a[i] > 1) 
			t *= a[i], sz[i]++, p[i].push_back(a[i]);
		a[i] = t;
	}
	int tot = 0;
	while (Q--) {
		int x;
		cin >> x;
		if (!mark[x]) {
			mark[x] = true;
			int t = tot;
			for (int i = 1; i < 1 << sz[x]; i++) {
				int tm = 1;
				for (int j = 0; j < sz[x]; j++)
					if ((1 << j) & i)
						tm *= p[x][j];
				if (__builtin_popcount(i) & 1)
					t -= cnt[tm];
				else
					t += cnt[tm];
			}
			lmao(x, +1);
			ans += t;
			tot++;
		}
		else {
			mark[x] = false;
			lmao(x, -1);
			tot--;
			int t = tot;
			for (int i = 1; i < 1 << sz[x]; i++) {
				int tm = 1;
				for (int j = 0; j < sz[x]; j++)
					if ((1 << j) & i)
						tm *= p[x][j];
				if (__builtin_popcount(i) & 1)
					t -= cnt[tm];
				else
					t += cnt[tm];
			}
			ans -= t;
		}
		cout << ans << '\n';
	}
	return 0;
}
