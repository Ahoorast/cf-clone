#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, mod = 1LL * 1000 * 1000 * 1000 + 7;
int n, h, w, dp[N], fact[N], inv[N];
pair<int, int> p[N];
 
long long Pow(long long a, long long b) {
	return b? (b & 1? a: 1) % mod * Pow(a * a % mod, b >> 1) % mod: 1;
}
 
int C(int r, int n) {
	return 1LL * fact[n] * inv[r] % mod * inv[n - r] % mod;
}
 
int get(int i, int j) {
	int dx = p[j].first - p[i].first;
	int dy = p[j].second - p[i].second;
	if (dx < 0 || dy < 0)
		return 0;
	return C(dx, dx + dy);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	fact[0] = 1;
	for (int i = 1; i < N; i++)
		fact[i] = 1LL * i * fact[i - 1] % mod;
	inv[N - 1] = Pow(fact[N - 1], mod - 2);
	for (int i = N - 2; i >= 0; i--)
		inv[i] = 1LL * inv[i + 1] * (i + 1) % mod;
	cin >> h >> w >> n;
	for (int i = 1; i <= n; i++) 
		cin >> p[i].first >> p[i].second;
	p[0] = {1, 1};
	p[n + 1] = {h, w};
	sort(p, p + n + 2);
	for (int i = 0; i <= n + 1; i++)
		dp[i] = get(i, n + 1);
	for (int i = n; i >= 1; i--) {
		int x = dp[i];
		for (int j = 0; j <= n + 1; j++)
			if (p[j].first <= p[i].first && p[j].second <= p[j].second) {
				int y = 1LL * get(j, i) * x % mod;
				dp[j] = (((dp[j] - y) % mod + mod) % mod);
			}
	}
	cout << dp[0] << '\n';
	return 0;
}
