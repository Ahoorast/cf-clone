#include<bits/stdc++.h>
using namespace std;
 
const int S = 800 * 1000 + 10, N = 1000 * 100 + 10;
int trie[S][26], n, cnt, ans, match[N];
vector<int> q[2][S];
 
void insert(string s, bool t, int i) {
	int j = 0;
	for (char c: s) {
		if (!trie[j][c - 'a'])
			trie[j][c - 'a'] = ++cnt;
		j = trie[j][c - 'a'];
	}
	q[t][j].push_back(i);
}
 
void dfs(int root, int h = -1) {
	++h;
	for (int i = 0; i < 26; i++)
		if (trie[root][i]) {
			int u = trie[root][i];
			dfs(u, h);
			while (!q[0][u].empty()) {
				int x = q[0][u].back();
				q[0][u].pop_back();
				q[0][root].push_back(x);
			}
			while (!q[1][u].empty()) {
				int x = q[1][u].back();
				q[1][u].pop_back();
				q[1][root].push_back(x);
			}
		}
	while (q[0][root].size() && q[1][root].size()) {
		int x = q[0][root].back(), y = q[1][root].back();
		q[0][root].pop_back();
		q[1][root].pop_back();
		match[x] = y;
		ans += h;
	}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	string s;
	for (int i = 1; i <= n; i++)
		cin >> s, insert(s, 0, i);
	for (int i = 1; i <= n; i++)
		cin >> s, insert(s, 1, i);
	dfs(0);
	cout << ans << endl;
	for (int i = 1; i <= n; i++)
		cout << i << ' ' << match[i] << endl;
	return 0;
}
 
