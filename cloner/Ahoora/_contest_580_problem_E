#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, P = 11, mod = 1e9 + 9;
int n, m, k, sv[N][10], pw[N];
string s;
 
int add(int a, int b) {
	a += b;
	a += (a < 0) * mod;
	a -= (a >= mod) * mod;
	return a;
}
 
int mul(int a, int b) {
	return 1LL * a * b % mod;
}
 
struct Node {
	int hsh, len, lazy;
	Node() {
		hsh = len = 0;
		lazy = -1;
	}
	void merge(Node L, Node R) {
		hsh = add(L.hsh, mul(pw[L.len], R.hsh));
		len = L.len + R.len;
	}
	void push(int x) {
		if (x == -1)
			return;
		lazy = x;
		hsh = sv[len][x];
	}
} seg[N << 2];
 
void build(int l = 0, int r = n, int id = 1) {
	seg[id].len = r - l;
	if (l + 1 == r) {
		seg[id].hsh = s[l] - '0' + 1;
		return;
	}
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
void shift(int id) {
	seg[id << 1].push(seg[id].lazy);
	seg[id << 1 | 1].push(seg[id].lazy);
	seg[id].lazy = -1;
}
 
void upd(int s, int e, int x, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r) {
		seg[id].push(x);
		return;
	}
	if (s >= r || e <= l)
		return;
	shift(id);
	int mid = l + r >> 1;
	upd(s, e, x, l, mid, id << 1), upd(s, e, x, mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
Node get(int s, int e, int l = 0, int r = n, int id = 1) {
	Node res;
	if (s <= l && e >= r)
		return seg[id];
	if (s >= r || e <= l)
		return res;
	shift(id);
	int mid = l + r >> 1;
	res.merge(get(s, e, l, mid, id << 1), get(s, e, mid, r, id << 1 | 1));
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	pw[0] = 1;
	for (int i = 1; i < N; i++)
		pw[i] = mul(pw[i - 1], P);
	for (int x = 0; x < 10; x++) {
		sv[1][x] = x + 1;
		for (int i = 2; i < N; i++)
			sv[i][x] = add(sv[i - 1][x], mul(x + 1, pw[i - 1]));
	}
	cin >> n >> m >> k >> s;
	build();
	int Q = m + k;
	while (Q--) {
		int tp, l, r, d;
		cin >> tp >> l >> r >> d;
		--l;
		if (tp == 1) 
			upd(l, r, d);
		else 
			cout << (get(l, r - d).hsh == get(l + d, r).hsh? "YES": "NO") << '\n';
	}
	return 0;
}
