#include<bits/stdc++.h>
using namespace std;
 
const int N = 300;
 
struct mat {
	int a[N][N];
	mat() {
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				a[i][j] = 0;
	}
	inline void clear() {
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				a[i][j] = 0;
	}
	inline mat operator * (const mat &b) {
		mat res;
		for (int i = 0; i < N; i++)
			for (int j = i; j < N; j++)
				for (int k = i; k <= j; k++)
					res.a[i][j] = max(res.a[i][j], a[i][k] + b.a[k][j]);
		return res;
	}
	inline void operator *= (const mat &b) {
		*this = *this * b;
	}
	inline void identity() {
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				a[i][j] = i == j;
	}
	inline mat operator ^ (int b) {
		mat res;
		mat a = *this;
		for (; b; b >>= 1, a *= a)
			if (b & 1)
				res *= a;
		return res;
	}
	inline void operator ^= (int b) {
		*this = *this ^ b;
	}
	inline void print() {
		for (int i = 0; i < N; i++, cout << '\n')
			for (int j = 0; j < N; j++)
				cout << a[i][j] << ' ';
		cout << '\n';
	}
};
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int n, T;
	cin >> n >> T;
	mat res;
	for (int i = 0, x; i < n; i++) {
		cin >> x;
		--x;
		mat A;
		for (int i = 0; i <= x; i++)
			for (int j = x; j < N; j++)
				A.a[i][j] = 1;
		res *= A;
	}
	cout << (res ^ T).a[0][N - 1] << '\n';
	return 0;
}
