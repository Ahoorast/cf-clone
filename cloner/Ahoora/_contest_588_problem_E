#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, maxC = 10, LG = 20;
int n, m, h[N];
vector<int> adj[N], people[N];
 
struct dt {
	vector<int> s;
	int p = 0;
	void collide(dt L, dt R) {
		p = R.p;
		s.clear();
		for (auto x: L.s)
			s.push_back(x);
		for (auto x: R.s)
			s.push_back(x);
		sort(s.begin(), s.end());
		while ((int)(s.size()) > maxC) 
			s.pop_back();
	}
	void print(int a) {
		int sz = (int)(s.size());
		a = min(a, sz);
		cout << a << ' ';
		for (int i = 0; i < a; i++)
			cout << s[i] << ' ';
		cout << '\n';
	}
	void init(int v, int par) {
		p = par;
		for (auto it: people[v])
			s.push_back(it);
		sort(s.begin(), s.end());
		while ((int)(s.size()) > maxC)
			s.pop_back();
	}
} st[N][LG];
 
void dfs(int root, int par = 0) {
	st[root][0].init(root, par);
	h[root] = h[par] + 1;
	for (int j = 1; j < LG; j++)
		st[root][j].collide(st[root][j - 1], st[st[root][j - 1].p][j - 1]);
	for (auto u: adj[root])
		if (u ^ par)
			dfs(u, root);
}
 
dt get(int v, int l) {
	dt res;
	for (int j = 0; j < LG; j++)
		if ((1 << j) & l) {
			res.collide(res, st[v][j]);
			v = st[v][j].p;
		}
	return res;
}
 
int get_par(int v, int l) {
	for (int j = 0; j < LG; j++)
		if ((1 << j) & l)
			v = st[v][j].p;
	return v;
}
 
int lca(int v, int u) {
	if (h[v] < h[u])
		swap(v, u);
	v = get_par(v, h[v] - h[u]);
	if (v == u)
		return v;
	for (int j = LG - 1; j >= 0; j--)
		if (st[v][j].p != st[u][j].p)
			v = st[v][j].p, u = st[u][j].p;
	return st[v][0].p;
}
 
void query(int v, int u, int a) {
	dt res;
	if (h[v] < h[u])
		swap(v, u);
	res = get(v, h[v] - h[u]);
	v = get_par(v, h[v] - h[u]);
	int w = lca(v, u);
	res.collide(res, get(v, h[v] - h[w] + 1));
	res.collide(res, get(u, h[u] - h[w]));
	res.print(a);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> m >> Q;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	for (int i = 1, c; i <= m; i++) {
		cin >> c;
		people[c].push_back(i);
	}
	dfs(1);
	while (Q--) {
		int v, u, a;
		cin >> v >> u >> a;
		query(v, u, a);
	}
	return 0;
}
