#include<bits/stdc++.h>
using namespace std;
 
const int N = 3000 + 10;
int n, m, k, d[N * N], par[N * N];
set<long long> s;
vector<int> adj[N];
 
int Node(int x, int y) {
	return x * n + y;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> k;
	for (int i = 1, v, u; i <= m; i++) {
		cin >> v >> u;
		--v, --u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	for (int i = 1; i <= k; i++) {
		long long a, b, c;
		cin >> a >> b >> c;
		--a, --b, --c;
		s.insert(a * n * n + b * n + c);
	}
	queue<int> q;
	fill(d, d + (N * N), 1 << 30);
	q.push(Node(0, 0)), d[Node(0, 0)] = 0;
	par[Node(0, 0)] = -1;
	while (q.size()) {
		int v = q.front();
		q.pop();
		int x = v % n, prv = v / n;
		for (auto u: adj[x]) {
			int nv = Node(x, u);
			long long lol = 1LL * prv * n * n + v * n + u;
			if (d[nv] > d[v] + 1 && !s.count(lol)) {
				d[nv] = d[v] + 1;
				par[nv] = v;
				q.push(nv);
				if (u == n - 1) {
					cout << d[nv] << '\n';
					int v = nv;
					vector<int> ans;
					while (v != -1) {
						ans.push_back(v % n);
						v = par[v];
					}
					reverse(ans.begin(), ans.end());
					for (auto u: ans)
						cout << u + 1 << ' ';
					cout << '\n';
					return 0;
				}
			}
		}
	}
	cout << "-1\n";
	return 0;
}
