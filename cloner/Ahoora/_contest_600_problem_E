#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, c[N], mx[N];
long long ans[N];
map<int, int> cnt[N];
vector<int> adj[N];
 
void dfs(int root, int dada = 0) {
	mx[root] = 1;
	cnt[root][c[root]]++;
	ans[root] = c[root];
	for (auto x: adj[root])
		if (x ^ dada) {
			dfs(x, root);
			int v = root, u = x;
			int x = cnt[v].size(), y = cnt[u].size();
			if (y > x) {
				ans[root] = ans[u], mx[root] = mx[u];
				swap(cnt[u], cnt[v]);
			}
			for (auto it: cnt[u]) {
				pair<int, int> t = it;
				cnt[v][it.first] += it.second;
				if (cnt[v][it.first] > mx[root]) {
					mx[root] = cnt[v][it.first];
					ans[root] = it.first;
				}
				else if (cnt[v][it.first] == mx[root]) 
					ans[root] += it.first;
			}
			cnt[u].clear();
		}
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> c[i];
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(1);
	for (int i = 1; i <= n; i++)
		cout << ans[i] << ' ';
	cout << '\n';
	return 0;
}
