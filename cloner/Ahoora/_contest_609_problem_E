#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, LG = 20;
int n, m, from[N], to[N], w[N], mx[N][LG], sz[N], par[N], h[N], p[N][LG];
vector<pair<int, int>> adj[N], adjT[N];
 
int get_par(int root) {
	return par[root] == root? root: par[root] = get_par(par[root]);
}
 
void Union(int v, int u) {
	v = get_par(v), u = get_par(u);
	if (sz[u] > sz[v])
		swap(v, u);
	sz[v] += sz[u];
	par[u] = v;
}
 
bool vld(int v, int u) {
	v = get_par(v), u = get_par(u);
	return v != u;
}
 
void dfs(int root, int dad = 0, int W = 0) {
	h[root] = h[dad] + 1, mx[root][0] = W, p[root][0] = dad;
	for (int j = 1; j < LG; j++) {
		p[root][j] = p[p[root][j - 1]][j - 1];
		mx[root][j] = max(mx[root][j - 1], mx[p[root][j - 1]][j - 1]);
	}
	for (auto u: adjT[root])
		if (u.first ^ dad)
			dfs(u.first, root, u.second);
}
 
int getmx(int v, int l) {
	int res = 0;
	for (int j = 0; j < LG; j++)
		if (l & (1 << j)) {
			res = max(res, mx[v][j]);
			v = p[v][j];
		}
	return res;
}
 
int getp(int v, int l) {
	for (int j = 0; j < LG; j++)
		if (l & (1 << j)) 
			v = p[v][j];
	return v;
}
 
int lca(int v, int u) {
	if (h[v] < h[u])
		swap(v, u);
	v = getp(v, h[v] - h[u]);
	if (v == u)
		return v;
	for (int j = LG - 1; j >= 0; j--)
		if (p[v][j] != p[u][j])
			v = p[v][j], u = p[u][j];
	return p[v][0];
}
 
int query(int v, int u) {
	int w = lca(v, u);
	if (h[v] < h[u])
		swap(v, u);
	int res = 0;
	res = getmx(v, h[v] - h[u]);
	v = getp(v, h[v] - h[u]);
	res = max({res, getmx(v, h[v] - h[w]), getmx(u, h[u] - h[w])});
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	vector<int> E;
	for (int i = 1, v, u; i <= m; i++) {
		cin >> v >> u >> w[i];
		from[i] = v, to[i] = u;
		adj[v].push_back({u, w[i]});
		adj[u].push_back({v, w[i]});
		E.push_back(i);
	}
	sort(E.begin(), E.end(), [](int i, int j) {
			return w[i] < w[j];
			});
	for (int i = 1; i <= n; i++)
		par[i] = i, sz[i] = 1;
	long long ans = 0;
	for (auto x: E) {
		int v = from[x], u = to[x];
		if (vld(v, u)) {
			Union(v, u);
			ans += w[x];
			adjT[v].push_back({u, w[x]});
			adjT[u].push_back({v, w[x]});
		}
	}
	dfs(1);
	for (int i = 1; i <= m; i++) {
		int v = from[i], u = to[i];
		cout << ans + w[i] - query(v, u) << '\n';
	}
	return 0;
}
