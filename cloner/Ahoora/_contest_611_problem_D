#include<bits/stdc++.h>
using namespace std;
 
const int N = 5010, mod = 1e9 + 7, P = 11;
int n, dp[N][N], pt[N][N], hsh[N], pw[N], wp[N];
string s;
 
long long Pow(long long a, long long b) {
	return b? (b & 1? a: 1) % mod * Pow(a * a % mod, b >> 1) % mod: 1;
}
 
int add(int x, int y) {
	x += y;
	x += (x < 0) * mod;
	x -= (x >= mod) * mod;
	return x;
}
 
int mul(int x, int y) {
	return 1LL * x * y % mod;
}
 
int get(int l, int len) { // 1-based 
	return mul(add(hsh[l + len - 1], -hsh[l - 1]), wp[l]);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	pw[0] = 1;
	for (int i = 1; i < N; i++)
		pw[i] = mul(pw[i - 1], P);
	wp[N - 1] = Pow(pw[N - 1], mod - 2);
	for (int i = N - 2; i >= 0; i--)
		wp[i] = mul(wp[i + 1], P);
	cin >> n >> s;
	for (int i = 1; i <= n; i++)
		hsh[i] = add(hsh[i - 1], mul(Pow(P, i), s[i - 1] - '0' + 1));
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= i; j++) {
			if (s[i - j] == '0')
				continue;
			if (i == j) {
				dp[i][j] = 1;
				continue;
			}
			dp[i][j] = pt[i - j][j - 1];
			int l = 0, r = j + 1;
			while (l + 1 < r) {
				int mid = l + r >> 1;
				if (get(i - j + 1, mid) == get(i - 2 * j + 1, mid))
					l = mid;
				else
					r = mid;
			}
			if (l != j && s[i - j + l] > s[i - 2 * j + l])
				dp[i][j] = add(dp[i][j], dp[i - j][j]);
		}
		for (int j = 1; j <= n; j++)
			pt[i][j] = add(pt[i][j - 1], dp[i][j]);
	}
	cout << pt[n][n] << '\n';
	return 0;
}
