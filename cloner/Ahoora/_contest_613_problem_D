#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, LG = 20;
int n, st[N], en[N], h[N], par[N][LG], TM, cnt[N];
bool mark[N], rem[N];
vector<int> adj[N], cld[N];
 
void dfs(int v) {
	st[v] = ++TM;
	for (int i = 1; i < LG; i++)
		par[v][i] = par[par[v][i - 1]][i - 1];
	for (auto u: adj[v])
		if (u != par[v][0]) {
			h[u] = h[v] + 1, par[u][0] = v;
			dfs(u);
		}
	en[v] = ++TM;
}
 
int lca(int v, int u) {
	if (h[v] < h[u])
		swap(v, u);
	for (int i = 0; i < LG; i++)
		if ((1 << i) & (h[v] - h[u]))
			v = par[v][i];
	if (v == u)
		return v;
	for (int i = LG - 1; i >= 0; i--)
		if (par[v][i] != par[u][i])
			v = par[v][i], u = par[u][i];
	return par[v][0];
}
 
void aux(vector<int> &ver) {
	sort(ver.begin(), ver.end(), [](int v, int u) { return st[v] < st[u]; });
	ver.resize(unique(ver.begin(), ver.end()) - ver.begin());
	int sz = (int)(ver.size());
	for (int i = 1; i < sz; i++)
		ver.push_back(lca(ver[i], ver[i - 1]));
	sort(ver.begin(), ver.end(), [](int v, int u) { return st[v] < st[u]; });
	ver.resize(unique(ver.begin(), ver.end()) - ver.begin());
	stack<int> s;
	sz = (int)(ver.size());
	s.push(ver[0]);
	for (int i = 1; i < sz; i++) {
		int v = ver[i];
		while (!(st[s.top()] <= st[v] && en[s.top()] >= en[v]))
			s.pop();
		cld[s.top()].push_back(v);
		s.push(v);
	}
}
 
int dfs_ans(int v) {
	int res = 0, ted = 0;
	cnt[v] += mark[v];
	for (auto u: cld[v]) {
		res += dfs_ans(u);
		if (mark[v])
			res += cnt[u];
		else 
			ted += cnt[u];
	}
	if (ted > 1)
		res++;
	else if (ted)
		cnt[v] = 1;
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1, v, u; i < n; i++) {
		cin >> v >> u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(1);
	int Q;
	cin >> Q;
	while (Q--) {
		int k;
		cin >> k;
		vector<int> ver(k);
		for (auto &v: ver)
			cin >> v, mark[v] = true;
		aux(ver);
		bool fnd = false;
		for (auto v: ver)
			for (auto u: cld[v])
				if (mark[v] && mark[u] && par[u][0] == v)
					fnd = true;
		if (fnd)
			cout << "-1\n";
		else
			cout << dfs_ans(ver[0]) << '\n';
		for (auto v: ver)
			cld[v].clear(), mark[v] = rem[v] = false, cnt[v] = 0;
	}
	return 0;
}
