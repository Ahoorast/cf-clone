#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10, LG = 20;
int n, m, dia[N], par[N][LG], col, c[N], h[N];
vector<int> adj[N], d[N], vec[N];
vector<long long> suf[N];
map<int, long double> mp[N];
 
void dfs(int v) {
	c[v] = col;
	if (par[v][0] == -1)
		for (int i = 0; i < LG; i++)
			par[v][i] = v;
	for (int i = 1; i < LG; i++)
		par[v][i] = par[par[v][i - 1]][i - 1];
	vec[c[v]].push_back(v);
	for (auto u: adj[v]) 
		if (!c[u]) {
			par[u][0] = v;
			h[u] = h[v] + 1;
			dfs(u);
		}
}
 
int lca(int v, int u) {
	if (h[v] < h[u])
		swap(v, u);
	for (int i = 0; i < LG; i++)
		if ((1 << i) & (h[v] - h[u]))
			v = par[v][i];
	if (v == u)
		return v;
	for (int i = LG - 1; i >= 0; i--)
		if (par[v][i] != par[u][i])
			v = par[v][i], u = par[u][i];
	return par[v][0];
}
 
int dis(int v, int u) {
	return h[v] + h[u] - 2 * h[lca(v, u)];
}
 
void get(int v, int u) {
	v = c[v], u = c[u];
	if (v == u) {
		cout << "-1\n";
		return;
	}
	if (d[v].size() > d[u].size())
		swap(v, u);
	if (mp[v].count(u)) {
		cout << mp[v][u] << '\n';
		return;
	}
	int lim = max(dia[v], dia[u]);
	long double res = 0;
	int sz = (int)(d[u].size());
	for (auto x: d[v]) {
		int ind = lower_bound(d[u].begin(), d[u].end(), lim - x) - d[u].begin();
		res += 1LL * ind * lim;
		res += 1LL * x * (sz - ind);
		res += suf[u][ind];
		res += (sz - ind);
	}
	res /= sz;
	res /= (int)(d[v].size());
	mp[v][u] = res;
	cout << res << '\n';
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cout << setprecision(6) << fixed;
	int Q;
	cin >> n >> m >> Q;
	for (int i = 0, v, u; i < m; i++) {
		cin >> v >> u;
		--v, --u;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	for (int i = 0; i < N; i++)
		for (int j = 0; j < LG; j++)
			par[i][j] = -1;
	for (int i = 0; i < n; i++)
		if (!c[i]) {
			col++;
			dfs(i);
		}
	for (int i = 1; i <= col; i++) {
		int v = vec[i][0], u = vec[i][0];
		for (auto w: vec[i]) {
			if (dis(v, w) < dis(u, w))
				swap(v, u);
			if (dis(v, w) > dis(v, u))
				u = w;
		}
		for (auto w: vec[i])
			d[i].push_back(max(dis(v, w), dis(u, w)));
		sort(d[i].begin(), d[i].end()); 
		int sz = (int)(d[i].size());
		suf[i].resize(sz);
		suf[i][sz - 1] = d[i][sz - 1];
		for (int j = sz - 2; j >= 0; j--)
			suf[i][j] = d[i][j] + suf[i][j + 1];
		dia[i] = dis(v, u);
	}
	while (Q--) {
		int v, u;
		cin >> v >> u;
		--v, --u;
		get(v, u);
	}
	return 0;
}
