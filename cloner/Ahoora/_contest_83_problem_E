#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, M = 21;
int n, L, a[N], dp[M][1 << M];
 
int handle(int x, int y) {
	for (int i = L; i >= 1; i--)
		if ((x & ((1 << i) - 1)) == (y >> (L - i)))
			return i;
	return 0;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		for (auto c: s)
			a[i] = a[i] * 2 + c - '0';
		L = (int)(s.size());
	}
	for (int i = 0; i <= L; i++)
		for (int j = 0; j < 1 << i; j++)
			dp[i][j] = 1 << 30;
	dp[0][0] = 0;
	int lazy = L;
	for (int i = 1; i < n; i++) {
		int mn = 1 << 30;
		lazy += L - handle(a[i - 1], a[i]);
		for (int j = 0; j <= L; j++)
			mn = min(mn, L - j + dp[j][(a[i] >> (L - j))]);
		for (int j = 0; j <= L; j++)
			dp[j][(a[i - 1] & ((1 << j) - 1))] = min(dp[j][(a[i - 1] & ((1 << j) - 1))], mn - L + handle(a[i - 1], a[i]));
	}
	cout << dp[0][0] + lazy << '\n';
 	return 0;
}
