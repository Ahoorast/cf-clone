#include<bits/stdc++.h>
using namespace std;
 
const int N = 5 * 1000 * 100 + 10;
int trie[N << 1][2], sz[N << 1], cnt[50], counter, n;
 
void insert(int x) {
	for (int i = 30, j = 0; i >= 0; i--) {
		bool b = (1 << i) & x;
		if (!trie[j][b])
			trie[j][b] = ++counter;
		j = trie[j][b];
	}
}
 
void dfs(int root) {
	if (trie[root][0])
		dfs(trie[root][0]), sz[root] += sz[trie[root][0]];
	if (trie[root][1]) 
		dfs(trie[root][1]), sz[root] += sz[trie[root][1]]; sz[root] += sz[root] == 0;
} 
	
void upd(int x) {
	for (int i = 30; i >= 0; i--)
		cnt[i] += (bool)(x & (1 << i));
}
 
int getMex() {
	int res = 0;
	for (int i = 30, j = 0; i >= 0; i--) {
		int x[2] = {0, 1};
		if (cnt[i] & 1)
			swap(x[0], x[1]);
		if (!trie[j][x[0]])
			return res;
		if (sz[trie[j][x[0]]] < (1 << i)) 
			j = trie[j][x[0]];
		else {
 			res ^= 1 << i;
			if (!trie[j][x[1]])
				return res;
			j = trie[j][x[1]];
		}
	}
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q;
	for (int i = 1, a; i <= n; i++)
		cin >> a, insert(a);
	dfs(0);
	while (Q--) {
		int x;
		cin >> x;
		upd(x);
		cout << getMex() << '\n';
	}
	return 0;
}
