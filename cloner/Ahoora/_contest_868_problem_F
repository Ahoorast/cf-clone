#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 100 + 10;
int n, k, a[N], cnt[N];
int L = 1, R = 2;
long long dp[N], old[N], c;
 
void get_to(int l, int r) {
	while (L < l) 
		c -= --cnt[a[L++]];
	while (L > l) 
		c += cnt[a[--L]]++;
	while (R > r) 
		c -= --cnt[a[--R]];
	while (R < r) 
		c += cnt[a[R++]]++;
}
 
void upd(int l = 0, int r = n, int s = 0, int e = n) {
	if (l > r)
		return;
	int mid = l + r >> 1, x;
	dp[mid] = 1LL * n * n;
	for (int i = s; i <= min(e, mid); i++) {
		get_to(i + 1, mid + 1);
		if (dp[mid] > old[i] + c) {
			dp[mid] = old[i] + c;
			x = i;
		}
	}
	upd(l, mid - 1, s, x);
	upd(mid + 1, r, x, e);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> k;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	cnt[a[1]]++;
	for (int i = 1; i <= n; i++)
		old[i] = 1LL * n * n;
	for (int i = 0; i < k; i++) {
		upd();
		for (int i = 0; i <= n; i++)
			swap(old[i], dp[i]);
	}
	cout << old[n] << '\n';
	return 0;
}
