#include<bits/stdc++.h>
using namespace std;
 
const int N = 100 * 1000 + 10 + 320, MXSQ = 320;
int n, k, t[N], pref[N], suf[N], kamtar[N], bishtar[N];
long long a[N], s[MXSQ][MXSQ];
int mp[MXSQ][N], cnt[N];
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> k;
	for (int i = 1; i <= n; i++)
		cin >> t[i];
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1; i <= n; i++)
		a[i] = a[i - 1] + (t[i] == 1? a[i]: -a[i]);
	vector<long long> v;
	for (int i = 0; i <= n; i++) 
		v.push_back(a[i]);
	sort(v.begin(), v.end());
	v.resize(unique(v.begin(), v.end()) - v.begin());
	for (int i = 0; i <= n; i++) {
		kamtar[i] = bishtar[i] = n + 1;
		auto it = lower_bound(v.begin(), v.end(), a[i] - k);
		if (*it == a[i] - k)
			kamtar[i] = it - v.begin();
		it = lower_bound(v.begin(), v.end(), a[i] + k);
		if (*it == a[i] + k)
			bishtar[i] = it - v.begin();
		a[i] = lower_bound(v.begin(), v.end(), a[i]) - v.begin();
	}
	int SQ = 1;
	while (SQ * SQ < n + 1)
		SQ++;
	int sz = 0;
	for (int i = 0; i <= n; i += SQ) {
		for (int j = i; j < i + SQ && j <= n; j++) {
			pref[j] = (j == i? 0: pref[j - 1]) + cnt[kamtar[j]];
			cnt[a[j]]++;
		}
		for (int j = i; j < i + SQ && j <= n; j++)
			cnt[a[j]]--;
		for (int j = min(i + SQ - 1, (int)(n)); j >= i; j--) {
			suf[j] = (j == min(i + SQ - 1, (int)(n))? 0: suf[j + 1]) + cnt[bishtar[j]];
			cnt[a[j]]++;
			mp[i / SQ][a[j]]++;
		}
		for (int j = min(i + SQ - 1, (int)(n)); j >= i; j--)
			cnt[a[j]]--;
		sz++;
	}
	for (int i = 1; i < sz; i++)
		for (int j = 0; j < N; j++)
			mp[i][j] += mp[i - 1][j];
	for (int i = 0; i < sz; i++)
		for (int j = i + 1; j < sz; j++)
			for (int k = j * SQ; k < (j + 1) * SQ && k <= n; k++) 
				s[i][j] += mp[j - 1][kamtar[k]] - (i - 1 >= 0? mp[i - 1][kamtar[k]]: 0);
	for (int i = 0; i < sz; i++)
		for (int j = i + 1; j < sz; j++)
			s[i][j] += s[i][j - 1];
	for (int i = 0; i < sz; i++)
		for (int j = 0; j < sz; j++)
			s[j][i] = s[i][j];
	int Q;
	cin >> Q;
	while (Q--) {
		int l, r;
		cin >> l >> r;
		l--;
		long long ans = 0;
		int L = n + 1, R = 0;
		for (int i = 0; i <= n; i += SQ)
			if (i >= l && min(i + SQ - 1, (int)(n)) <= r)
				L = min(L, i), R = max(R, i);
		if (L <= R) {
			ans += s[L / SQ][R / SQ];
			for (int i = L; i <= R; i += SQ)
				ans += pref[i + SQ - 1];
			for (int i = R + SQ; i <= r; i++)
				ans += mp[R / SQ][kamtar[i]] - (L / SQ - 1 >= 0? mp[L / SQ - 1][kamtar[i]]: 0);
			if (r != R + SQ - 1)
				ans += pref[r];
			for (int i = l; i < L; i++)
				ans += mp[R / SQ][bishtar[i]] - (L / SQ - 1 >= 0? mp[L / SQ - 1][bishtar[i]]: 0);
			if (l < L)
				ans += suf[l];
			for (int i = l; i < L; i++)
				cnt[a[i]]++;
			for (int i = R + SQ; i <= r; i++)
				ans += cnt[kamtar[i]];
			for (int i = l; i < L; i++)
				cnt[a[i]]--;
		}
		else {
			for (int i = l; i <= r; i++) {
				ans += cnt[kamtar[i]];
				cnt[a[i]]++;
			}
			for (int i = l; i <= r; i++)
				cnt[a[i]]--;
		}
		cout << ans << '\n';
	}
	return 0;
}
