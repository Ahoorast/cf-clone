#include<bits/stdc++.h>
using namespace std;
 
const int N = 2 * 1000 * 100 + 10, mod = 998244353;
int n;
set<pair<int, int>> s[N];
 
struct Node {
	int s = 0, len = 0, a = 1, b = 0;
	void add(Node x) {
		s = (1LL * s * x.a % mod + 1LL * len * x.b % mod) % mod;
		a = 1LL * a * x.a % mod;
		b = (1LL * b * x.a % mod + x.b) % mod;
	}
	void merge(Node L, Node R) {
		s = (L.s + R.s) % mod;
	}
} seg[N << 2];
 
void build(int l = 0, int r = n, int id = 1) {
	seg[id].len = r - l;
	if (l + 1 == r)
		return;
	int mid = l + r >> 1;
	build(l, mid, id << 1), build(mid, r, id << 1 | 1);
}
 
void push(int id) {
	seg[id << 1].add(seg[id]), seg[id << 1 | 1].add(seg[id]);
	seg[id].a = 1, seg[id].b = 0;
}
 
Node get(int s, int e, int l = 0, int r = n, int id = 1) {
	if (s <= l && e >= r) 
		return seg[id];
	if (s >= r || e <= l)
		return seg[0];
	push(id);
	int mid = l + r >> 1;
	Node res;
	res.merge(get(s, e, l, mid, id << 1), get(s, e, mid, r, id << 1 | 1));
	return res;
}
 
void upd(Node x, int s, int e, int l = 0, int r = n, int id = 1) {
	if (l >= r)
		return;
	if (s <= l && e >= r) {
		seg[id].add(x);
		return;
	}
	if (s >= r || e <= l)
		return;
	push(id);
	int mid = l + r >> 1;
	upd(x, s, e, l, mid, id << 1), upd(x, s, e, mid, r, id << 1 | 1);
	seg[id].merge(seg[id << 1], seg[id << 1 | 1]);
}
 
int L, R;
 
void add(int l, int r, int x) {
	if (l >= r)
		return;
	Node mul2, add1;
	mul2.a = 2, add1.b = 1;
	auto it = s[x].lower_bound({l, 0});
	auto p = --it;
	++it;
	if ((*p).second > l) {
		it = p;
		L = min(L, (*p).first);
	}
	upd(add1, l, min(r, (*it).first));
	vector<pair<int, int>> vec;
	while ((*it).first < r) {
		upd(mul2, max(l, (*it).first), min(r, (*it).second));
		auto nx = ++it;
		--it;
		upd(add1, (*it).second, min(r, (*nx).first));
		R = max(R, (*it).second);
		vec.push_back(*it);
		++it;
	}
	for (auto it: vec)
		s[x].erase(it);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int Q;
	cin >> n >> Q;
	for (int i = 1; i <= n; i++)
		s[i].insert({-1, -1}), s[i].insert({n, n});
	build();
	while (Q--) {
		int tp, l, r, x;
		cin >> tp >> l >> r;
		--l;
		if (tp == 2)
			cout << get(l, r).s << '\n';
		else {
			cin >> x;
			L = l, R = r;
			add(l, r, x);
			s[x].insert({L, R});
		}
	}
	return 0;
}
