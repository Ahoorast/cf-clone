#include<bits/stdc++.h>
using namespace std;
 
const int N = 3 * 1000 * 100 + 10, M = 8;
int n, mask[N], cal[N][1 << M];
bool w[N];
char c[N][M];
 
int rev(int msk) {
	return ((1 << M) - 1) ^ msk;
}
 
int esh(int msk1, int msk2) {
	return __builtin_popcount(msk1 & msk2) + __builtin_popcount(rev(msk1) & rev(msk2));
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	char ggg = '0';
	while (ggg >= '0' && ggg <= '9') {
		((n *= 10) += ggg - '0');
		ggg = getchar();
	}
	for (int i = 0; i < n; i++, getchar())
		for (int j = 0; j < M; j++) {
			c[i][j] = getchar();
			mask[i] ^= (1 << j) * (c[i][j] == 'R');
		}
	for (int i = 0; i < n; i++) {
		for (int j = i; j > i - M && j >= 0; j--) 
			for (int k = 1; k <= M; k++)
				if (j + k <= i && esh(mask[j], mask[j + k]) >= k)
					w[j] |= !w[j + k];
		int j = i - M;
		vector<pair<int, int>> vec;
		int res = false;
		int msk = 0;
		if (j >= 0)
			for (int k = 1; k <= M; k++)
				msk ^= (1 << (k - 1)) * w[j + k];
		while (j >= 0) {
			if (cal[j][msk]) {
				res = cal[j][msk];
				break;
			}
			for (int k = 1; k <= M; k++)
				if (j + k < n && esh(mask[j], mask[j + k]) >= k && !((msk >> (k - 1)) & 1))
					w[j] |= !w[j + k];
			vec.push_back({j, msk});
			j--;
			if (j >= 0) {
				msk &= (1 << (M - 1)) - 1;
				msk <<= 1;
				msk ^= w[j + 1];
			}
		}
		if (j < 0)
			res = (w[0]? 1: 2);
		if (res == 1)
			printf("1");
		else
			printf("2");
		for (auto it: vec)
			cal[it.first][it.second] = res;
		for (; j <= i; j++)
			w[j] = false;
	}
	printf("\n");
	return 0;
}
