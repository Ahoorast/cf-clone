#include<bits/stdc++.h>
using namespace std;
 
const int N = 1000 * 1000 + 10, P = 5, mod = 1e9 + 9;
int n, m, pw[N], wp[N];
vector<vector<int>> hsh, rev;
vector<int> pos[N];
string c[N];
 
long long Pow(long long a, long long b) {
	return b? (b & 1? a: 1) % mod * Pow(a * a % mod, b >> 1) % mod: 1;
}
 
int add(int a, int b) {
	a += b;
	if (a < 0)
		a += mod;
	if (a >= mod)
		a -= mod;
	return a;
}
 
int mul(int a, int b) {
	return 1LL * a * b % mod;
}
 
int get(int col, int l, int r) { // [l, r) and l, r are zero based
	return mul(add(hsh[col][r], -hsh[col][l]), wp[l]);
}
 
int get_rev(int col, int l, int r) {  // n - l ... n - r + 1
	return mul(add(rev[col][l], -rev[col][r]), wp[n - r]);
}
 
int inp() {
	char c = '0';
	int res = 0;
	while (c >= '0' && c <= '9') {
		((res *= 10) += c - '0');
		c = getchar();
	}
	return res;
}
 
long long solve(vector<int> vec) {
	long long res = 0;
	vector<int> all;
	for (auto x: vec)
		all.push_back(x);
	sort(all.begin(), all.end());
	all.resize(unique(all.begin(), all.end()) - all.begin());
	for (int i = 0; i < m; i++) 
		pos[vec[i]].push_back(i);
	int prv = 0;
	set<int> s;
	s.insert(-1), s.insert(m);
	long long C = 1LL * (m + 1) * m / 2;
	for (auto x: all) {
		res += C * (x - prv);
		for (auto i: pos[x]) {
			auto it = s.upper_bound(i);
			int r = *it;
			int l = *--it;
			int len = r - l - 1;
			C -= 1LL * (len + 1) * len / 2;
			len = r - i - 1;
			C += 1LL * (len + 1) * len / 2;
			len = i - l - 1;
			C += 1LL * (len + 1) * len / 2;
			s.insert(i);
		}
		prv = x;
	}
	for (auto x: vec)
		pos[x].clear();
	return res;
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	pw[0] = 1;
	for (int i = 1; i < N; i++)
		pw[i] = mul(pw[i - 1], P);
	wp[N - 1] = Pow(pw[N - 1], mod - 2);
	for (int i = N - 2; i >= 0; i--)
		wp[i] = mul(wp[i + 1], P);
	cin >> n >> m;
	hsh.resize(m, vector<int>(n + 1, 0));
	rev.resize(m, vector<int>(n + 1, 0));
	for (int i = 0; i < n; i++)
		cin >> c[i];
	for (int j = 0; j < m; j++) 
		for (int i = 1; i <= n; i++)
			hsh[j][i] = add(hsh[j][i - 1], mul(pw[i], c[i - 1][j] - '0' + 1));
	for (int j = 0; j < m; j++)
		for (int i = n - 1; i >= 0; i--)
			rev[j][i] = add(rev[j][i + 1], mul(pw[n - i], c[i][j] - '0' + 1));
	long long ans = 0;
	for (int i = 1; i < n; i++) {
		vector<int> vec;
		for (int j = 0; j < m; j++) {
			int l = 0, r = min(i, n - i) + 1;
			while (l + 1 < r) {
				int mid = l + r >> 1;
				if (get_rev(j, i - mid, i) == get(j, i, i + mid))
					l = mid;
				else
					r = mid;
			}
			vec.push_back(l);
		}
		ans += solve(vec);
	}
	for (int i = 0; i < n; i++) { 
		vector<int> vec;
		for (int j = 0; j < m; j++) {
			int l = 0, r = min(i + 1, n - i);
			while (l + 1 < r) {
				int mid = l + r >> 1;
				if (get_rev(j, i - mid, i) == get(j, i + 1, i + mid + 1))
					l = mid;
				else
					r = mid;
			}
			vec.push_back(l + 1);
		}
		ans += solve(vec);
	}
	cout << ans << '\n';
	return 0;
}
