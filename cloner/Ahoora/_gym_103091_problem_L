#include<bits/stdc++.h>
using namespace std;
 
const int N = 5000 * 100 + 10;
int n, m, r[N], l[N], deg[N];
bool vis[N];
vector<int> adj[N], L, jda[N];
 
void dfs(int v) {
	vis[v] = true;
	for (auto u: adj[v])
		if (!vis[u])
			dfs(u);
	L.push_back(v);
}
 
int main() { 
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m;
	vector<pair<int, int>> E, ans;
	for (int i = 1, v, u; i <= m; i++) {
		cin >> v >> u;
		--v, --u;
		adj[v].push_back(u);
		jda[u].push_back(v);
		E.push_back({v, u});
	}
	for (int i = 0; i < n; i++)
		if (!vis[i])
			dfs(i);
	int src = 0;
	fill(deg, deg + n, 0);
	for (int i = 0; i < n; i++) {
		int v = L[i];
		src++;
		for (auto u: adj[v]) {
			deg[u]++;
			src -= (deg[u] == 1);
		}
		l[v] = src;
	}
	fill(deg, deg + n, 0);
	src = 0;
	for (int i = n - 1; i >= 0; i--) {
		int v = L[i];
		src++;
		for (auto u: jda[v]) {
			deg[u]++;
			src -= (deg[u] == 1);
		}
		r[v] = src;
	}
	int res = 0;
	for (int i = 0; i < n; i++)
		res += (r[i] == 1 && l[i] == 1);
	cout << res << '\n';
	return 0;
}
